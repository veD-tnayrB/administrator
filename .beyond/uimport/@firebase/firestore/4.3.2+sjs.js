{"code":"System.register([\"@firebase/util@1.9.3\",\"@firebase/component@0.6.4\",\"@firebase/logger@0.4.0\",\"idb@7.1.1\",\"@firebase/app@0.9.23\",\"@firebase/webchannel-wrapper@0.10.3\"], (_exports, _context) => {\n\nconst bimport = specifier => {\n\tconst dependencies = new Map([[\"@firebase/util\",\"1.9.3\"],[\"@firebase/component\",\"0.6.4\"],[\"@firebase/logger\",\"0.4.0\"],[\"idb\",\"7.1.1\"],[\"@firebase/app\",\"0.9.23\"],[\"@firebase/webchannel-wrapper\",\"0.10.3\"],[\"@firebase/firestore\",\"4.3.2\"]]);\n\treturn globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));\n};\n\n\nvar dependencies = new Map();\nvar require = dependency => dependencies.get(dependency);\nreturn {\nsetters: [dep => dependencies.set('@firebase/util@1.9.3', dep), dep => dependencies.set('@firebase/component@0.6.4', dep), dep => dependencies.set('@firebase/logger@0.4.0', dep), dep => dependencies.set('idb@7.1.1', dep), dep => dependencies.set('@firebase/app@0.9.23', dep), dep => dependencies.set('@firebase/webchannel-wrapper@0.10.3', dep)],\nexecute: function() {\n// Prevent esbuild from considering the context to be amd\nconst define = void 0;\nconst module = {};\n\nconst code = (module, require) => {\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// .beyond/uimport/@firebase/firestore.4.3.2.js\nvar firestore_4_3_2_exports = {};\n__export(firestore_4_3_2_exports, {\n  AbstractUserDataWriter: () => AbstractUserDataWriter,\n  AggregateField: () => AggregateField,\n  AggregateQuerySnapshot: () => AggregateQuerySnapshot,\n  Bytes: () => Bytes,\n  CACHE_SIZE_UNLIMITED: () => ge,\n  CollectionReference: () => CollectionReference,\n  DocumentReference: () => DocumentReference,\n  DocumentSnapshot: () => DocumentSnapshot,\n  FieldPath: () => FieldPath,\n  FieldValue: () => FieldValue,\n  Firestore: () => Firestore,\n  FirestoreError: () => FirestoreError,\n  GeoPoint: () => GeoPoint,\n  LoadBundleTask: () => LoadBundleTask,\n  PersistentCacheIndexManager: () => PersistentCacheIndexManager,\n  Query: () => Query,\n  QueryCompositeFilterConstraint: () => QueryCompositeFilterConstraint,\n  QueryConstraint: () => QueryConstraint,\n  QueryDocumentSnapshot: () => QueryDocumentSnapshot,\n  QueryEndAtConstraint: () => QueryEndAtConstraint,\n  QueryFieldFilterConstraint: () => QueryFieldFilterConstraint,\n  QueryLimitConstraint: () => QueryLimitConstraint,\n  QueryOrderByConstraint: () => QueryOrderByConstraint,\n  QuerySnapshot: () => QuerySnapshot,\n  QueryStartAtConstraint: () => QueryStartAtConstraint,\n  SnapshotMetadata: () => SnapshotMetadata,\n  Timestamp: () => Timestamp,\n  Transaction: () => Transaction,\n  WriteBatch: () => WriteBatch,\n  _AutoId: () => __PRIVATE_AutoId,\n  _ByteString: () => ByteString,\n  _DatabaseId: () => DatabaseId,\n  _DocumentKey: () => DocumentKey,\n  _EmptyAppCheckTokenProvider: () => __PRIVATE_EmptyAppCheckTokenProvider,\n  _EmptyAuthCredentialsProvider: () => __PRIVATE_EmptyAuthCredentialsProvider,\n  _FieldPath: () => FieldPath$1,\n  _TestingHooks: () => TestingHooks,\n  _cast: () => __PRIVATE_cast,\n  _debugAssert: () => __PRIVATE_debugAssert,\n  _isBase64Available: () => __PRIVATE_isBase64Available,\n  _logWarn: () => __PRIVATE_logWarn,\n  _validateIsNotUsedTogether: () => __PRIVATE_validateIsNotUsedTogether,\n  addDoc: () => addDoc,\n  aggregateFieldEqual: () => aggregateFieldEqual,\n  aggregateQuerySnapshotEqual: () => aggregateQuerySnapshotEqual,\n  and: () => and,\n  arrayRemove: () => arrayRemove,\n  arrayUnion: () => arrayUnion,\n  average: () => average,\n  clearIndexedDbPersistence: () => clearIndexedDbPersistence,\n  collection: () => collection,\n  collectionGroup: () => collectionGroup,\n  connectFirestoreEmulator: () => connectFirestoreEmulator,\n  count: () => count,\n  deleteAllPersistentCacheIndexes: () => deleteAllPersistentCacheIndexes,\n  deleteDoc: () => deleteDoc,\n  deleteField: () => deleteField,\n  disableNetwork: () => disableNetwork,\n  disablePersistentCacheIndexAutoCreation: () => disablePersistentCacheIndexAutoCreation,\n  doc: () => doc,\n  documentId: () => documentId,\n  enableIndexedDbPersistence: () => enableIndexedDbPersistence,\n  enableMultiTabIndexedDbPersistence: () => enableMultiTabIndexedDbPersistence,\n  enableNetwork: () => enableNetwork,\n  enablePersistentCacheIndexAutoCreation: () => enablePersistentCacheIndexAutoCreation,\n  endAt: () => endAt,\n  endBefore: () => endBefore,\n  ensureFirestoreConfigured: () => ensureFirestoreConfigured,\n  executeWrite: () => executeWrite,\n  getAggregateFromServer: () => getAggregateFromServer,\n  getCountFromServer: () => getCountFromServer,\n  getDoc: () => getDoc,\n  getDocFromCache: () => getDocFromCache,\n  getDocFromServer: () => getDocFromServer,\n  getDocs: () => getDocs,\n  getDocsFromCache: () => getDocsFromCache,\n  getDocsFromServer: () => getDocsFromServer,\n  getFirestore: () => getFirestore,\n  getPersistentCacheIndexManager: () => getPersistentCacheIndexManager,\n  increment: () => increment,\n  initializeFirestore: () => initializeFirestore,\n  limit: () => limit,\n  limitToLast: () => limitToLast,\n  loadBundle: () => loadBundle,\n  memoryEagerGarbageCollector: () => memoryEagerGarbageCollector,\n  memoryLocalCache: () => memoryLocalCache,\n  memoryLruGarbageCollector: () => memoryLruGarbageCollector,\n  namedQuery: () => namedQuery,\n  onSnapshot: () => onSnapshot,\n  onSnapshotsInSync: () => onSnapshotsInSync,\n  or: () => or,\n  orderBy: () => orderBy,\n  persistentLocalCache: () => persistentLocalCache,\n  persistentMultipleTabManager: () => persistentMultipleTabManager,\n  persistentSingleTabManager: () => persistentSingleTabManager,\n  query: () => query,\n  queryEqual: () => queryEqual,\n  refEqual: () => refEqual,\n  runTransaction: () => runTransaction,\n  serverTimestamp: () => serverTimestamp,\n  setDoc: () => setDoc,\n  setIndexConfiguration: () => setIndexConfiguration,\n  setLogLevel: () => setLogLevel,\n  snapshotEqual: () => snapshotEqual,\n  startAfter: () => startAfter,\n  startAt: () => startAt,\n  sum: () => sum,\n  terminate: () => terminate,\n  updateDoc: () => updateDoc,\n  waitForPendingWrites: () => waitForPendingWrites,\n  where: () => where,\n  writeBatch: () => writeBatch\n});\nmodule.exports = __toCommonJS(firestore_4_3_2_exports);\n\n// node_modules/@firebase/firestore/dist/index.esm2017.js\nvar import_app = require(\"@firebase/app@0.9.23\");\nvar import_component = require(\"@firebase/component@0.6.4\");\nvar import_logger = require(\"@firebase/logger@0.4.0\");\nvar import_util = require(\"@firebase/util@1.9.3\");\nvar import_webchannel_wrapper = require(\"@firebase/webchannel-wrapper@0.10.3\");\nvar S = \"@firebase/firestore\";\nvar User = class {\n  constructor(e) {\n    this.uid = e;\n  }\n  isAuthenticated() {\n    return null != this.uid;\n  }\n  toKey() {\n    return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n  }\n  isEqual(e) {\n    return e.uid === this.uid;\n  }\n};\nUser.UNAUTHENTICATED = new User(null), User.GOOGLE_CREDENTIALS = new User(\"google-credentials-uid\"), User.FIRST_PARTY = new User(\"first-party-uid\"), User.MOCK_USER = new User(\"mock-user\");\nvar b = \"10.5.2\";\nvar D = new import_logger.Logger(\"@firebase/firestore\");\nfunction __PRIVATE_getLogLevel() {\n  return D.logLevel;\n}\nfunction setLogLevel(e) {\n  D.setLogLevel(e);\n}\nfunction __PRIVATE_logDebug(e, ...t) {\n  if (D.logLevel <= import_logger.LogLevel.DEBUG) {\n    const n = t.map(__PRIVATE_argToString);\n    D.debug(`Firestore (${b}): ${e}`, ...n);\n  }\n}\nfunction __PRIVATE_logError(e, ...t) {\n  if (D.logLevel <= import_logger.LogLevel.ERROR) {\n    const n = t.map(__PRIVATE_argToString);\n    D.error(`Firestore (${b}): ${e}`, ...n);\n  }\n}\nfunction __PRIVATE_logWarn(e, ...t) {\n  if (D.logLevel <= import_logger.LogLevel.WARN) {\n    const n = t.map(__PRIVATE_argToString);\n    D.warn(`Firestore (${b}): ${e}`, ...n);\n  }\n}\nfunction __PRIVATE_argToString(e) {\n  if (\"string\" == typeof e) return e;\n  try {\n    return function __PRIVATE_formatJSON(e2) {\n      return JSON.stringify(e2);\n    }(e);\n  } catch (t) {\n    return e;\n  }\n}\nfunction fail(e = \"Unexpected state\") {\n  const t = `FIRESTORE (${b}) INTERNAL ASSERTION FAILED: ` + e;\n  throw __PRIVATE_logError(t), new Error(t);\n}\nfunction __PRIVATE_hardAssert(e, t) {\n  e || fail();\n}\nfunction __PRIVATE_debugAssert(e, t) {\n  e || fail();\n}\nfunction __PRIVATE_debugCast(e, t) {\n  return e;\n}\nvar C = {\n  OK: \"ok\",\n  CANCELLED: \"cancelled\",\n  UNKNOWN: \"unknown\",\n  INVALID_ARGUMENT: \"invalid-argument\",\n  DEADLINE_EXCEEDED: \"deadline-exceeded\",\n  NOT_FOUND: \"not-found\",\n  ALREADY_EXISTS: \"already-exists\",\n  PERMISSION_DENIED: \"permission-denied\",\n  UNAUTHENTICATED: \"unauthenticated\",\n  RESOURCE_EXHAUSTED: \"resource-exhausted\",\n  FAILED_PRECONDITION: \"failed-precondition\",\n  ABORTED: \"aborted\",\n  OUT_OF_RANGE: \"out-of-range\",\n  UNIMPLEMENTED: \"unimplemented\",\n  INTERNAL: \"internal\",\n  UNAVAILABLE: \"unavailable\",\n  DATA_LOSS: \"data-loss\"\n};\nvar FirestoreError = class extends import_util.FirebaseError {\n  constructor(e, t) {\n    super(e, t), this.code = e, this.message = t, this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n};\nvar __PRIVATE_Deferred = class {\n  constructor() {\n    this.promise = new Promise((e, t) => {\n      this.resolve = e, this.reject = t;\n    });\n  }\n};\nvar __PRIVATE_OAuthToken = class {\n  constructor(e, t) {\n    this.user = t, this.type = \"OAuth\", this.headers = /* @__PURE__ */new Map(), this.headers.set(\"Authorization\", `Bearer ${e}`);\n  }\n};\nvar __PRIVATE_EmptyAuthCredentialsProvider = class {\n  getToken() {\n    return Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(e, t) {\n    e.enqueueRetryable(() => t(User.UNAUTHENTICATED));\n  }\n  shutdown() {}\n};\nvar __PRIVATE_EmulatorAuthCredentialsProvider = class {\n  constructor(e) {\n    this.token = e, this.changeListener = null;\n  }\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n  invalidateToken() {}\n  start(e, t) {\n    this.changeListener = t, e.enqueueRetryable(() => t(this.token.user));\n  }\n  shutdown() {\n    this.changeListener = null;\n  }\n};\nvar __PRIVATE_FirebaseAuthCredentialsProvider = class {\n  constructor(e) {\n    this.t = e, this.currentUser = User.UNAUTHENTICATED, this.i = 0, this.forceRefresh = false, this.auth = null;\n  }\n  start(e, t) {\n    let n = this.i;\n    const __PRIVATE_guardedChangeListener = e2 => this.i !== n ? (n = this.i, t(e2)) : Promise.resolve();\n    let r = new __PRIVATE_Deferred();\n    this.o = () => {\n      this.i++, this.currentUser = this.u(), r.resolve(), r = new __PRIVATE_Deferred(), e.enqueueRetryable(() => __PRIVATE_guardedChangeListener(this.currentUser));\n    };\n    const __PRIVATE_awaitNextToken = () => {\n        const t2 = r;\n        e.enqueueRetryable(async () => {\n          await t2.promise, await __PRIVATE_guardedChangeListener(this.currentUser);\n        });\n      },\n      __PRIVATE_registerAuth = e2 => {\n        __PRIVATE_logDebug(\"FirebaseAuthCredentialsProvider\", \"Auth detected\"), this.auth = e2, this.auth.addAuthTokenListener(this.o), __PRIVATE_awaitNextToken();\n      };\n    this.t.onInit(e2 => __PRIVATE_registerAuth(e2)), setTimeout(() => {\n      if (!this.auth) {\n        const e2 = this.t.getImmediate({\n          optional: true\n        });\n        e2 ? __PRIVATE_registerAuth(e2) : (__PRIVATE_logDebug(\"FirebaseAuthCredentialsProvider\", \"Auth not yet detected\"), r.resolve(), r = new __PRIVATE_Deferred());\n      }\n    }, 0), __PRIVATE_awaitNextToken();\n  }\n  getToken() {\n    const e = this.i,\n      t = this.forceRefresh;\n    return this.forceRefresh = false, this.auth ? this.auth.getToken(t).then(t2 => this.i !== e ? (__PRIVATE_logDebug(\"FirebaseAuthCredentialsProvider\", \"getToken aborted due to token change.\"), this.getToken()) : t2 ? (__PRIVATE_hardAssert(\"string\" == typeof t2.accessToken), new __PRIVATE_OAuthToken(t2.accessToken, this.currentUser)) : null) : Promise.resolve(null);\n  }\n  invalidateToken() {\n    this.forceRefresh = true;\n  }\n  shutdown() {\n    this.auth && this.auth.removeAuthTokenListener(this.o);\n  }\n  u() {\n    const e = this.auth && this.auth.getUid();\n    return __PRIVATE_hardAssert(null === e || \"string\" == typeof e), new User(e);\n  }\n};\nvar __PRIVATE_FirstPartyToken = class {\n  constructor(e, t, n) {\n    this.l = e, this.h = t, this.P = n, this.type = \"FirstParty\", this.user = User.FIRST_PARTY, this.I = /* @__PURE__ */new Map();\n  }\n  T() {\n    return this.P ? this.P() : null;\n  }\n  get headers() {\n    this.I.set(\"X-Goog-AuthUser\", this.l);\n    const e = this.T();\n    return e && this.I.set(\"Authorization\", e), this.h && this.I.set(\"X-Goog-Iam-Authorization-Token\", this.h), this.I;\n  }\n};\nvar __PRIVATE_FirstPartyAuthCredentialsProvider = class {\n  constructor(e, t, n) {\n    this.l = e, this.h = t, this.P = n;\n  }\n  getToken() {\n    return Promise.resolve(new __PRIVATE_FirstPartyToken(this.l, this.h, this.P));\n  }\n  start(e, t) {\n    e.enqueueRetryable(() => t(User.FIRST_PARTY));\n  }\n  shutdown() {}\n  invalidateToken() {}\n};\nvar AppCheckToken = class {\n  constructor(e) {\n    this.value = e, this.type = \"AppCheck\", this.headers = /* @__PURE__ */new Map(), e && e.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n  }\n};\nvar __PRIVATE_FirebaseAppCheckTokenProvider = class {\n  constructor(e) {\n    this.A = e, this.forceRefresh = false, this.appCheck = null, this.R = null;\n  }\n  start(e, t) {\n    const onTokenChanged = e2 => {\n      null != e2.error && __PRIVATE_logDebug(\"FirebaseAppCheckTokenProvider\", `Error getting App Check token; using placeholder token instead. Error: ${e2.error.message}`);\n      const n = e2.token !== this.R;\n      return this.R = e2.token, __PRIVATE_logDebug(\"FirebaseAppCheckTokenProvider\", `Received ${n ? \"new\" : \"existing\"} token.`), n ? t(e2.token) : Promise.resolve();\n    };\n    this.o = t2 => {\n      e.enqueueRetryable(() => onTokenChanged(t2));\n    };\n    const __PRIVATE_registerAppCheck = e2 => {\n      __PRIVATE_logDebug(\"FirebaseAppCheckTokenProvider\", \"AppCheck detected\"), this.appCheck = e2, this.appCheck.addTokenListener(this.o);\n    };\n    this.A.onInit(e2 => __PRIVATE_registerAppCheck(e2)), setTimeout(() => {\n      if (!this.appCheck) {\n        const e2 = this.A.getImmediate({\n          optional: true\n        });\n        e2 ? __PRIVATE_registerAppCheck(e2) : __PRIVATE_logDebug(\"FirebaseAppCheckTokenProvider\", \"AppCheck not yet detected\");\n      }\n    }, 0);\n  }\n  getToken() {\n    const e = this.forceRefresh;\n    return this.forceRefresh = false, this.appCheck ? this.appCheck.getToken(e).then(e2 => e2 ? (__PRIVATE_hardAssert(\"string\" == typeof e2.token), this.R = e2.token, new AppCheckToken(e2.token)) : null) : Promise.resolve(null);\n  }\n  invalidateToken() {\n    this.forceRefresh = true;\n  }\n  shutdown() {\n    this.appCheck && this.appCheck.removeTokenListener(this.o);\n  }\n};\nvar __PRIVATE_EmptyAppCheckTokenProvider = class {\n  getToken() {\n    return Promise.resolve(new AppCheckToken(\"\"));\n  }\n  invalidateToken() {}\n  start(e, t) {}\n  shutdown() {}\n};\nfunction __PRIVATE_randomBytes(e) {\n  const t = \"undefined\" != typeof self && (self.crypto || self.msCrypto),\n    n = new Uint8Array(e);\n  if (t && \"function\" == typeof t.getRandomValues) t.getRandomValues(n);else for (let t2 = 0; t2 < e; t2++) n[t2] = Math.floor(256 * Math.random());\n  return n;\n}\nvar __PRIVATE_AutoId = class {\n  static newId() {\n    const e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n      t = Math.floor(256 / e.length) * e.length;\n    let n = \"\";\n    for (; n.length < 20;) {\n      const r = __PRIVATE_randomBytes(40);\n      for (let i = 0; i < r.length; ++i) n.length < 20 && r[i] < t && (n += e.charAt(r[i] % e.length));\n    }\n    return n;\n  }\n};\nfunction __PRIVATE_primitiveComparator(e, t) {\n  return e < t ? -1 : e > t ? 1 : 0;\n}\nfunction __PRIVATE_arrayEquals(e, t, n) {\n  return e.length === t.length && e.every((e2, r) => n(e2, t[r]));\n}\nfunction __PRIVATE_immediateSuccessor(e) {\n  return e + \"\\0\";\n}\nvar Timestamp = class {\n  constructor(e, t) {\n    if (this.seconds = e, this.nanoseconds = t, t < 0) throw new FirestoreError(C.INVALID_ARGUMENT, \"Timestamp nanoseconds out of range: \" + t);\n    if (t >= 1e9) throw new FirestoreError(C.INVALID_ARGUMENT, \"Timestamp nanoseconds out of range: \" + t);\n    if (e < -62135596800) throw new FirestoreError(C.INVALID_ARGUMENT, \"Timestamp seconds out of range: \" + e);\n    if (e >= 253402300800) throw new FirestoreError(C.INVALID_ARGUMENT, \"Timestamp seconds out of range: \" + e);\n  }\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n  static fromDate(e) {\n    return Timestamp.fromMillis(e.getTime());\n  }\n  static fromMillis(e) {\n    const t = Math.floor(e / 1e3),\n      n = Math.floor(1e6 * (e - 1e3 * t));\n    return new Timestamp(t, n);\n  }\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  toMillis() {\n    return 1e3 * this.seconds + this.nanoseconds / 1e6;\n  }\n  _compareTo(e) {\n    return this.seconds === e.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, e.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, e.seconds);\n  }\n  isEqual(e) {\n    return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;\n  }\n  toString() {\n    return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n  }\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  valueOf() {\n    const e = this.seconds - -62135596800;\n    return String(e).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n  }\n};\nvar SnapshotVersion = class {\n  constructor(e) {\n    this.timestamp = e;\n  }\n  static fromTimestamp(e) {\n    return new SnapshotVersion(e);\n  }\n  static min() {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n  static max() {\n    return new SnapshotVersion(new Timestamp(253402300799, 999999999));\n  }\n  compareTo(e) {\n    return this.timestamp._compareTo(e.timestamp);\n  }\n  isEqual(e) {\n    return this.timestamp.isEqual(e.timestamp);\n  }\n  toMicroseconds() {\n    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n  }\n  toString() {\n    return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n  }\n  toTimestamp() {\n    return this.timestamp;\n  }\n};\nvar BasePath = class {\n  constructor(e, t, n) {\n    void 0 === t ? t = 0 : t > e.length && fail(), void 0 === n ? n = e.length - t : n > e.length - t && fail(), this.segments = e, this.offset = t, this.len = n;\n  }\n  get length() {\n    return this.len;\n  }\n  isEqual(e) {\n    return 0 === BasePath.comparator(this, e);\n  }\n  child(e) {\n    const t = this.segments.slice(this.offset, this.limit());\n    return e instanceof BasePath ? e.forEach(e2 => {\n      t.push(e2);\n    }) : t.push(e), this.construct(t);\n  }\n  limit() {\n    return this.offset + this.length;\n  }\n  popFirst(e) {\n    return e = void 0 === e ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);\n  }\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n  get(e) {\n    return this.segments[this.offset + e];\n  }\n  isEmpty() {\n    return 0 === this.length;\n  }\n  isPrefixOf(e) {\n    if (e.length < this.length) return false;\n    for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return false;\n    return true;\n  }\n  isImmediateParentOf(e) {\n    if (this.length + 1 !== e.length) return false;\n    for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return false;\n    return true;\n  }\n  forEach(e) {\n    for (let t = this.offset, n = this.limit(); t < n; t++) e(this.segments[t]);\n  }\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n  static comparator(e, t) {\n    const n = Math.min(e.length, t.length);\n    for (let r = 0; r < n; r++) {\n      const n2 = e.get(r),\n        i = t.get(r);\n      if (n2 < i) return -1;\n      if (n2 > i) return 1;\n    }\n    return e.length < t.length ? -1 : e.length > t.length ? 1 : 0;\n  }\n};\nvar ResourcePath = class extends BasePath {\n  construct(e, t, n) {\n    return new ResourcePath(e, t, n);\n  }\n  canonicalString() {\n    return this.toArray().join(\"/\");\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  static fromString(...e) {\n    const t = [];\n    for (const n of e) {\n      if (n.indexOf(\"//\") >= 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);\n      t.push(...n.split(\"/\").filter(e2 => e2.length > 0));\n    }\n    return new ResourcePath(t);\n  }\n  static emptyPath() {\n    return new ResourcePath([]);\n  }\n};\nvar v = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\nvar FieldPath$1 = class extends BasePath {\n  construct(e, t, n) {\n    return new FieldPath$1(e, t, n);\n  }\n  static isValidIdentifier(e) {\n    return v.test(e);\n  }\n  canonicalString() {\n    return this.toArray().map(e => (e = e.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), FieldPath$1.isValidIdentifier(e) || (e = \"`\" + e + \"`\"), e)).join(\".\");\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  isKeyField() {\n    return 1 === this.length && \"__name__\" === this.get(0);\n  }\n  static keyField() {\n    return new FieldPath$1([\"__name__\"]);\n  }\n  static fromServerFormat(e) {\n    const t = [];\n    let n = \"\",\n      r = 0;\n    const __PRIVATE_addCurrentSegment = () => {\n      if (0 === n.length) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n      t.push(n), n = \"\";\n    };\n    let i = false;\n    for (; r < e.length;) {\n      const t2 = e[r];\n      if (\"\\\\\" === t2) {\n        if (r + 1 === e.length) throw new FirestoreError(C.INVALID_ARGUMENT, \"Path has trailing escape character: \" + e);\n        const t3 = e[r + 1];\n        if (\"\\\\\" !== t3 && \".\" !== t3 && \"`\" !== t3) throw new FirestoreError(C.INVALID_ARGUMENT, \"Path has invalid escape sequence: \" + e);\n        n += t3, r += 2;\n      } else \"`\" === t2 ? (i = !i, r++) : \".\" !== t2 || i ? (n += t2, r++) : (__PRIVATE_addCurrentSegment(), r++);\n    }\n    if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(C.INVALID_ARGUMENT, \"Unterminated ` in path: \" + e);\n    return new FieldPath$1(t);\n  }\n  static emptyPath() {\n    return new FieldPath$1([]);\n  }\n};\nvar DocumentKey = class {\n  constructor(e) {\n    this.path = e;\n  }\n  static fromPath(e) {\n    return new DocumentKey(ResourcePath.fromString(e));\n  }\n  static fromName(e) {\n    return new DocumentKey(ResourcePath.fromString(e).popFirst(5));\n  }\n  static empty() {\n    return new DocumentKey(ResourcePath.emptyPath());\n  }\n  get collectionGroup() {\n    return this.path.popLast().lastSegment();\n  }\n  hasCollectionId(e) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;\n  }\n  getCollectionGroup() {\n    return this.path.get(this.path.length - 2);\n  }\n  getCollectionPath() {\n    return this.path.popLast();\n  }\n  isEqual(e) {\n    return null !== e && 0 === ResourcePath.comparator(this.path, e.path);\n  }\n  toString() {\n    return this.path.toString();\n  }\n  static comparator(e, t) {\n    return ResourcePath.comparator(e.path, t.path);\n  }\n  static isDocumentKey(e) {\n    return e.length % 2 == 0;\n  }\n  static fromSegments(e) {\n    return new DocumentKey(new ResourcePath(e.slice()));\n  }\n};\nvar FieldIndex = class {\n  constructor(e, t, n, r) {\n    this.indexId = e, this.collectionGroup = t, this.fields = n, this.indexState = r;\n  }\n};\nfunction __PRIVATE_fieldIndexGetArraySegment(e) {\n  return e.fields.find(e2 => 2 === e2.kind);\n}\nfunction __PRIVATE_fieldIndexGetDirectionalSegments(e) {\n  return e.fields.filter(e2 => 2 !== e2.kind);\n}\nfunction __PRIVATE_fieldIndexSemanticComparator(e, t) {\n  let n = __PRIVATE_primitiveComparator(e.collectionGroup, t.collectionGroup);\n  if (0 !== n) return n;\n  for (let r = 0; r < Math.min(e.fields.length, t.fields.length); ++r) if (n = __PRIVATE_indexSegmentComparator(e.fields[r], t.fields[r]), 0 !== n) return n;\n  return __PRIVATE_primitiveComparator(e.fields.length, t.fields.length);\n}\nFieldIndex.UNKNOWN_ID = -1;\nvar IndexSegment = class {\n  constructor(e, t) {\n    this.fieldPath = e, this.kind = t;\n  }\n};\nfunction __PRIVATE_indexSegmentComparator(e, t) {\n  const n = FieldPath$1.comparator(e.fieldPath, t.fieldPath);\n  return 0 !== n ? n : __PRIVATE_primitiveComparator(e.kind, t.kind);\n}\nvar IndexState = class {\n  constructor(e, t) {\n    this.sequenceNumber = e, this.offset = t;\n  }\n  static empty() {\n    return new IndexState(0, IndexOffset.min());\n  }\n};\nfunction __PRIVATE_newIndexOffsetSuccessorFromReadTime(e, t) {\n  const n = e.toTimestamp().seconds,\n    r = e.toTimestamp().nanoseconds + 1,\n    i = SnapshotVersion.fromTimestamp(1e9 === r ? new Timestamp(n + 1, 0) : new Timestamp(n, r));\n  return new IndexOffset(i, DocumentKey.empty(), t);\n}\nfunction __PRIVATE_newIndexOffsetFromDocument(e) {\n  return new IndexOffset(e.readTime, e.key, -1);\n}\nvar IndexOffset = class {\n  constructor(e, t, n) {\n    this.readTime = e, this.documentKey = t, this.largestBatchId = n;\n  }\n  static min() {\n    return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), -1);\n  }\n  static max() {\n    return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), -1);\n  }\n};\nfunction __PRIVATE_indexOffsetComparator(e, t) {\n  let n = e.readTime.compareTo(t.readTime);\n  return 0 !== n ? n : (n = DocumentKey.comparator(e.documentKey, t.documentKey), 0 !== n ? n : __PRIVATE_primitiveComparator(e.largestBatchId, t.largestBatchId));\n}\nvar F = \"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.\";\nvar PersistenceTransaction = class {\n  constructor() {\n    this.onCommittedListeners = [];\n  }\n  addOnCommittedListener(e) {\n    this.onCommittedListeners.push(e);\n  }\n  raiseOnCommittedEvent() {\n    this.onCommittedListeners.forEach(e => e());\n  }\n};\nasync function __PRIVATE_ignoreIfPrimaryLeaseLoss(e) {\n  if (e.code !== C.FAILED_PRECONDITION || e.message !== F) throw e;\n  __PRIVATE_logDebug(\"LocalStore\", \"Unexpectedly lost primary lease\");\n}\nvar PersistencePromise = class {\n  constructor(e) {\n    this.nextCallback = null, this.catchCallback = null, this.result = void 0, this.error = void 0, this.isDone = false, this.callbackAttached = false, e(e2 => {\n      this.isDone = true, this.result = e2, this.nextCallback && this.nextCallback(e2);\n    }, e2 => {\n      this.isDone = true, this.error = e2, this.catchCallback && this.catchCallback(e2);\n    });\n  }\n  catch(e) {\n    return this.next(void 0, e);\n  }\n  next(e, t) {\n    return this.callbackAttached && fail(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(t, this.error) : this.wrapSuccess(e, this.result) : new PersistencePromise((n, r) => {\n      this.nextCallback = t2 => {\n        this.wrapSuccess(e, t2).next(n, r);\n      }, this.catchCallback = e2 => {\n        this.wrapFailure(t, e2).next(n, r);\n      };\n    });\n  }\n  toPromise() {\n    return new Promise((e, t) => {\n      this.next(e, t);\n    });\n  }\n  wrapUserFunction(e) {\n    try {\n      const t = e();\n      return t instanceof PersistencePromise ? t : PersistencePromise.resolve(t);\n    } catch (e2) {\n      return PersistencePromise.reject(e2);\n    }\n  }\n  wrapSuccess(e, t) {\n    return e ? this.wrapUserFunction(() => e(t)) : PersistencePromise.resolve(t);\n  }\n  wrapFailure(e, t) {\n    return e ? this.wrapUserFunction(() => e(t)) : PersistencePromise.reject(t);\n  }\n  static resolve(e) {\n    return new PersistencePromise((t, n) => {\n      t(e);\n    });\n  }\n  static reject(e) {\n    return new PersistencePromise((t, n) => {\n      n(e);\n    });\n  }\n  static waitFor(e) {\n    return new PersistencePromise((t, n) => {\n      let r = 0,\n        i = 0,\n        s = false;\n      e.forEach(e2 => {\n        ++r, e2.next(() => {\n          ++i, s && i === r && t();\n        }, e3 => n(e3));\n      }), s = true, i === r && t();\n    });\n  }\n  static or(e) {\n    let t = PersistencePromise.resolve(false);\n    for (const n of e) t = t.next(e2 => e2 ? PersistencePromise.resolve(e2) : n());\n    return t;\n  }\n  static forEach(e, t) {\n    const n = [];\n    return e.forEach((e2, r) => {\n      n.push(t.call(this, e2, r));\n    }), this.waitFor(n);\n  }\n  static mapArray(e, t) {\n    return new PersistencePromise((n, r) => {\n      const i = e.length,\n        s = new Array(i);\n      let o = 0;\n      for (let _ = 0; _ < i; _++) {\n        const a = _;\n        t(e[a]).next(e2 => {\n          s[a] = e2, ++o, o === i && n(s);\n        }, e2 => r(e2));\n      }\n    });\n  }\n  static doWhile(e, t) {\n    return new PersistencePromise((n, r) => {\n      const process2 = () => {\n        true === e() ? t().next(() => {\n          process2();\n        }, r) : n();\n      };\n      process2();\n    });\n  }\n};\nvar __PRIVATE_SimpleDbTransaction = class {\n  constructor(e, t) {\n    this.action = e, this.transaction = t, this.aborted = false, this.V = new __PRIVATE_Deferred(), this.transaction.oncomplete = () => {\n      this.V.resolve();\n    }, this.transaction.onabort = () => {\n      t.error ? this.V.reject(new __PRIVATE_IndexedDbTransactionError(e, t.error)) : this.V.resolve();\n    }, this.transaction.onerror = t2 => {\n      const n = __PRIVATE_checkForAndReportiOSError(t2.target.error);\n      this.V.reject(new __PRIVATE_IndexedDbTransactionError(e, n));\n    };\n  }\n  static open(e, t, n, r) {\n    try {\n      return new __PRIVATE_SimpleDbTransaction(t, e.transaction(r, n));\n    } catch (e2) {\n      throw new __PRIVATE_IndexedDbTransactionError(t, e2);\n    }\n  }\n  get m() {\n    return this.V.promise;\n  }\n  abort(e) {\n    e && this.V.reject(e), this.aborted || (__PRIVATE_logDebug(\"SimpleDb\", \"Aborting transaction:\", e ? e.message : \"Client-initiated abort\"), this.aborted = true, this.transaction.abort());\n  }\n  g() {\n    const e = this.transaction;\n    this.aborted || \"function\" != typeof e.commit || e.commit();\n  }\n  store(e) {\n    const t = this.transaction.objectStore(e);\n    return new __PRIVATE_SimpleDbStore(t);\n  }\n};\nvar __PRIVATE_SimpleDb = class {\n  constructor(e, t, n) {\n    this.name = e, this.version = t, this.p = n;\n    12.2 === __PRIVATE_SimpleDb.S((0, import_util.getUA)()) && __PRIVATE_logError(\"Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.\");\n  }\n  static delete(e) {\n    return __PRIVATE_logDebug(\"SimpleDb\", \"Removing database:\", e), __PRIVATE_wrapRequest(window.indexedDB.deleteDatabase(e)).toPromise();\n  }\n  static D() {\n    if (!(0, import_util.isIndexedDBAvailable)()) return false;\n    if (__PRIVATE_SimpleDb.C()) return true;\n    const e = (0, import_util.getUA)(),\n      t = __PRIVATE_SimpleDb.S(e),\n      n = 0 < t && t < 10,\n      r = __PRIVATE_SimpleDb.v(e),\n      i = 0 < r && r < 4.5;\n    return !(e.indexOf(\"MSIE \") > 0 || e.indexOf(\"Trident/\") > 0 || e.indexOf(\"Edge/\") > 0 || n || i);\n  }\n  static C() {\n    var e;\n    return \"undefined\" != typeof process && \"YES\" === (null === (e = process.env) || void 0 === e ? void 0 : e.F);\n  }\n  static M(e, t) {\n    return e.store(t);\n  }\n  static S(e) {\n    const t = e.match(/i(?:phone|pad|pod) os ([\\d_]+)/i),\n      n = t ? t[1].split(\"_\").slice(0, 2).join(\".\") : \"-1\";\n    return Number(n);\n  }\n  static v(e) {\n    const t = e.match(/Android ([\\d.]+)/i),\n      n = t ? t[1].split(\".\").slice(0, 2).join(\".\") : \"-1\";\n    return Number(n);\n  }\n  async O(e) {\n    return this.db || (__PRIVATE_logDebug(\"SimpleDb\", \"Opening database:\", this.name), this.db = await new Promise((t, n) => {\n      const r = indexedDB.open(this.name, this.version);\n      r.onsuccess = e2 => {\n        const n2 = e2.target.result;\n        t(n2);\n      }, r.onblocked = () => {\n        n(new __PRIVATE_IndexedDbTransactionError(e, \"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed.\"));\n      }, r.onerror = t2 => {\n        const r2 = t2.target.error;\n        \"VersionError\" === r2.name ? n(new FirestoreError(C.FAILED_PRECONDITION, \"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.\")) : \"InvalidStateError\" === r2.name ? n(new FirestoreError(C.FAILED_PRECONDITION, \"Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: \" + r2)) : n(new __PRIVATE_IndexedDbTransactionError(e, r2));\n      }, r.onupgradeneeded = e2 => {\n        __PRIVATE_logDebug(\"SimpleDb\", 'Database \"' + this.name + '\" requires upgrade from version:', e2.oldVersion);\n        const t2 = e2.target.result;\n        this.p.N(t2, r.transaction, e2.oldVersion, this.version).next(() => {\n          __PRIVATE_logDebug(\"SimpleDb\", \"Database upgrade to version \" + this.version + \" complete\");\n        });\n      };\n    })), this.B && (this.db.onversionchange = e2 => this.B(e2)), this.db;\n  }\n  L(e) {\n    this.B = e, this.db && (this.db.onversionchange = t => e(t));\n  }\n  async runTransaction(e, t, n, r) {\n    const i = \"readonly\" === t;\n    let s = 0;\n    for (;;) {\n      ++s;\n      try {\n        this.db = await this.O(e);\n        const t2 = __PRIVATE_SimpleDbTransaction.open(this.db, e, i ? \"readonly\" : \"readwrite\", n),\n          s2 = r(t2).next(e2 => (t2.g(), e2)).catch(e2 => (t2.abort(e2), PersistencePromise.reject(e2))).toPromise();\n        return s2.catch(() => {}), await t2.m, s2;\n      } catch (e2) {\n        const t2 = e2,\n          n2 = \"FirebaseError\" !== t2.name && s < 3;\n        if (__PRIVATE_logDebug(\"SimpleDb\", \"Transaction failed with error:\", t2.message, \"Retrying:\", n2), this.close(), !n2) return Promise.reject(t2);\n      }\n    }\n  }\n  close() {\n    this.db && this.db.close(), this.db = void 0;\n  }\n};\nvar __PRIVATE_IterationController = class {\n  constructor(e) {\n    this.k = e, this.q = false, this.K = null;\n  }\n  get isDone() {\n    return this.q;\n  }\n  get $() {\n    return this.K;\n  }\n  set cursor(e) {\n    this.k = e;\n  }\n  done() {\n    this.q = true;\n  }\n  U(e) {\n    this.K = e;\n  }\n  delete() {\n    return __PRIVATE_wrapRequest(this.k.delete());\n  }\n};\nvar __PRIVATE_IndexedDbTransactionError = class extends FirestoreError {\n  constructor(e, t) {\n    super(C.UNAVAILABLE, `IndexedDB transaction '${e}' failed: ${t}`), this.name = \"IndexedDbTransactionError\";\n  }\n};\nfunction __PRIVATE_isIndexedDbTransactionError(e) {\n  return \"IndexedDbTransactionError\" === e.name;\n}\nvar __PRIVATE_SimpleDbStore = class {\n  constructor(e) {\n    this.store = e;\n  }\n  put(e, t) {\n    let n;\n    return void 0 !== t ? (__PRIVATE_logDebug(\"SimpleDb\", \"PUT\", this.store.name, e, t), n = this.store.put(t, e)) : (__PRIVATE_logDebug(\"SimpleDb\", \"PUT\", this.store.name, \"<auto-key>\", e), n = this.store.put(e)), __PRIVATE_wrapRequest(n);\n  }\n  add(e) {\n    __PRIVATE_logDebug(\"SimpleDb\", \"ADD\", this.store.name, e, e);\n    return __PRIVATE_wrapRequest(this.store.add(e));\n  }\n  get(e) {\n    return __PRIVATE_wrapRequest(this.store.get(e)).next(t => (void 0 === t && (t = null), __PRIVATE_logDebug(\"SimpleDb\", \"GET\", this.store.name, e, t), t));\n  }\n  delete(e) {\n    __PRIVATE_logDebug(\"SimpleDb\", \"DELETE\", this.store.name, e);\n    return __PRIVATE_wrapRequest(this.store.delete(e));\n  }\n  count() {\n    __PRIVATE_logDebug(\"SimpleDb\", \"COUNT\", this.store.name);\n    return __PRIVATE_wrapRequest(this.store.count());\n  }\n  W(e, t) {\n    const n = this.options(e, t);\n    if (n.index || \"function\" != typeof this.store.getAll) {\n      const e2 = this.cursor(n),\n        t2 = [];\n      return this.G(e2, (e3, n2) => {\n        t2.push(n2);\n      }).next(() => t2);\n    }\n    {\n      const e2 = this.store.getAll(n.range);\n      return new PersistencePromise((t2, n2) => {\n        e2.onerror = e3 => {\n          n2(e3.target.error);\n        }, e2.onsuccess = e3 => {\n          t2(e3.target.result);\n        };\n      });\n    }\n  }\n  j(e, t) {\n    const n = this.store.getAll(e, null === t ? void 0 : t);\n    return new PersistencePromise((e2, t2) => {\n      n.onerror = e3 => {\n        t2(e3.target.error);\n      }, n.onsuccess = t3 => {\n        e2(t3.target.result);\n      };\n    });\n  }\n  H(e, t) {\n    __PRIVATE_logDebug(\"SimpleDb\", \"DELETE ALL\", this.store.name);\n    const n = this.options(e, t);\n    n.J = false;\n    const r = this.cursor(n);\n    return this.G(r, (e2, t2, n2) => n2.delete());\n  }\n  Y(e, t) {\n    let n;\n    t ? n = e : (n = {}, t = e);\n    const r = this.cursor(n);\n    return this.G(r, t);\n  }\n  Z(e) {\n    const t = this.cursor({});\n    return new PersistencePromise((n, r) => {\n      t.onerror = e2 => {\n        const t2 = __PRIVATE_checkForAndReportiOSError(e2.target.error);\n        r(t2);\n      }, t.onsuccess = t2 => {\n        const r2 = t2.target.result;\n        r2 ? e(r2.primaryKey, r2.value).next(e2 => {\n          e2 ? r2.continue() : n();\n        }) : n();\n      };\n    });\n  }\n  G(e, t) {\n    const n = [];\n    return new PersistencePromise((r, i) => {\n      e.onerror = e2 => {\n        i(e2.target.error);\n      }, e.onsuccess = e2 => {\n        const i2 = e2.target.result;\n        if (!i2) return void r();\n        const s = new __PRIVATE_IterationController(i2),\n          o = t(i2.primaryKey, i2.value, s);\n        if (o instanceof PersistencePromise) {\n          const e3 = o.catch(e4 => (s.done(), PersistencePromise.reject(e4)));\n          n.push(e3);\n        }\n        s.isDone ? r() : null === s.$ ? i2.continue() : i2.continue(s.$);\n      };\n    }).next(() => PersistencePromise.waitFor(n));\n  }\n  options(e, t) {\n    let n;\n    return void 0 !== e && (\"string\" == typeof e ? n = e : t = e), {\n      index: n,\n      range: t\n    };\n  }\n  cursor(e) {\n    let t = \"next\";\n    if (e.reverse && (t = \"prev\"), e.index) {\n      const n = this.store.index(e.index);\n      return e.J ? n.openKeyCursor(e.range, t) : n.openCursor(e.range, t);\n    }\n    return this.store.openCursor(e.range, t);\n  }\n};\nfunction __PRIVATE_wrapRequest(e) {\n  return new PersistencePromise((t, n) => {\n    e.onsuccess = e2 => {\n      const n2 = e2.target.result;\n      t(n2);\n    }, e.onerror = e2 => {\n      const t2 = __PRIVATE_checkForAndReportiOSError(e2.target.error);\n      n(t2);\n    };\n  });\n}\nvar M = false;\nfunction __PRIVATE_checkForAndReportiOSError(e) {\n  const t = __PRIVATE_SimpleDb.S((0, import_util.getUA)());\n  if (t >= 12.2 && t < 13) {\n    const t2 = \"An internal error was encountered in the Indexed Database server\";\n    if (e.message.indexOf(t2) >= 0) {\n      const e2 = new FirestoreError(\"internal\", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${t2}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);\n      return M || (M = true, setTimeout(() => {\n        throw e2;\n      }, 0)), e2;\n    }\n  }\n  return e;\n}\nvar __PRIVATE_IndexBackfillerScheduler = class {\n  constructor(e, t) {\n    this.asyncQueue = e, this.X = t, this.task = null;\n  }\n  start() {\n    this.ee(15e3);\n  }\n  stop() {\n    this.task && (this.task.cancel(), this.task = null);\n  }\n  get started() {\n    return null !== this.task;\n  }\n  ee(e) {\n    __PRIVATE_logDebug(\"IndexBackiller\", `Scheduled in ${e}ms`), this.task = this.asyncQueue.enqueueAfterDelay(\"index_backfill\", e, async () => {\n      this.task = null;\n      try {\n        __PRIVATE_logDebug(\"IndexBackiller\", `Documents written: ${await this.X.te()}`);\n      } catch (e2) {\n        __PRIVATE_isIndexedDbTransactionError(e2) ? __PRIVATE_logDebug(\"IndexBackiller\", \"Ignoring IndexedDB error during index backfill: \", e2) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);\n      }\n      await this.ee(6e4);\n    });\n  }\n};\nvar __PRIVATE_IndexBackfiller = class {\n  constructor(e, t) {\n    this.localStore = e, this.persistence = t;\n  }\n  async te(e = 50) {\n    return this.persistence.runTransaction(\"Backfill Indexes\", \"readwrite-primary\", t => this.ne(t, e));\n  }\n  ne(e, t) {\n    const n = /* @__PURE__ */new Set();\n    let r = t,\n      i = true;\n    return PersistencePromise.doWhile(() => true === i && r > 0, () => this.localStore.indexManager.getNextCollectionGroupToUpdate(e).next(t2 => {\n      if (null !== t2 && !n.has(t2)) return __PRIVATE_logDebug(\"IndexBackiller\", `Processing collection: ${t2}`), this.re(e, t2, r).next(e2 => {\n        r -= e2, n.add(t2);\n      });\n      i = false;\n    })).next(() => t - r);\n  }\n  re(e, t, n) {\n    return this.localStore.indexManager.getMinOffsetFromCollectionGroup(e, t).next(r => this.localStore.localDocuments.getNextDocuments(e, t, r, n).next(n2 => {\n      const i = n2.changes;\n      return this.localStore.indexManager.updateIndexEntries(e, i).next(() => this.ie(r, n2)).next(n3 => (__PRIVATE_logDebug(\"IndexBackiller\", `Updating offset: ${n3}`), this.localStore.indexManager.updateCollectionGroup(e, t, n3))).next(() => i.size);\n    }));\n  }\n  ie(e, t) {\n    let n = e;\n    return t.changes.forEach((e2, t2) => {\n      const r = __PRIVATE_newIndexOffsetFromDocument(t2);\n      __PRIVATE_indexOffsetComparator(r, n) > 0 && (n = r);\n    }), new IndexOffset(n.readTime, n.documentKey, Math.max(t.batchId, e.largestBatchId));\n  }\n};\nvar __PRIVATE_ListenSequence = class {\n  constructor(e, t) {\n    this.previousValue = e, t && (t.sequenceNumberHandler = e2 => this.se(e2), this.oe = e2 => t.writeSequenceNumber(e2));\n  }\n  se(e) {\n    return this.previousValue = Math.max(e, this.previousValue), this.previousValue;\n  }\n  next() {\n    const e = ++this.previousValue;\n    return this.oe && this.oe(e), e;\n  }\n};\n__PRIVATE_ListenSequence._e = -1;\nfunction __PRIVATE_isNullOrUndefined(e) {\n  return null == e;\n}\nfunction __PRIVATE_isNegativeZero(e) {\n  return 0 === e && 1 / e == -1 / 0;\n}\nfunction isSafeInteger(e) {\n  return \"number\" == typeof e && Number.isInteger(e) && !__PRIVATE_isNegativeZero(e) && e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;\n}\nfunction __PRIVATE_encodeResourcePath(e) {\n  let t = \"\";\n  for (let n = 0; n < e.length; n++) t.length > 0 && (t = __PRIVATE_encodeSeparator(t)), t = __PRIVATE_encodeSegment(e.get(n), t);\n  return __PRIVATE_encodeSeparator(t);\n}\nfunction __PRIVATE_encodeSegment(e, t) {\n  let n = t;\n  const r = e.length;\n  for (let t2 = 0; t2 < r; t2++) {\n    const r2 = e.charAt(t2);\n    switch (r2) {\n      case \"\\0\":\n        n += \"\u0001\u0010\";\n        break;\n      case \"\u0001\":\n        n += \"\u0001\u0011\";\n        break;\n      default:\n        n += r2;\n    }\n  }\n  return n;\n}\nfunction __PRIVATE_encodeSeparator(e) {\n  return e + \"\u0001\u0001\";\n}\nfunction __PRIVATE_decodeResourcePath(e) {\n  const t = e.length;\n  if (__PRIVATE_hardAssert(t >= 2), 2 === t) return __PRIVATE_hardAssert(\"\u0001\" === e.charAt(0) && \"\u0001\" === e.charAt(1)), ResourcePath.emptyPath();\n  const __PRIVATE_lastReasonableEscapeIndex = t - 2,\n    n = [];\n  let r = \"\";\n  for (let i = 0; i < t;) {\n    const t2 = e.indexOf(\"\u0001\", i);\n    (t2 < 0 || t2 > __PRIVATE_lastReasonableEscapeIndex) && fail();\n    switch (e.charAt(t2 + 1)) {\n      case \"\u0001\":\n        const s = e.substring(i, t2);\n        let o;\n        0 === r.length ? o = s : (r += s, o = r, r = \"\"), n.push(o);\n        break;\n      case \"\u0010\":\n        r += e.substring(i, t2), r += \"\\0\";\n        break;\n      case \"\u0011\":\n        r += e.substring(i, t2 + 1);\n        break;\n      default:\n        fail();\n    }\n    i = t2 + 2;\n  }\n  return new ResourcePath(n);\n}\nvar x = [\"userId\", \"batchId\"];\nfunction __PRIVATE_newDbDocumentMutationPrefixForPath(e, t) {\n  return [e, __PRIVATE_encodeResourcePath(t)];\n}\nfunction __PRIVATE_newDbDocumentMutationKey(e, t, n) {\n  return [e, __PRIVATE_encodeResourcePath(t), n];\n}\nvar O = {},\n  N = [\"prefixPath\", \"collectionGroup\", \"readTime\", \"documentId\"],\n  B = [\"prefixPath\", \"collectionGroup\", \"documentId\"],\n  L = [\"collectionGroup\", \"readTime\", \"prefixPath\", \"documentId\"],\n  k = [\"canonicalId\", \"targetId\"],\n  q = [\"targetId\", \"path\"],\n  Q = [\"path\", \"targetId\"],\n  K = [\"collectionId\", \"parent\"],\n  $ = [\"indexId\", \"uid\"],\n  U = [\"uid\", \"sequenceNumber\"],\n  W = [\"indexId\", \"uid\", \"arrayValue\", \"directionalValue\", \"orderedDocumentKey\", \"documentKey\"],\n  G = [\"indexId\", \"uid\", \"orderedDocumentKey\"],\n  z = [\"userId\", \"collectionPath\", \"documentId\"],\n  j = [\"userId\", \"collectionPath\", \"largestBatchId\"],\n  H = [\"userId\", \"collectionGroup\", \"largestBatchId\"],\n  J = [...[...[...[...[\"mutationQueues\", \"mutations\", \"documentMutations\", \"remoteDocuments\", \"targets\", \"owner\", \"targetGlobal\", \"targetDocuments\"], \"clientMetadata\"], \"remoteDocumentGlobal\"], \"collectionParents\"], \"bundles\", \"namedQueries\"],\n  Y = [...J, \"documentOverlays\"],\n  Z = [\"mutationQueues\", \"mutations\", \"documentMutations\", \"remoteDocumentsV14\", \"targets\", \"owner\", \"targetGlobal\", \"targetDocuments\", \"clientMetadata\", \"remoteDocumentGlobal\", \"collectionParents\", \"bundles\", \"namedQueries\", \"documentOverlays\"],\n  X = Z,\n  ee = [...X, \"indexConfiguration\", \"indexState\", \"indexEntries\"];\nvar __PRIVATE_IndexedDbTransaction = class extends PersistenceTransaction {\n  constructor(e, t) {\n    super(), this.ae = e, this.currentSequenceNumber = t;\n  }\n};\nfunction __PRIVATE_getStore(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  return __PRIVATE_SimpleDb.M(n.ae, t);\n}\nfunction __PRIVATE_objectSize(e) {\n  let t = 0;\n  for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t++;\n  return t;\n}\nfunction forEach(e, t) {\n  for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t(n, e[n]);\n}\nfunction isEmpty(e) {\n  for (const t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return false;\n  return true;\n}\nvar SortedMap = class {\n  constructor(e, t) {\n    this.comparator = e, this.root = t || LLRBNode.EMPTY;\n  }\n  insert(e, t) {\n    return new SortedMap(this.comparator, this.root.insert(e, t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  remove(e) {\n    return new SortedMap(this.comparator, this.root.remove(e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  get(e) {\n    let t = this.root;\n    for (; !t.isEmpty();) {\n      const n = this.comparator(e, t.key);\n      if (0 === n) return t.value;\n      n < 0 ? t = t.left : n > 0 && (t = t.right);\n    }\n    return null;\n  }\n  indexOf(e) {\n    let t = 0,\n      n = this.root;\n    for (; !n.isEmpty();) {\n      const r = this.comparator(e, n.key);\n      if (0 === r) return t + n.left.size;\n      r < 0 ? n = n.left : (t += n.left.size + 1, n = n.right);\n    }\n    return -1;\n  }\n  isEmpty() {\n    return this.root.isEmpty();\n  }\n  get size() {\n    return this.root.size;\n  }\n  minKey() {\n    return this.root.minKey();\n  }\n  maxKey() {\n    return this.root.maxKey();\n  }\n  inorderTraversal(e) {\n    return this.root.inorderTraversal(e);\n  }\n  forEach(e) {\n    this.inorderTraversal((t, n) => (e(t, n), false));\n  }\n  toString() {\n    const e = [];\n    return this.inorderTraversal((t, n) => (e.push(`${t}:${n}`), false)), `{${e.join(\", \")}}`;\n  }\n  reverseTraversal(e) {\n    return this.root.reverseTraversal(e);\n  }\n  getIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, false);\n  }\n  getIteratorFrom(e) {\n    return new SortedMapIterator(this.root, e, this.comparator, false);\n  }\n  getReverseIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, true);\n  }\n  getReverseIteratorFrom(e) {\n    return new SortedMapIterator(this.root, e, this.comparator, true);\n  }\n};\nvar SortedMapIterator = class {\n  constructor(e, t, n, r) {\n    this.isReverse = r, this.nodeStack = [];\n    let i = 1;\n    for (; !e.isEmpty();) if (i = t ? n(e.key, t) : 1, t && r && (i *= -1), i < 0) e = this.isReverse ? e.left : e.right;else {\n      if (0 === i) {\n        this.nodeStack.push(e);\n        break;\n      }\n      this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;\n    }\n  }\n  getNext() {\n    let e = this.nodeStack.pop();\n    const t = {\n      key: e.key,\n      value: e.value\n    };\n    if (this.isReverse) for (e = e.left; !e.isEmpty();) this.nodeStack.push(e), e = e.right;else for (e = e.right; !e.isEmpty();) this.nodeStack.push(e), e = e.left;\n    return t;\n  }\n  hasNext() {\n    return this.nodeStack.length > 0;\n  }\n  peek() {\n    if (0 === this.nodeStack.length) return null;\n    const e = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: e.key,\n      value: e.value\n    };\n  }\n};\nvar LLRBNode = class {\n  constructor(e, t, n, r, i) {\n    this.key = e, this.value = t, this.color = null != n ? n : LLRBNode.RED, this.left = null != r ? r : LLRBNode.EMPTY, this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;\n  }\n  copy(e, t, n, r, i) {\n    return new LLRBNode(null != e ? e : this.key, null != t ? t : this.value, null != n ? n : this.color, null != r ? r : this.left, null != i ? i : this.right);\n  }\n  isEmpty() {\n    return false;\n  }\n  inorderTraversal(e) {\n    return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);\n  }\n  reverseTraversal(e) {\n    return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);\n  }\n  min() {\n    return this.left.isEmpty() ? this : this.left.min();\n  }\n  minKey() {\n    return this.min().key;\n  }\n  maxKey() {\n    return this.right.isEmpty() ? this.key : this.right.maxKey();\n  }\n  insert(e, t, n) {\n    let r = this;\n    const i = n(e, r.key);\n    return r = i < 0 ? r.copy(null, null, null, r.left.insert(e, t, n), null) : 0 === i ? r.copy(null, t, null, null, null) : r.copy(null, null, null, null, r.right.insert(e, t, n)), r.fixUp();\n  }\n  removeMin() {\n    if (this.left.isEmpty()) return LLRBNode.EMPTY;\n    let e = this;\n    return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), e.fixUp();\n  }\n  remove(e, t) {\n    let n,\n      r = this;\n    if (t(e, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), r = r.copy(null, null, null, r.left.remove(e, t), null);else {\n      if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), 0 === t(e, r.key)) {\n        if (r.right.isEmpty()) return LLRBNode.EMPTY;\n        n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n      }\n      r = r.copy(null, null, null, null, r.right.remove(e, t));\n    }\n    return r.fixUp();\n  }\n  isRed() {\n    return this.color;\n  }\n  fixUp() {\n    let e = this;\n    return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;\n  }\n  moveRedLeft() {\n    let e = this.colorFlip();\n    return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), e = e.rotateLeft(), e = e.colorFlip()), e;\n  }\n  moveRedRight() {\n    let e = this.colorFlip();\n    return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;\n  }\n  rotateLeft() {\n    const e = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, e, null);\n  }\n  rotateRight() {\n    const e = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, e);\n  }\n  colorFlip() {\n    const e = this.left.copy(null, null, !this.left.color, null, null),\n      t = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, e, t);\n  }\n  checkMaxDepth() {\n    const e = this.check();\n    return Math.pow(2, e) <= this.size + 1;\n  }\n  check() {\n    if (this.isRed() && this.left.isRed()) throw fail();\n    if (this.right.isRed()) throw fail();\n    const e = this.left.check();\n    if (e !== this.right.check()) throw fail();\n    return e + (this.isRed() ? 0 : 1);\n  }\n};\nLLRBNode.EMPTY = null, LLRBNode.RED = true, LLRBNode.BLACK = false;\nLLRBNode.EMPTY = new class LLRBEmptyNode {\n  constructor() {\n    this.size = 0;\n  }\n  get key() {\n    throw fail();\n  }\n  get value() {\n    throw fail();\n  }\n  get color() {\n    throw fail();\n  }\n  get left() {\n    throw fail();\n  }\n  get right() {\n    throw fail();\n  }\n  copy(e, t, n, r, i) {\n    return this;\n  }\n  insert(e, t, n) {\n    return new LLRBNode(e, t);\n  }\n  remove(e, t) {\n    return this;\n  }\n  isEmpty() {\n    return true;\n  }\n  inorderTraversal(e) {\n    return false;\n  }\n  reverseTraversal(e) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  isRed() {\n    return false;\n  }\n  checkMaxDepth() {\n    return true;\n  }\n  check() {\n    return 0;\n  }\n}();\nvar SortedSet = class {\n  constructor(e) {\n    this.comparator = e, this.data = new SortedMap(this.comparator);\n  }\n  has(e) {\n    return null !== this.data.get(e);\n  }\n  first() {\n    return this.data.minKey();\n  }\n  last() {\n    return this.data.maxKey();\n  }\n  get size() {\n    return this.data.size;\n  }\n  indexOf(e) {\n    return this.data.indexOf(e);\n  }\n  forEach(e) {\n    this.data.inorderTraversal((t, n) => (e(t), false));\n  }\n  forEachInRange(e, t) {\n    const n = this.data.getIteratorFrom(e[0]);\n    for (; n.hasNext();) {\n      const r = n.getNext();\n      if (this.comparator(r.key, e[1]) >= 0) return;\n      t(r.key);\n    }\n  }\n  forEachWhile(e, t) {\n    let n;\n    for (n = void 0 !== t ? this.data.getIteratorFrom(t) : this.data.getIterator(); n.hasNext();) {\n      if (!e(n.getNext().key)) return;\n    }\n  }\n  firstAfterOrEqual(e) {\n    const t = this.data.getIteratorFrom(e);\n    return t.hasNext() ? t.getNext().key : null;\n  }\n  getIterator() {\n    return new SortedSetIterator(this.data.getIterator());\n  }\n  getIteratorFrom(e) {\n    return new SortedSetIterator(this.data.getIteratorFrom(e));\n  }\n  add(e) {\n    return this.copy(this.data.remove(e).insert(e, true));\n  }\n  delete(e) {\n    return this.has(e) ? this.copy(this.data.remove(e)) : this;\n  }\n  isEmpty() {\n    return this.data.isEmpty();\n  }\n  unionWith(e) {\n    let t = this;\n    return t.size < e.size && (t = e, e = this), e.forEach(e2 => {\n      t = t.add(e2);\n    }), t;\n  }\n  isEqual(e) {\n    if (!(e instanceof SortedSet)) return false;\n    if (this.size !== e.size) return false;\n    const t = this.data.getIterator(),\n      n = e.data.getIterator();\n    for (; t.hasNext();) {\n      const e2 = t.getNext().key,\n        r = n.getNext().key;\n      if (0 !== this.comparator(e2, r)) return false;\n    }\n    return true;\n  }\n  toArray() {\n    const e = [];\n    return this.forEach(t => {\n      e.push(t);\n    }), e;\n  }\n  toString() {\n    const e = [];\n    return this.forEach(t => e.push(t)), \"SortedSet(\" + e.toString() + \")\";\n  }\n  copy(e) {\n    const t = new SortedSet(this.comparator);\n    return t.data = e, t;\n  }\n};\nvar SortedSetIterator = class {\n  constructor(e) {\n    this.iter = e;\n  }\n  getNext() {\n    return this.iter.getNext().key;\n  }\n  hasNext() {\n    return this.iter.hasNext();\n  }\n};\nfunction __PRIVATE_advanceIterator(e) {\n  return e.hasNext() ? e.getNext() : void 0;\n}\nvar FieldMask = class {\n  constructor(e) {\n    this.fields = e, e.sort(FieldPath$1.comparator);\n  }\n  static empty() {\n    return new FieldMask([]);\n  }\n  unionWith(e) {\n    let t = new SortedSet(FieldPath$1.comparator);\n    for (const e2 of this.fields) t = t.add(e2);\n    for (const n of e) t = t.add(n);\n    return new FieldMask(t.toArray());\n  }\n  covers(e) {\n    for (const t of this.fields) if (t.isPrefixOf(e)) return true;\n    return false;\n  }\n  isEqual(e) {\n    return __PRIVATE_arrayEquals(this.fields, e.fields, (e2, t) => e2.isEqual(t));\n  }\n};\nvar __PRIVATE_Base64DecodeError = class extends Error {\n  constructor() {\n    super(...arguments), this.name = \"Base64DecodeError\";\n  }\n};\nfunction __PRIVATE_isBase64Available() {\n  return \"undefined\" != typeof atob;\n}\nvar ByteString = class {\n  constructor(e) {\n    this.binaryString = e;\n  }\n  static fromBase64String(e) {\n    const t = function __PRIVATE_decodeBase64(e2) {\n      try {\n        return atob(e2);\n      } catch (e3) {\n        throw \"undefined\" != typeof DOMException && e3 instanceof DOMException ? new __PRIVATE_Base64DecodeError(\"Invalid base64 string: \" + e3) : e3;\n      }\n    }(e);\n    return new ByteString(t);\n  }\n  static fromUint8Array(e) {\n    const t = function __PRIVATE_binaryStringFromUint8Array(e2) {\n      let t2 = \"\";\n      for (let n = 0; n < e2.length; ++n) t2 += String.fromCharCode(e2[n]);\n      return t2;\n    }(e);\n    return new ByteString(t);\n  }\n  [Symbol.iterator]() {\n    let e = 0;\n    return {\n      next: () => e < this.binaryString.length ? {\n        value: this.binaryString.charCodeAt(e++),\n        done: false\n      } : {\n        value: void 0,\n        done: true\n      }\n    };\n  }\n  toBase64() {\n    return function __PRIVATE_encodeBase64(e) {\n      return btoa(e);\n    }(this.binaryString);\n  }\n  toUint8Array() {\n    return function __PRIVATE_uint8ArrayFromBinaryString(e) {\n      const t = new Uint8Array(e.length);\n      for (let n = 0; n < e.length; n++) t[n] = e.charCodeAt(n);\n      return t;\n    }(this.binaryString);\n  }\n  approximateByteSize() {\n    return 2 * this.binaryString.length;\n  }\n  compareTo(e) {\n    return __PRIVATE_primitiveComparator(this.binaryString, e.binaryString);\n  }\n  isEqual(e) {\n    return this.binaryString === e.binaryString;\n  }\n};\nByteString.EMPTY_BYTE_STRING = new ByteString(\"\");\nvar te = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\nfunction __PRIVATE_normalizeTimestamp(e) {\n  if (__PRIVATE_hardAssert(!!e), \"string\" == typeof e) {\n    let t = 0;\n    const n = te.exec(e);\n    if (__PRIVATE_hardAssert(!!n), n[1]) {\n      let e2 = n[1];\n      e2 = (e2 + \"000000000\").substr(0, 9), t = Number(e2);\n    }\n    const r = new Date(e);\n    return {\n      seconds: Math.floor(r.getTime() / 1e3),\n      nanos: t\n    };\n  }\n  return {\n    seconds: __PRIVATE_normalizeNumber(e.seconds),\n    nanos: __PRIVATE_normalizeNumber(e.nanos)\n  };\n}\nfunction __PRIVATE_normalizeNumber(e) {\n  return \"number\" == typeof e ? e : \"string\" == typeof e ? Number(e) : 0;\n}\nfunction __PRIVATE_normalizeByteString(e) {\n  return \"string\" == typeof e ? ByteString.fromBase64String(e) : ByteString.fromUint8Array(e);\n}\nfunction __PRIVATE_isServerTimestamp(e) {\n  var t, n;\n  return \"server_timestamp\" === (null === (n = ((null === (t = null == e ? void 0 : e.mapValue) || void 0 === t ? void 0 : t.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\nfunction __PRIVATE_getPreviousValue(e) {\n  const t = e.mapValue.fields.__previous_value__;\n  return __PRIVATE_isServerTimestamp(t) ? __PRIVATE_getPreviousValue(t) : t;\n}\nfunction __PRIVATE_getLocalWriteTime(e) {\n  const t = __PRIVATE_normalizeTimestamp(e.mapValue.fields.__local_write_time__.timestampValue);\n  return new Timestamp(t.seconds, t.nanos);\n}\nvar DatabaseInfo = class {\n  constructor(e, t, n, r, i, s, o, _, a) {\n    this.databaseId = e, this.appId = t, this.persistenceKey = n, this.host = r, this.ssl = i, this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = _, this.useFetchStreams = a;\n  }\n};\nvar DatabaseId = class {\n  constructor(e, t) {\n    this.projectId = e, this.database = t || \"(default)\";\n  }\n  static empty() {\n    return new DatabaseId(\"\", \"\");\n  }\n  get isDefaultDatabase() {\n    return \"(default)\" === this.database;\n  }\n  isEqual(e) {\n    return e instanceof DatabaseId && e.projectId === this.projectId && e.database === this.database;\n  }\n};\nvar ne = {\n    mapValue: {\n      fields: {\n        __type__: {\n          stringValue: \"__max__\"\n        }\n      }\n    }\n  },\n  re = {\n    nullValue: \"NULL_VALUE\"\n  };\nfunction __PRIVATE_typeOrder(e) {\n  return \"nullValue\" in e ? 0 : \"booleanValue\" in e ? 1 : \"integerValue\" in e || \"doubleValue\" in e ? 2 : \"timestampValue\" in e ? 3 : \"stringValue\" in e ? 5 : \"bytesValue\" in e ? 6 : \"referenceValue\" in e ? 7 : \"geoPointValue\" in e ? 8 : \"arrayValue\" in e ? 9 : \"mapValue\" in e ? __PRIVATE_isServerTimestamp(e) ? 4 : __PRIVATE_isMaxValue(e) ? 9007199254740991 : 10 : fail();\n}\nfunction __PRIVATE_valueEquals(e, t) {\n  if (e === t) return true;\n  const n = __PRIVATE_typeOrder(e);\n  if (n !== __PRIVATE_typeOrder(t)) return false;\n  switch (n) {\n    case 0:\n    case 9007199254740991:\n      return true;\n    case 1:\n      return e.booleanValue === t.booleanValue;\n    case 4:\n      return __PRIVATE_getLocalWriteTime(e).isEqual(__PRIVATE_getLocalWriteTime(t));\n    case 3:\n      return function __PRIVATE_timestampEquals(e2, t2) {\n        if (\"string\" == typeof e2.timestampValue && \"string\" == typeof t2.timestampValue && e2.timestampValue.length === t2.timestampValue.length) return e2.timestampValue === t2.timestampValue;\n        const n2 = __PRIVATE_normalizeTimestamp(e2.timestampValue),\n          r = __PRIVATE_normalizeTimestamp(t2.timestampValue);\n        return n2.seconds === r.seconds && n2.nanos === r.nanos;\n      }(e, t);\n    case 5:\n      return e.stringValue === t.stringValue;\n    case 6:\n      return function __PRIVATE_blobEquals(e2, t2) {\n        return __PRIVATE_normalizeByteString(e2.bytesValue).isEqual(__PRIVATE_normalizeByteString(t2.bytesValue));\n      }(e, t);\n    case 7:\n      return e.referenceValue === t.referenceValue;\n    case 8:\n      return function __PRIVATE_geoPointEquals(e2, t2) {\n        return __PRIVATE_normalizeNumber(e2.geoPointValue.latitude) === __PRIVATE_normalizeNumber(t2.geoPointValue.latitude) && __PRIVATE_normalizeNumber(e2.geoPointValue.longitude) === __PRIVATE_normalizeNumber(t2.geoPointValue.longitude);\n      }(e, t);\n    case 2:\n      return function __PRIVATE_numberEquals(e2, t2) {\n        if (\"integerValue\" in e2 && \"integerValue\" in t2) return __PRIVATE_normalizeNumber(e2.integerValue) === __PRIVATE_normalizeNumber(t2.integerValue);\n        if (\"doubleValue\" in e2 && \"doubleValue\" in t2) {\n          const n2 = __PRIVATE_normalizeNumber(e2.doubleValue),\n            r = __PRIVATE_normalizeNumber(t2.doubleValue);\n          return n2 === r ? __PRIVATE_isNegativeZero(n2) === __PRIVATE_isNegativeZero(r) : isNaN(n2) && isNaN(r);\n        }\n        return false;\n      }(e, t);\n    case 9:\n      return __PRIVATE_arrayEquals(e.arrayValue.values || [], t.arrayValue.values || [], __PRIVATE_valueEquals);\n    case 10:\n      return function __PRIVATE_objectEquals(e2, t2) {\n        const n2 = e2.mapValue.fields || {},\n          r = t2.mapValue.fields || {};\n        if (__PRIVATE_objectSize(n2) !== __PRIVATE_objectSize(r)) return false;\n        for (const e3 in n2) if (n2.hasOwnProperty(e3) && (void 0 === r[e3] || !__PRIVATE_valueEquals(n2[e3], r[e3]))) return false;\n        return true;\n      }(e, t);\n    default:\n      return fail();\n  }\n}\nfunction __PRIVATE_arrayValueContains(e, t) {\n  return void 0 !== (e.values || []).find(e2 => __PRIVATE_valueEquals(e2, t));\n}\nfunction __PRIVATE_valueCompare(e, t) {\n  if (e === t) return 0;\n  const n = __PRIVATE_typeOrder(e),\n    r = __PRIVATE_typeOrder(t);\n  if (n !== r) return __PRIVATE_primitiveComparator(n, r);\n  switch (n) {\n    case 0:\n    case 9007199254740991:\n      return 0;\n    case 1:\n      return __PRIVATE_primitiveComparator(e.booleanValue, t.booleanValue);\n    case 2:\n      return function __PRIVATE_compareNumbers(e2, t2) {\n        const n2 = __PRIVATE_normalizeNumber(e2.integerValue || e2.doubleValue),\n          r2 = __PRIVATE_normalizeNumber(t2.integerValue || t2.doubleValue);\n        return n2 < r2 ? -1 : n2 > r2 ? 1 : n2 === r2 ? 0 : isNaN(n2) ? isNaN(r2) ? 0 : -1 : 1;\n      }(e, t);\n    case 3:\n      return __PRIVATE_compareTimestamps(e.timestampValue, t.timestampValue);\n    case 4:\n      return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(e), __PRIVATE_getLocalWriteTime(t));\n    case 5:\n      return __PRIVATE_primitiveComparator(e.stringValue, t.stringValue);\n    case 6:\n      return function __PRIVATE_compareBlobs(e2, t2) {\n        const n2 = __PRIVATE_normalizeByteString(e2),\n          r2 = __PRIVATE_normalizeByteString(t2);\n        return n2.compareTo(r2);\n      }(e.bytesValue, t.bytesValue);\n    case 7:\n      return function __PRIVATE_compareReferences(e2, t2) {\n        const n2 = e2.split(\"/\"),\n          r2 = t2.split(\"/\");\n        for (let e3 = 0; e3 < n2.length && e3 < r2.length; e3++) {\n          const t3 = __PRIVATE_primitiveComparator(n2[e3], r2[e3]);\n          if (0 !== t3) return t3;\n        }\n        return __PRIVATE_primitiveComparator(n2.length, r2.length);\n      }(e.referenceValue, t.referenceValue);\n    case 8:\n      return function __PRIVATE_compareGeoPoints(e2, t2) {\n        const n2 = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e2.latitude), __PRIVATE_normalizeNumber(t2.latitude));\n        if (0 !== n2) return n2;\n        return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e2.longitude), __PRIVATE_normalizeNumber(t2.longitude));\n      }(e.geoPointValue, t.geoPointValue);\n    case 9:\n      return function __PRIVATE_compareArrays(e2, t2) {\n        const n2 = e2.values || [],\n          r2 = t2.values || [];\n        for (let e3 = 0; e3 < n2.length && e3 < r2.length; ++e3) {\n          const t3 = __PRIVATE_valueCompare(n2[e3], r2[e3]);\n          if (t3) return t3;\n        }\n        return __PRIVATE_primitiveComparator(n2.length, r2.length);\n      }(e.arrayValue, t.arrayValue);\n    case 10:\n      return function __PRIVATE_compareMaps(e2, t2) {\n        if (e2 === ne.mapValue && t2 === ne.mapValue) return 0;\n        if (e2 === ne.mapValue) return 1;\n        if (t2 === ne.mapValue) return -1;\n        const n2 = e2.fields || {},\n          r2 = Object.keys(n2),\n          i = t2.fields || {},\n          s = Object.keys(i);\n        r2.sort(), s.sort();\n        for (let e3 = 0; e3 < r2.length && e3 < s.length; ++e3) {\n          const t3 = __PRIVATE_primitiveComparator(r2[e3], s[e3]);\n          if (0 !== t3) return t3;\n          const o = __PRIVATE_valueCompare(n2[r2[e3]], i[s[e3]]);\n          if (0 !== o) return o;\n        }\n        return __PRIVATE_primitiveComparator(r2.length, s.length);\n      }(e.mapValue, t.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction __PRIVATE_compareTimestamps(e, t) {\n  if (\"string\" == typeof e && \"string\" == typeof t && e.length === t.length) return __PRIVATE_primitiveComparator(e, t);\n  const n = __PRIVATE_normalizeTimestamp(e),\n    r = __PRIVATE_normalizeTimestamp(t),\n    i = __PRIVATE_primitiveComparator(n.seconds, r.seconds);\n  return 0 !== i ? i : __PRIVATE_primitiveComparator(n.nanos, r.nanos);\n}\nfunction canonicalId(e) {\n  return __PRIVATE_canonifyValue(e);\n}\nfunction __PRIVATE_canonifyValue(e) {\n  return \"nullValue\" in e ? \"null\" : \"booleanValue\" in e ? \"\" + e.booleanValue : \"integerValue\" in e ? \"\" + e.integerValue : \"doubleValue\" in e ? \"\" + e.doubleValue : \"timestampValue\" in e ? function __PRIVATE_canonifyTimestamp(e2) {\n    const t = __PRIVATE_normalizeTimestamp(e2);\n    return `time(${t.seconds},${t.nanos})`;\n  }(e.timestampValue) : \"stringValue\" in e ? e.stringValue : \"bytesValue\" in e ? function __PRIVATE_canonifyByteString(e2) {\n    return __PRIVATE_normalizeByteString(e2).toBase64();\n  }(e.bytesValue) : \"referenceValue\" in e ? function __PRIVATE_canonifyReference(e2) {\n    return DocumentKey.fromName(e2).toString();\n  }(e.referenceValue) : \"geoPointValue\" in e ? function __PRIVATE_canonifyGeoPoint(e2) {\n    return `geo(${e2.latitude},${e2.longitude})`;\n  }(e.geoPointValue) : \"arrayValue\" in e ? function __PRIVATE_canonifyArray(e2) {\n    let t = \"[\",\n      n = true;\n    for (const r of e2.values || []) n ? n = false : t += \",\", t += __PRIVATE_canonifyValue(r);\n    return t + \"]\";\n  }(e.arrayValue) : \"mapValue\" in e ? function __PRIVATE_canonifyMap(e2) {\n    const t = Object.keys(e2.fields || {}).sort();\n    let n = \"{\",\n      r = true;\n    for (const i of t) r ? r = false : n += \",\", n += `${i}:${__PRIVATE_canonifyValue(e2.fields[i])}`;\n    return n + \"}\";\n  }(e.mapValue) : fail();\n}\nfunction __PRIVATE_estimateByteSize(e) {\n  switch (__PRIVATE_typeOrder(e)) {\n    case 0:\n    case 1:\n      return 4;\n    case 2:\n      return 8;\n    case 3:\n    case 8:\n      return 16;\n    case 4:\n      const t = __PRIVATE_getPreviousValue(e);\n      return t ? 16 + __PRIVATE_estimateByteSize(t) : 16;\n    case 5:\n      return 2 * e.stringValue.length;\n    case 6:\n      return __PRIVATE_normalizeByteString(e.bytesValue).approximateByteSize();\n    case 7:\n      return e.referenceValue.length;\n    case 9:\n      return function __PRIVATE_estimateArrayByteSize(e2) {\n        return (e2.values || []).reduce((e3, t2) => e3 + __PRIVATE_estimateByteSize(t2), 0);\n      }(e.arrayValue);\n    case 10:\n      return function __PRIVATE_estimateMapByteSize(e2) {\n        let t2 = 0;\n        return forEach(e2.fields, (e3, n) => {\n          t2 += e3.length + __PRIVATE_estimateByteSize(n);\n        }), t2;\n      }(e.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction __PRIVATE_refValue(e, t) {\n  return {\n    referenceValue: `projects/${e.projectId}/databases/${e.database}/documents/${t.path.canonicalString()}`\n  };\n}\nfunction isInteger(e) {\n  return !!e && \"integerValue\" in e;\n}\nfunction isArray(e) {\n  return !!e && \"arrayValue\" in e;\n}\nfunction __PRIVATE_isNullValue(e) {\n  return !!e && \"nullValue\" in e;\n}\nfunction __PRIVATE_isNanValue(e) {\n  return !!e && \"doubleValue\" in e && isNaN(Number(e.doubleValue));\n}\nfunction __PRIVATE_isMapValue(e) {\n  return !!e && \"mapValue\" in e;\n}\nfunction __PRIVATE_deepClone(e) {\n  if (e.geoPointValue) return {\n    geoPointValue: Object.assign({}, e.geoPointValue)\n  };\n  if (e.timestampValue && \"object\" == typeof e.timestampValue) return {\n    timestampValue: Object.assign({}, e.timestampValue)\n  };\n  if (e.mapValue) {\n    const t = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    return forEach(e.mapValue.fields, (e2, n) => t.mapValue.fields[e2] = __PRIVATE_deepClone(n)), t;\n  }\n  if (e.arrayValue) {\n    const t = {\n      arrayValue: {\n        values: []\n      }\n    };\n    for (let n = 0; n < (e.arrayValue.values || []).length; ++n) t.arrayValue.values[n] = __PRIVATE_deepClone(e.arrayValue.values[n]);\n    return t;\n  }\n  return Object.assign({}, e);\n}\nfunction __PRIVATE_isMaxValue(e) {\n  return \"__max__\" === (((e.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n}\nfunction __PRIVATE_valuesGetLowerBound(e) {\n  return \"nullValue\" in e ? re : \"booleanValue\" in e ? {\n    booleanValue: false\n  } : \"integerValue\" in e || \"doubleValue\" in e ? {\n    doubleValue: NaN\n  } : \"timestampValue\" in e ? {\n    timestampValue: {\n      seconds: Number.MIN_SAFE_INTEGER\n    }\n  } : \"stringValue\" in e ? {\n    stringValue: \"\"\n  } : \"bytesValue\" in e ? {\n    bytesValue: \"\"\n  } : \"referenceValue\" in e ? __PRIVATE_refValue(DatabaseId.empty(), DocumentKey.empty()) : \"geoPointValue\" in e ? {\n    geoPointValue: {\n      latitude: -90,\n      longitude: -180\n    }\n  } : \"arrayValue\" in e ? {\n    arrayValue: {}\n  } : \"mapValue\" in e ? {\n    mapValue: {}\n  } : fail();\n}\nfunction __PRIVATE_valuesGetUpperBound(e) {\n  return \"nullValue\" in e ? {\n    booleanValue: false\n  } : \"booleanValue\" in e ? {\n    doubleValue: NaN\n  } : \"integerValue\" in e || \"doubleValue\" in e ? {\n    timestampValue: {\n      seconds: Number.MIN_SAFE_INTEGER\n    }\n  } : \"timestampValue\" in e ? {\n    stringValue: \"\"\n  } : \"stringValue\" in e ? {\n    bytesValue: \"\"\n  } : \"bytesValue\" in e ? __PRIVATE_refValue(DatabaseId.empty(), DocumentKey.empty()) : \"referenceValue\" in e ? {\n    geoPointValue: {\n      latitude: -90,\n      longitude: -180\n    }\n  } : \"geoPointValue\" in e ? {\n    arrayValue: {}\n  } : \"arrayValue\" in e ? {\n    mapValue: {}\n  } : \"mapValue\" in e ? ne : fail();\n}\nfunction __PRIVATE_lowerBoundCompare(e, t) {\n  const n = __PRIVATE_valueCompare(e.value, t.value);\n  return 0 !== n ? n : e.inclusive && !t.inclusive ? -1 : !e.inclusive && t.inclusive ? 1 : 0;\n}\nfunction __PRIVATE_upperBoundCompare(e, t) {\n  const n = __PRIVATE_valueCompare(e.value, t.value);\n  return 0 !== n ? n : e.inclusive && !t.inclusive ? 1 : !e.inclusive && t.inclusive ? -1 : 0;\n}\nvar ObjectValue = class {\n  constructor(e) {\n    this.value = e;\n  }\n  static empty() {\n    return new ObjectValue({\n      mapValue: {}\n    });\n  }\n  field(e) {\n    if (e.isEmpty()) return this.value;\n    {\n      let t = this.value;\n      for (let n = 0; n < e.length - 1; ++n) if (t = (t.mapValue.fields || {})[e.get(n)], !__PRIVATE_isMapValue(t)) return null;\n      return t = (t.mapValue.fields || {})[e.lastSegment()], t || null;\n    }\n  }\n  set(e, t) {\n    this.getFieldsMap(e.popLast())[e.lastSegment()] = __PRIVATE_deepClone(t);\n  }\n  setAll(e) {\n    let t = FieldPath$1.emptyPath(),\n      n = {},\n      r = [];\n    e.forEach((e2, i2) => {\n      if (!t.isImmediateParentOf(i2)) {\n        const e3 = this.getFieldsMap(t);\n        this.applyChanges(e3, n, r), n = {}, r = [], t = i2.popLast();\n      }\n      e2 ? n[i2.lastSegment()] = __PRIVATE_deepClone(e2) : r.push(i2.lastSegment());\n    });\n    const i = this.getFieldsMap(t);\n    this.applyChanges(i, n, r);\n  }\n  delete(e) {\n    const t = this.field(e.popLast());\n    __PRIVATE_isMapValue(t) && t.mapValue.fields && delete t.mapValue.fields[e.lastSegment()];\n  }\n  isEqual(e) {\n    return __PRIVATE_valueEquals(this.value, e.value);\n  }\n  getFieldsMap(e) {\n    let t = this.value;\n    t.mapValue.fields || (t.mapValue = {\n      fields: {}\n    });\n    for (let n = 0; n < e.length; ++n) {\n      let r = t.mapValue.fields[e.get(n)];\n      __PRIVATE_isMapValue(r) && r.mapValue.fields || (r = {\n        mapValue: {\n          fields: {}\n        }\n      }, t.mapValue.fields[e.get(n)] = r), t = r;\n    }\n    return t.mapValue.fields;\n  }\n  applyChanges(e, t, n) {\n    forEach(t, (t2, n2) => e[t2] = n2);\n    for (const t2 of n) delete e[t2];\n  }\n  clone() {\n    return new ObjectValue(__PRIVATE_deepClone(this.value));\n  }\n};\nfunction __PRIVATE_extractFieldMask(e) {\n  const t = [];\n  return forEach(e.fields, (e2, n) => {\n    const r = new FieldPath$1([e2]);\n    if (__PRIVATE_isMapValue(n)) {\n      const e3 = __PRIVATE_extractFieldMask(n.mapValue).fields;\n      if (0 === e3.length) t.push(r);else for (const n2 of e3) t.push(r.child(n2));\n    } else t.push(r);\n  }), new FieldMask(t);\n}\nvar MutableDocument = class {\n  constructor(e, t, n, r, i, s, o) {\n    this.key = e, this.documentType = t, this.version = n, this.readTime = r, this.createTime = i, this.data = s, this.documentState = o;\n  }\n  static newInvalidDocument(e) {\n    return new MutableDocument(e, 0, SnapshotVersion.min(), SnapshotVersion.min(), SnapshotVersion.min(), ObjectValue.empty(), 0);\n  }\n  static newFoundDocument(e, t, n, r) {\n    return new MutableDocument(e, 1, t, SnapshotVersion.min(), n, r, 0);\n  }\n  static newNoDocument(e, t) {\n    return new MutableDocument(e, 2, t, SnapshotVersion.min(), SnapshotVersion.min(), ObjectValue.empty(), 0);\n  }\n  static newUnknownDocument(e, t) {\n    return new MutableDocument(e, 3, t, SnapshotVersion.min(), SnapshotVersion.min(), ObjectValue.empty(), 2);\n  }\n  convertToFoundDocument(e, t) {\n    return !this.createTime.isEqual(SnapshotVersion.min()) || 2 !== this.documentType && 0 !== this.documentType || (this.createTime = e), this.version = e, this.documentType = 1, this.data = t, this.documentState = 0, this;\n  }\n  convertToNoDocument(e) {\n    return this.version = e, this.documentType = 2, this.data = ObjectValue.empty(), this.documentState = 0, this;\n  }\n  convertToUnknownDocument(e) {\n    return this.version = e, this.documentType = 3, this.data = ObjectValue.empty(), this.documentState = 2, this;\n  }\n  setHasCommittedMutations() {\n    return this.documentState = 2, this;\n  }\n  setHasLocalMutations() {\n    return this.documentState = 1, this.version = SnapshotVersion.min(), this;\n  }\n  setReadTime(e) {\n    return this.readTime = e, this;\n  }\n  get hasLocalMutations() {\n    return 1 === this.documentState;\n  }\n  get hasCommittedMutations() {\n    return 2 === this.documentState;\n  }\n  get hasPendingWrites() {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n  isValidDocument() {\n    return 0 !== this.documentType;\n  }\n  isFoundDocument() {\n    return 1 === this.documentType;\n  }\n  isNoDocument() {\n    return 2 === this.documentType;\n  }\n  isUnknownDocument() {\n    return 3 === this.documentType;\n  }\n  isEqual(e) {\n    return e instanceof MutableDocument && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);\n  }\n  mutableCopy() {\n    return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n  }\n  toString() {\n    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n  }\n};\nvar Bound = class {\n  constructor(e, t) {\n    this.position = e, this.inclusive = t;\n  }\n};\nfunction __PRIVATE_boundCompareToDocument(e, t, n) {\n  let r = 0;\n  for (let i = 0; i < e.position.length; i++) {\n    const s = t[i],\n      o = e.position[i];\n    if (s.field.isKeyField()) r = DocumentKey.comparator(DocumentKey.fromName(o.referenceValue), n.key);else {\n      r = __PRIVATE_valueCompare(o, n.data.field(s.field));\n    }\n    if (\"desc\" === s.dir && (r *= -1), 0 !== r) break;\n  }\n  return r;\n}\nfunction __PRIVATE_boundEquals(e, t) {\n  if (null === e) return null === t;\n  if (null === t) return false;\n  if (e.inclusive !== t.inclusive || e.position.length !== t.position.length) return false;\n  for (let n = 0; n < e.position.length; n++) {\n    if (!__PRIVATE_valueEquals(e.position[n], t.position[n])) return false;\n  }\n  return true;\n}\nvar OrderBy = class {\n  constructor(e, t = \"asc\") {\n    this.field = e, this.dir = t;\n  }\n};\nfunction __PRIVATE_orderByEquals(e, t) {\n  return e.dir === t.dir && e.field.isEqual(t.field);\n}\nvar Filter = class {};\nvar FieldFilter = class extends Filter {\n  constructor(e, t, n) {\n    super(), this.field = e, this.op = t, this.value = n;\n  }\n  static create(e, t, n) {\n    return e.isKeyField() ? \"in\" === t || \"not-in\" === t ? this.createKeyFieldInFilter(e, t, n) : new __PRIVATE_KeyFieldFilter(e, t, n) : \"array-contains\" === t ? new __PRIVATE_ArrayContainsFilter(e, n) : \"in\" === t ? new __PRIVATE_InFilter(e, n) : \"not-in\" === t ? new __PRIVATE_NotInFilter(e, n) : \"array-contains-any\" === t ? new __PRIVATE_ArrayContainsAnyFilter(e, n) : new FieldFilter(e, t, n);\n  }\n  static createKeyFieldInFilter(e, t, n) {\n    return \"in\" === t ? new __PRIVATE_KeyFieldInFilter(e, n) : new __PRIVATE_KeyFieldNotInFilter(e, n);\n  }\n  matches(e) {\n    const t = e.data.field(this.field);\n    return \"!=\" === this.op ? null !== t && this.matchesComparison(__PRIVATE_valueCompare(t, this.value)) : null !== t && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(t) && this.matchesComparison(__PRIVATE_valueCompare(t, this.value));\n  }\n  matchesComparison(e) {\n    switch (this.op) {\n      case \"<\":\n        return e < 0;\n      case \"<=\":\n        return e <= 0;\n      case \"==\":\n        return 0 === e;\n      case \"!=\":\n        return 0 !== e;\n      case \">\":\n        return e > 0;\n      case \">=\":\n        return e >= 0;\n      default:\n        return fail();\n    }\n  }\n  isInequality() {\n    return [\"<\", \"<=\", \">\", \">=\", \"!=\", \"not-in\"].indexOf(this.op) >= 0;\n  }\n  getFlattenedFilters() {\n    return [this];\n  }\n  getFilters() {\n    return [this];\n  }\n};\nvar CompositeFilter = class extends Filter {\n  constructor(e, t) {\n    super(), this.filters = e, this.op = t, this.ue = null;\n  }\n  static create(e, t) {\n    return new CompositeFilter(e, t);\n  }\n  matches(e) {\n    return __PRIVATE_compositeFilterIsConjunction(this) ? void 0 === this.filters.find(t => !t.matches(e)) : void 0 !== this.filters.find(t => t.matches(e));\n  }\n  getFlattenedFilters() {\n    return null !== this.ue || (this.ue = this.filters.reduce((e, t) => e.concat(t.getFlattenedFilters()), [])), this.ue;\n  }\n  getFilters() {\n    return Object.assign([], this.filters);\n  }\n};\nfunction __PRIVATE_compositeFilterIsConjunction(e) {\n  return \"and\" === e.op;\n}\nfunction __PRIVATE_compositeFilterIsDisjunction(e) {\n  return \"or\" === e.op;\n}\nfunction __PRIVATE_compositeFilterIsFlatConjunction(e) {\n  return __PRIVATE_compositeFilterIsFlat(e) && __PRIVATE_compositeFilterIsConjunction(e);\n}\nfunction __PRIVATE_compositeFilterIsFlat(e) {\n  for (const t of e.filters) if (t instanceof CompositeFilter) return false;\n  return true;\n}\nfunction __PRIVATE_canonifyFilter(e) {\n  if (e instanceof FieldFilter) return e.field.canonicalString() + e.op.toString() + canonicalId(e.value);\n  if (__PRIVATE_compositeFilterIsFlatConjunction(e)) return e.filters.map(e2 => __PRIVATE_canonifyFilter(e2)).join(\",\");\n  {\n    const t = e.filters.map(e2 => __PRIVATE_canonifyFilter(e2)).join(\",\");\n    return `${e.op}(${t})`;\n  }\n}\nfunction __PRIVATE_filterEquals(e, t) {\n  return e instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(e2, t2) {\n    return t2 instanceof FieldFilter && e2.op === t2.op && e2.field.isEqual(t2.field) && __PRIVATE_valueEquals(e2.value, t2.value);\n  }(e, t) : e instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(e2, t2) {\n    if (t2 instanceof CompositeFilter && e2.op === t2.op && e2.filters.length === t2.filters.length) {\n      return e2.filters.reduce((e3, n, r) => e3 && __PRIVATE_filterEquals(n, t2.filters[r]), true);\n    }\n    return false;\n  }(e, t) : void fail();\n}\nfunction __PRIVATE_compositeFilterWithAddedFilters(e, t) {\n  const n = e.filters.concat(t);\n  return CompositeFilter.create(n, e.op);\n}\nfunction __PRIVATE_stringifyFilter(e) {\n  return e instanceof FieldFilter ? function __PRIVATE_stringifyFieldFilter(e2) {\n    return `${e2.field.canonicalString()} ${e2.op} ${canonicalId(e2.value)}`;\n  }(e) : e instanceof CompositeFilter ? function __PRIVATE_stringifyCompositeFilter(e2) {\n    return e2.op.toString() + \" {\" + e2.getFilters().map(__PRIVATE_stringifyFilter).join(\" ,\") + \"}\";\n  }(e) : \"Filter\";\n}\nvar __PRIVATE_KeyFieldFilter = class extends FieldFilter {\n  constructor(e, t, n) {\n    super(e, t, n), this.key = DocumentKey.fromName(n.referenceValue);\n  }\n  matches(e) {\n    const t = DocumentKey.comparator(e.key, this.key);\n    return this.matchesComparison(t);\n  }\n};\nvar __PRIVATE_KeyFieldInFilter = class extends FieldFilter {\n  constructor(e, t) {\n    super(e, \"in\", t), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"in\", t);\n  }\n  matches(e) {\n    return this.keys.some(t => t.isEqual(e.key));\n  }\n};\nvar __PRIVATE_KeyFieldNotInFilter = class extends FieldFilter {\n  constructor(e, t) {\n    super(e, \"not-in\", t), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"not-in\", t);\n  }\n  matches(e) {\n    return !this.keys.some(t => t.isEqual(e.key));\n  }\n};\nfunction __PRIVATE_extractDocumentKeysFromArrayValue(e, t) {\n  var n;\n  return ((null === (n = t.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(e2 => DocumentKey.fromName(e2.referenceValue));\n}\nvar __PRIVATE_ArrayContainsFilter = class extends FieldFilter {\n  constructor(e, t) {\n    super(e, \"array-contains\", t);\n  }\n  matches(e) {\n    const t = e.data.field(this.field);\n    return isArray(t) && __PRIVATE_arrayValueContains(t.arrayValue, this.value);\n  }\n};\nvar __PRIVATE_InFilter = class extends FieldFilter {\n  constructor(e, t) {\n    super(e, \"in\", t);\n  }\n  matches(e) {\n    const t = e.data.field(this.field);\n    return null !== t && __PRIVATE_arrayValueContains(this.value.arrayValue, t);\n  }\n};\nvar __PRIVATE_NotInFilter = class extends FieldFilter {\n  constructor(e, t) {\n    super(e, \"not-in\", t);\n  }\n  matches(e) {\n    if (__PRIVATE_arrayValueContains(this.value.arrayValue, {\n      nullValue: \"NULL_VALUE\"\n    })) return false;\n    const t = e.data.field(this.field);\n    return null !== t && !__PRIVATE_arrayValueContains(this.value.arrayValue, t);\n  }\n};\nvar __PRIVATE_ArrayContainsAnyFilter = class extends FieldFilter {\n  constructor(e, t) {\n    super(e, \"array-contains-any\", t);\n  }\n  matches(e) {\n    const t = e.data.field(this.field);\n    return !(!isArray(t) || !t.arrayValue.values) && t.arrayValue.values.some(e2 => __PRIVATE_arrayValueContains(this.value.arrayValue, e2));\n  }\n};\nvar __PRIVATE_TargetImpl = class {\n  constructor(e, t = null, n = [], r = [], i = null, s = null, o = null) {\n    this.path = e, this.collectionGroup = t, this.orderBy = n, this.filters = r, this.limit = i, this.startAt = s, this.endAt = o, this.ce = null;\n  }\n};\nfunction __PRIVATE_newTarget(e, t = null, n = [], r = [], i = null, s = null, o = null) {\n  return new __PRIVATE_TargetImpl(e, t, n, r, i, s, o);\n}\nfunction __PRIVATE_canonifyTarget(e) {\n  const t = __PRIVATE_debugCast(e);\n  if (null === t.ce) {\n    let e2 = t.path.canonicalString();\n    null !== t.collectionGroup && (e2 += \"|cg:\" + t.collectionGroup), e2 += \"|f:\", e2 += t.filters.map(e3 => __PRIVATE_canonifyFilter(e3)).join(\",\"), e2 += \"|ob:\", e2 += t.orderBy.map(e3 => function __PRIVATE_canonifyOrderBy(e4) {\n      return e4.field.canonicalString() + e4.dir;\n    }(e3)).join(\",\"), __PRIVATE_isNullOrUndefined(t.limit) || (e2 += \"|l:\", e2 += t.limit), t.startAt && (e2 += \"|lb:\", e2 += t.startAt.inclusive ? \"b:\" : \"a:\", e2 += t.startAt.position.map(e3 => canonicalId(e3)).join(\",\")), t.endAt && (e2 += \"|ub:\", e2 += t.endAt.inclusive ? \"a:\" : \"b:\", e2 += t.endAt.position.map(e3 => canonicalId(e3)).join(\",\")), t.ce = e2;\n  }\n  return t.ce;\n}\nfunction __PRIVATE_targetEquals(e, t) {\n  if (e.limit !== t.limit) return false;\n  if (e.orderBy.length !== t.orderBy.length) return false;\n  for (let n = 0; n < e.orderBy.length; n++) if (!__PRIVATE_orderByEquals(e.orderBy[n], t.orderBy[n])) return false;\n  if (e.filters.length !== t.filters.length) return false;\n  for (let n = 0; n < e.filters.length; n++) if (!__PRIVATE_filterEquals(e.filters[n], t.filters[n])) return false;\n  return e.collectionGroup === t.collectionGroup && !!e.path.isEqual(t.path) && !!__PRIVATE_boundEquals(e.startAt, t.startAt) && __PRIVATE_boundEquals(e.endAt, t.endAt);\n}\nfunction __PRIVATE_targetIsDocumentTarget(e) {\n  return DocumentKey.isDocumentKey(e.path) && null === e.collectionGroup && 0 === e.filters.length;\n}\nfunction __PRIVATE_targetGetFieldFiltersForPath(e, t) {\n  return e.filters.filter(e2 => e2 instanceof FieldFilter && e2.field.isEqual(t));\n}\nfunction __PRIVATE_targetGetAscendingBound(e, t, n) {\n  let r = re,\n    i = true;\n  for (const n2 of __PRIVATE_targetGetFieldFiltersForPath(e, t)) {\n    let e2 = re,\n      t2 = true;\n    switch (n2.op) {\n      case \"<\":\n      case \"<=\":\n        e2 = __PRIVATE_valuesGetLowerBound(n2.value);\n        break;\n      case \"==\":\n      case \"in\":\n      case \">=\":\n        e2 = n2.value;\n        break;\n      case \">\":\n        e2 = n2.value, t2 = false;\n        break;\n      case \"!=\":\n      case \"not-in\":\n        e2 = re;\n    }\n    __PRIVATE_lowerBoundCompare({\n      value: r,\n      inclusive: i\n    }, {\n      value: e2,\n      inclusive: t2\n    }) < 0 && (r = e2, i = t2);\n  }\n  if (null !== n) for (let s = 0; s < e.orderBy.length; ++s) {\n    if (e.orderBy[s].field.isEqual(t)) {\n      const e2 = n.position[s];\n      __PRIVATE_lowerBoundCompare({\n        value: r,\n        inclusive: i\n      }, {\n        value: e2,\n        inclusive: n.inclusive\n      }) < 0 && (r = e2, i = n.inclusive);\n      break;\n    }\n  }\n  return {\n    value: r,\n    inclusive: i\n  };\n}\nfunction __PRIVATE_targetGetDescendingBound(e, t, n) {\n  let r = ne,\n    i = true;\n  for (const n2 of __PRIVATE_targetGetFieldFiltersForPath(e, t)) {\n    let e2 = ne,\n      t2 = true;\n    switch (n2.op) {\n      case \">=\":\n      case \">\":\n        e2 = __PRIVATE_valuesGetUpperBound(n2.value), t2 = false;\n        break;\n      case \"==\":\n      case \"in\":\n      case \"<=\":\n        e2 = n2.value;\n        break;\n      case \"<\":\n        e2 = n2.value, t2 = false;\n        break;\n      case \"!=\":\n      case \"not-in\":\n        e2 = ne;\n    }\n    __PRIVATE_upperBoundCompare({\n      value: r,\n      inclusive: i\n    }, {\n      value: e2,\n      inclusive: t2\n    }) > 0 && (r = e2, i = t2);\n  }\n  if (null !== n) for (let s = 0; s < e.orderBy.length; ++s) {\n    if (e.orderBy[s].field.isEqual(t)) {\n      const e2 = n.position[s];\n      __PRIVATE_upperBoundCompare({\n        value: r,\n        inclusive: i\n      }, {\n        value: e2,\n        inclusive: n.inclusive\n      }) > 0 && (r = e2, i = n.inclusive);\n      break;\n    }\n  }\n  return {\n    value: r,\n    inclusive: i\n  };\n}\nvar __PRIVATE_QueryImpl = class {\n  constructor(e, t = null, n = [], r = [], i = null, s = \"F\", o = null, _ = null) {\n    this.path = e, this.collectionGroup = t, this.explicitOrderBy = n, this.filters = r, this.limit = i, this.limitType = s, this.startAt = o, this.endAt = _, this.le = null, this.he = null, this.Pe = null, this.startAt, this.endAt;\n  }\n};\nfunction __PRIVATE_newQuery(e, t, n, r, i, s, o, _) {\n  return new __PRIVATE_QueryImpl(e, t, n, r, i, s, o, _);\n}\nfunction __PRIVATE_newQueryForPath(e) {\n  return new __PRIVATE_QueryImpl(e);\n}\nfunction __PRIVATE_queryMatchesAllDocuments(e) {\n  return 0 === e.filters.length && null === e.limit && null == e.startAt && null == e.endAt && (0 === e.explicitOrderBy.length || 1 === e.explicitOrderBy.length && e.explicitOrderBy[0].field.isKeyField());\n}\nfunction __PRIVATE_isCollectionGroupQuery(e) {\n  return null !== e.collectionGroup;\n}\nfunction __PRIVATE_queryNormalizedOrderBy(e) {\n  const t = __PRIVATE_debugCast(e);\n  if (null === t.le) {\n    t.le = [];\n    const e2 = /* @__PURE__ */new Set();\n    for (const n2 of t.explicitOrderBy) t.le.push(n2), e2.add(n2.field.canonicalString());\n    const n = t.explicitOrderBy.length > 0 ? t.explicitOrderBy[t.explicitOrderBy.length - 1].dir : \"asc\",\n      r = function __PRIVATE_getInequalityFilterFields(e3) {\n        let t2 = new SortedSet(FieldPath$1.comparator);\n        return e3.filters.forEach(e4 => {\n          e4.getFlattenedFilters().forEach(e5 => {\n            e5.isInequality() && (t2 = t2.add(e5.field));\n          });\n        }), t2;\n      }(t);\n    r.forEach(r2 => {\n      e2.has(r2.canonicalString()) || r2.isKeyField() || t.le.push(new OrderBy(r2, n));\n    }), e2.has(FieldPath$1.keyField().canonicalString()) || t.le.push(new OrderBy(FieldPath$1.keyField(), n));\n  }\n  return t.le;\n}\nfunction __PRIVATE_queryToTarget(e) {\n  const t = __PRIVATE_debugCast(e);\n  return t.he || (t.he = __PRIVATE__queryToTarget(t, __PRIVATE_queryNormalizedOrderBy(e))), t.he;\n}\nfunction __PRIVATE__queryToTarget(e, t) {\n  if (\"F\" === e.limitType) return __PRIVATE_newTarget(e.path, e.collectionGroup, t, e.filters, e.limit, e.startAt, e.endAt);\n  {\n    t = t.map(e2 => {\n      const t2 = \"desc\" === e2.dir ? \"asc\" : \"desc\";\n      return new OrderBy(e2.field, t2);\n    });\n    const n = e.endAt ? new Bound(e.endAt.position, e.endAt.inclusive) : null,\n      r = e.startAt ? new Bound(e.startAt.position, e.startAt.inclusive) : null;\n    return __PRIVATE_newTarget(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n  }\n}\nfunction __PRIVATE_queryWithAddedFilter(e, t) {\n  const n = e.filters.concat([t]);\n  return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), n, e.limit, e.limitType, e.startAt, e.endAt);\n}\nfunction __PRIVATE_queryWithLimit(e, t, n) {\n  return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), e.filters.slice(), t, n, e.startAt, e.endAt);\n}\nfunction __PRIVATE_queryEquals(e, t) {\n  return __PRIVATE_targetEquals(__PRIVATE_queryToTarget(e), __PRIVATE_queryToTarget(t)) && e.limitType === t.limitType;\n}\nfunction __PRIVATE_canonifyQuery(e) {\n  return `${__PRIVATE_canonifyTarget(__PRIVATE_queryToTarget(e))}|lt:${e.limitType}`;\n}\nfunction __PRIVATE_stringifyQuery(e) {\n  return `Query(target=${function __PRIVATE_stringifyTarget(e2) {\n    let t = e2.path.canonicalString();\n    return null !== e2.collectionGroup && (t += \" collectionGroup=\" + e2.collectionGroup), e2.filters.length > 0 && (t += `, filters: [${e2.filters.map(e3 => __PRIVATE_stringifyFilter(e3)).join(\", \")}]`), __PRIVATE_isNullOrUndefined(e2.limit) || (t += \", limit: \" + e2.limit), e2.orderBy.length > 0 && (t += `, orderBy: [${e2.orderBy.map(e3 => function __PRIVATE_stringifyOrderBy(e4) {\n      return `${e4.field.canonicalString()} (${e4.dir})`;\n    }(e3)).join(\", \")}]`), e2.startAt && (t += \", startAt: \", t += e2.startAt.inclusive ? \"b:\" : \"a:\", t += e2.startAt.position.map(e3 => canonicalId(e3)).join(\",\")), e2.endAt && (t += \", endAt: \", t += e2.endAt.inclusive ? \"a:\" : \"b:\", t += e2.endAt.position.map(e3 => canonicalId(e3)).join(\",\")), `Target(${t})`;\n  }(__PRIVATE_queryToTarget(e))}; limitType=${e.limitType})`;\n}\nfunction __PRIVATE_queryMatches(e, t) {\n  return t.isFoundDocument() && function __PRIVATE_queryMatchesPathAndCollectionGroup(e2, t2) {\n    const n = t2.key.path;\n    return null !== e2.collectionGroup ? t2.key.hasCollectionId(e2.collectionGroup) && e2.path.isPrefixOf(n) : DocumentKey.isDocumentKey(e2.path) ? e2.path.isEqual(n) : e2.path.isImmediateParentOf(n);\n  }(e, t) && function __PRIVATE_queryMatchesOrderBy(e2, t2) {\n    for (const n of __PRIVATE_queryNormalizedOrderBy(e2)) if (!n.field.isKeyField() && null === t2.data.field(n.field)) return false;\n    return true;\n  }(e, t) && function __PRIVATE_queryMatchesFilters(e2, t2) {\n    for (const n of e2.filters) if (!n.matches(t2)) return false;\n    return true;\n  }(e, t) && function __PRIVATE_queryMatchesBounds(e2, t2) {\n    if (e2.startAt && !function __PRIVATE_boundSortsBeforeDocument(e3, t3, n) {\n      const r = __PRIVATE_boundCompareToDocument(e3, t3, n);\n      return e3.inclusive ? r <= 0 : r < 0;\n    }(e2.startAt, __PRIVATE_queryNormalizedOrderBy(e2), t2)) return false;\n    if (e2.endAt && !function __PRIVATE_boundSortsAfterDocument(e3, t3, n) {\n      const r = __PRIVATE_boundCompareToDocument(e3, t3, n);\n      return e3.inclusive ? r >= 0 : r > 0;\n    }(e2.endAt, __PRIVATE_queryNormalizedOrderBy(e2), t2)) return false;\n    return true;\n  }(e, t);\n}\nfunction __PRIVATE_queryCollectionGroup(e) {\n  return e.collectionGroup || (e.path.length % 2 == 1 ? e.path.lastSegment() : e.path.get(e.path.length - 2));\n}\nfunction __PRIVATE_newQueryComparator(e) {\n  return (t, n) => {\n    let r = false;\n    for (const i of __PRIVATE_queryNormalizedOrderBy(e)) {\n      const e2 = __PRIVATE_compareDocs(i, t, n);\n      if (0 !== e2) return e2;\n      r = r || i.field.isKeyField();\n    }\n    return 0;\n  };\n}\nfunction __PRIVATE_compareDocs(e, t, n) {\n  const r = e.field.isKeyField() ? DocumentKey.comparator(t.key, n.key) : function __PRIVATE_compareDocumentsByField(e2, t2, n2) {\n    const r2 = t2.data.field(e2),\n      i = n2.data.field(e2);\n    return null !== r2 && null !== i ? __PRIVATE_valueCompare(r2, i) : fail();\n  }(e.field, t, n);\n  switch (e.dir) {\n    case \"asc\":\n      return r;\n    case \"desc\":\n      return -1 * r;\n    default:\n      return fail();\n  }\n}\nvar ObjectMap = class {\n  constructor(e, t) {\n    this.mapKeyFn = e, this.equalsFn = t, this.inner = {}, this.innerSize = 0;\n  }\n  get(e) {\n    const t = this.mapKeyFn(e),\n      n = this.inner[t];\n    if (void 0 !== n) {\n      for (const [t2, r] of n) if (this.equalsFn(t2, e)) return r;\n    }\n  }\n  has(e) {\n    return void 0 !== this.get(e);\n  }\n  set(e, t) {\n    const n = this.mapKeyFn(e),\n      r = this.inner[n];\n    if (void 0 === r) return this.inner[n] = [[e, t]], void this.innerSize++;\n    for (let n2 = 0; n2 < r.length; n2++) if (this.equalsFn(r[n2][0], e)) return void (r[n2] = [e, t]);\n    r.push([e, t]), this.innerSize++;\n  }\n  delete(e) {\n    const t = this.mapKeyFn(e),\n      n = this.inner[t];\n    if (void 0 === n) return false;\n    for (let r = 0; r < n.length; r++) if (this.equalsFn(n[r][0], e)) return 1 === n.length ? delete this.inner[t] : n.splice(r, 1), this.innerSize--, true;\n    return false;\n  }\n  forEach(e) {\n    forEach(this.inner, (t, n) => {\n      for (const [t2, r] of n) e(t2, r);\n    });\n  }\n  isEmpty() {\n    return isEmpty(this.inner);\n  }\n  size() {\n    return this.innerSize;\n  }\n};\nvar ie = new SortedMap(DocumentKey.comparator);\nfunction __PRIVATE_mutableDocumentMap() {\n  return ie;\n}\nvar se = new SortedMap(DocumentKey.comparator);\nfunction documentMap(...e) {\n  let t = se;\n  for (const n of e) t = t.insert(n.key, n);\n  return t;\n}\nfunction __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e) {\n  let t = se;\n  return e.forEach((e2, n) => t = t.insert(e2, n.overlayedDocument)), t;\n}\nfunction __PRIVATE_newOverlayMap() {\n  return __PRIVATE_newDocumentKeyMap();\n}\nfunction __PRIVATE_newMutationMap() {\n  return __PRIVATE_newDocumentKeyMap();\n}\nfunction __PRIVATE_newDocumentKeyMap() {\n  return new ObjectMap(e => e.toString(), (e, t) => e.isEqual(t));\n}\nvar oe = new SortedMap(DocumentKey.comparator);\nvar _e = new SortedSet(DocumentKey.comparator);\nfunction __PRIVATE_documentKeySet(...e) {\n  let t = _e;\n  for (const n of e) t = t.add(n);\n  return t;\n}\nvar ae = new SortedSet(__PRIVATE_primitiveComparator);\nfunction __PRIVATE_targetIdSet() {\n  return ae;\n}\nfunction __PRIVATE_toDouble(e, t) {\n  if (e.useProto3Json) {\n    if (isNaN(t)) return {\n      doubleValue: \"NaN\"\n    };\n    if (t === 1 / 0) return {\n      doubleValue: \"Infinity\"\n    };\n    if (t === -1 / 0) return {\n      doubleValue: \"-Infinity\"\n    };\n  }\n  return {\n    doubleValue: __PRIVATE_isNegativeZero(t) ? \"-0\" : t\n  };\n}\nfunction __PRIVATE_toInteger(e) {\n  return {\n    integerValue: \"\" + e\n  };\n}\nfunction toNumber(e, t) {\n  return isSafeInteger(t) ? __PRIVATE_toInteger(t) : __PRIVATE_toDouble(e, t);\n}\nvar TransformOperation = class {\n  constructor() {\n    this._ = void 0;\n  }\n};\nfunction __PRIVATE_applyTransformOperationToLocalView(e, t, n) {\n  return e instanceof __PRIVATE_ServerTimestampTransform ? function serverTimestamp$1(e2, t2) {\n    const n2 = {\n      fields: {\n        __type__: {\n          stringValue: \"server_timestamp\"\n        },\n        __local_write_time__: {\n          timestampValue: {\n            seconds: e2.seconds,\n            nanos: e2.nanoseconds\n          }\n        }\n      }\n    };\n    return t2 && __PRIVATE_isServerTimestamp(t2) && (t2 = __PRIVATE_getPreviousValue(t2)), t2 && (n2.fields.__previous_value__ = t2), {\n      mapValue: n2\n    };\n  }(n, t) : e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t) : function __PRIVATE_applyNumericIncrementTransformOperationToLocalView(e2, t2) {\n    const n2 = __PRIVATE_computeTransformOperationBaseValue(e2, t2),\n      r = asNumber(n2) + asNumber(e2.Ie);\n    return isInteger(n2) && isInteger(e2.Ie) ? __PRIVATE_toInteger(r) : __PRIVATE_toDouble(e2.serializer, r);\n  }(e, t);\n}\nfunction __PRIVATE_applyTransformOperationToRemoteDocument(e, t, n) {\n  return e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t) : n;\n}\nfunction __PRIVATE_computeTransformOperationBaseValue(e, t) {\n  return e instanceof __PRIVATE_NumericIncrementTransformOperation ? function __PRIVATE_isNumber(e2) {\n    return isInteger(e2) || function __PRIVATE_isDouble(e3) {\n      return !!e3 && \"doubleValue\" in e3;\n    }(e2);\n  }(t) ? t : {\n    integerValue: 0\n  } : null;\n}\nvar __PRIVATE_ServerTimestampTransform = class extends TransformOperation {};\nvar __PRIVATE_ArrayUnionTransformOperation = class extends TransformOperation {\n  constructor(e) {\n    super(), this.elements = e;\n  }\n};\nfunction __PRIVATE_applyArrayUnionTransformOperation(e, t) {\n  const n = __PRIVATE_coercedFieldValuesArray(t);\n  for (const t2 of e.elements) n.some(e2 => __PRIVATE_valueEquals(e2, t2)) || n.push(t2);\n  return {\n    arrayValue: {\n      values: n\n    }\n  };\n}\nvar __PRIVATE_ArrayRemoveTransformOperation = class extends TransformOperation {\n  constructor(e) {\n    super(), this.elements = e;\n  }\n};\nfunction __PRIVATE_applyArrayRemoveTransformOperation(e, t) {\n  let n = __PRIVATE_coercedFieldValuesArray(t);\n  for (const t2 of e.elements) n = n.filter(e2 => !__PRIVATE_valueEquals(e2, t2));\n  return {\n    arrayValue: {\n      values: n\n    }\n  };\n}\nvar __PRIVATE_NumericIncrementTransformOperation = class extends TransformOperation {\n  constructor(e, t) {\n    super(), this.serializer = e, this.Ie = t;\n  }\n};\nfunction asNumber(e) {\n  return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n}\nfunction __PRIVATE_coercedFieldValuesArray(e) {\n  return isArray(e) && e.arrayValue.values ? e.arrayValue.values.slice() : [];\n}\nvar FieldTransform = class {\n  constructor(e, t) {\n    this.field = e, this.transform = t;\n  }\n};\nfunction __PRIVATE_fieldTransformEquals(e, t) {\n  return e.field.isEqual(t.field) && function __PRIVATE_transformOperationEquals(e2, t2) {\n    return e2 instanceof __PRIVATE_ArrayUnionTransformOperation && t2 instanceof __PRIVATE_ArrayUnionTransformOperation || e2 instanceof __PRIVATE_ArrayRemoveTransformOperation && t2 instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_arrayEquals(e2.elements, t2.elements, __PRIVATE_valueEquals) : e2 instanceof __PRIVATE_NumericIncrementTransformOperation && t2 instanceof __PRIVATE_NumericIncrementTransformOperation ? __PRIVATE_valueEquals(e2.Ie, t2.Ie) : e2 instanceof __PRIVATE_ServerTimestampTransform && t2 instanceof __PRIVATE_ServerTimestampTransform;\n  }(e.transform, t.transform);\n}\nvar MutationResult = class {\n  constructor(e, t) {\n    this.version = e, this.transformResults = t;\n  }\n};\nvar Precondition = class {\n  constructor(e, t) {\n    this.updateTime = e, this.exists = t;\n  }\n  static none() {\n    return new Precondition();\n  }\n  static exists(e) {\n    return new Precondition(void 0, e);\n  }\n  static updateTime(e) {\n    return new Precondition(e);\n  }\n  get isNone() {\n    return void 0 === this.updateTime && void 0 === this.exists;\n  }\n  isEqual(e) {\n    return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);\n  }\n};\nfunction __PRIVATE_preconditionIsValidForDocument(e, t) {\n  return void 0 !== e.updateTime ? t.isFoundDocument() && t.version.isEqual(e.updateTime) : void 0 === e.exists || e.exists === t.isFoundDocument();\n}\nvar Mutation = class {};\nfunction __PRIVATE_calculateOverlayMutation(e, t) {\n  if (!e.hasLocalMutations || t && 0 === t.fields.length) return null;\n  if (null === t) return e.isNoDocument() ? new __PRIVATE_DeleteMutation(e.key, Precondition.none()) : new __PRIVATE_SetMutation(e.key, e.data, Precondition.none());\n  {\n    const n = e.data,\n      r = ObjectValue.empty();\n    let i = new SortedSet(FieldPath$1.comparator);\n    for (let e2 of t.fields) if (!i.has(e2)) {\n      let t2 = n.field(e2);\n      null === t2 && e2.length > 1 && (e2 = e2.popLast(), t2 = n.field(e2)), null === t2 ? r.delete(e2) : r.set(e2, t2), i = i.add(e2);\n    }\n    return new __PRIVATE_PatchMutation(e.key, r, new FieldMask(i.toArray()), Precondition.none());\n  }\n}\nfunction __PRIVATE_mutationApplyToRemoteDocument(e, t, n) {\n  e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToRemoteDocument(e2, t2, n2) {\n    const r = e2.value.clone(),\n      i = __PRIVATE_serverTransformResults(e2.fieldTransforms, t2, n2.transformResults);\n    r.setAll(i), t2.convertToFoundDocument(n2.version, r).setHasCommittedMutations();\n  }(e, t, n) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToRemoteDocument(e2, t2, n2) {\n    if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t2)) return void t2.convertToUnknownDocument(n2.version);\n    const r = __PRIVATE_serverTransformResults(e2.fieldTransforms, t2, n2.transformResults),\n      i = t2.data;\n    i.setAll(__PRIVATE_getPatch(e2)), i.setAll(r), t2.convertToFoundDocument(n2.version, i).setHasCommittedMutations();\n  }(e, t, n) : function __PRIVATE_deleteMutationApplyToRemoteDocument(e2, t2, n2) {\n    t2.convertToNoDocument(n2.version).setHasCommittedMutations();\n  }(0, t, n);\n}\nfunction __PRIVATE_mutationApplyToLocalView(e, t, n, r) {\n  return e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToLocalView(e2, t2, n2, r2) {\n    if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t2)) return n2;\n    const i = e2.value.clone(),\n      s = __PRIVATE_localTransformResults(e2.fieldTransforms, r2, t2);\n    return i.setAll(s), t2.convertToFoundDocument(t2.version, i).setHasLocalMutations(), null;\n  }(e, t, n, r) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToLocalView(e2, t2, n2, r2) {\n    if (!__PRIVATE_preconditionIsValidForDocument(e2.precondition, t2)) return n2;\n    const i = __PRIVATE_localTransformResults(e2.fieldTransforms, r2, t2),\n      s = t2.data;\n    if (s.setAll(__PRIVATE_getPatch(e2)), s.setAll(i), t2.convertToFoundDocument(t2.version, s).setHasLocalMutations(), null === n2) return null;\n    return n2.unionWith(e2.fieldMask.fields).unionWith(e2.fieldTransforms.map(e3 => e3.field));\n  }(e, t, n, r) : function __PRIVATE_deleteMutationApplyToLocalView(e2, t2, n2) {\n    if (__PRIVATE_preconditionIsValidForDocument(e2.precondition, t2)) return t2.convertToNoDocument(t2.version).setHasLocalMutations(), null;\n    return n2;\n  }(e, t, n);\n}\nfunction __PRIVATE_mutationExtractBaseValue(e, t) {\n  let n = null;\n  for (const r of e.fieldTransforms) {\n    const e2 = t.data.field(r.field),\n      i = __PRIVATE_computeTransformOperationBaseValue(r.transform, e2 || null);\n    null != i && (null === n && (n = ObjectValue.empty()), n.set(r.field, i));\n  }\n  return n || null;\n}\nfunction __PRIVATE_mutationEquals(e, t) {\n  return e.type === t.type && !!e.key.isEqual(t.key) && !!e.precondition.isEqual(t.precondition) && !!function __PRIVATE_fieldTransformsAreEqual(e2, t2) {\n    return void 0 === e2 && void 0 === t2 || !(!e2 || !t2) && __PRIVATE_arrayEquals(e2, t2, (e3, t3) => __PRIVATE_fieldTransformEquals(e3, t3));\n  }(e.fieldTransforms, t.fieldTransforms) && (0 === e.type ? e.value.isEqual(t.value) : 1 !== e.type || e.data.isEqual(t.data) && e.fieldMask.isEqual(t.fieldMask));\n}\nvar __PRIVATE_SetMutation = class extends Mutation {\n  constructor(e, t, n, r = []) {\n    super(), this.key = e, this.value = t, this.precondition = n, this.fieldTransforms = r, this.type = 0;\n  }\n  getFieldMask() {\n    return null;\n  }\n};\nvar __PRIVATE_PatchMutation = class extends Mutation {\n  constructor(e, t, n, r, i = []) {\n    super(), this.key = e, this.data = t, this.fieldMask = n, this.precondition = r, this.fieldTransforms = i, this.type = 1;\n  }\n  getFieldMask() {\n    return this.fieldMask;\n  }\n};\nfunction __PRIVATE_getPatch(e) {\n  const t = /* @__PURE__ */new Map();\n  return e.fieldMask.fields.forEach(n => {\n    if (!n.isEmpty()) {\n      const r = e.data.field(n);\n      t.set(n, r);\n    }\n  }), t;\n}\nfunction __PRIVATE_serverTransformResults(e, t, n) {\n  const r = /* @__PURE__ */new Map();\n  __PRIVATE_hardAssert(e.length === n.length);\n  for (let i = 0; i < n.length; i++) {\n    const s = e[i],\n      o = s.transform,\n      _ = t.data.field(s.field);\n    r.set(s.field, __PRIVATE_applyTransformOperationToRemoteDocument(o, _, n[i]));\n  }\n  return r;\n}\nfunction __PRIVATE_localTransformResults(e, t, n) {\n  const r = /* @__PURE__ */new Map();\n  for (const i of e) {\n    const e2 = i.transform,\n      s = n.data.field(i.field);\n    r.set(i.field, __PRIVATE_applyTransformOperationToLocalView(e2, s, t));\n  }\n  return r;\n}\nvar __PRIVATE_DeleteMutation = class extends Mutation {\n  constructor(e, t) {\n    super(), this.key = e, this.precondition = t, this.type = 2, this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n};\nvar __PRIVATE_VerifyMutation = class extends Mutation {\n  constructor(e, t) {\n    super(), this.key = e, this.precondition = t, this.type = 3, this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n};\nvar MutationBatch = class {\n  constructor(e, t, n, r) {\n    this.batchId = e, this.localWriteTime = t, this.baseMutations = n, this.mutations = r;\n  }\n  applyToRemoteDocument(e, t) {\n    const n = t.mutationResults;\n    for (let t2 = 0; t2 < this.mutations.length; t2++) {\n      const r = this.mutations[t2];\n      if (r.key.isEqual(e.key)) {\n        __PRIVATE_mutationApplyToRemoteDocument(r, e, n[t2]);\n      }\n    }\n  }\n  applyToLocalView(e, t) {\n    for (const n of this.baseMutations) n.key.isEqual(e.key) && (t = __PRIVATE_mutationApplyToLocalView(n, e, t, this.localWriteTime));\n    for (const n of this.mutations) n.key.isEqual(e.key) && (t = __PRIVATE_mutationApplyToLocalView(n, e, t, this.localWriteTime));\n    return t;\n  }\n  applyToLocalDocumentSet(e, t) {\n    const n = __PRIVATE_newMutationMap();\n    return this.mutations.forEach(r => {\n      const i = e.get(r.key),\n        s = i.overlayedDocument;\n      let o = this.applyToLocalView(s, i.mutatedFields);\n      o = t.has(r.key) ? null : o;\n      const _ = __PRIVATE_calculateOverlayMutation(s, o);\n      null !== _ && n.set(r.key, _), s.isValidDocument() || s.convertToNoDocument(SnapshotVersion.min());\n    }), n;\n  }\n  keys() {\n    return this.mutations.reduce((e, t) => e.add(t.key), __PRIVATE_documentKeySet());\n  }\n  isEqual(e) {\n    return this.batchId === e.batchId && __PRIVATE_arrayEquals(this.mutations, e.mutations, (e2, t) => __PRIVATE_mutationEquals(e2, t)) && __PRIVATE_arrayEquals(this.baseMutations, e.baseMutations, (e2, t) => __PRIVATE_mutationEquals(e2, t));\n  }\n};\nvar MutationBatchResult = class {\n  constructor(e, t, n, r) {\n    this.batch = e, this.commitVersion = t, this.mutationResults = n, this.docVersions = r;\n  }\n  static from(e, t, n) {\n    __PRIVATE_hardAssert(e.mutations.length === n.length);\n    let r = function __PRIVATE_documentVersionMap() {\n      return oe;\n    }();\n    const i = e.mutations;\n    for (let e2 = 0; e2 < i.length; e2++) r = r.insert(i[e2].key, n[e2].version);\n    return new MutationBatchResult(e, t, n, r);\n  }\n};\nvar Overlay = class {\n  constructor(e, t) {\n    this.largestBatchId = e, this.mutation = t;\n  }\n  getKey() {\n    return this.mutation.key;\n  }\n  isEqual(e) {\n    return null !== e && this.mutation === e.mutation;\n  }\n  toString() {\n    return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;\n  }\n};\nvar __PRIVATE_AggregateImpl = class {\n  constructor(e, t, n) {\n    this.alias = e, this.aggregateType = t, this.fieldPath = n;\n  }\n};\nvar ExistenceFilter = class {\n  constructor(e, t) {\n    this.count = e, this.unchangedNames = t;\n  }\n};\nvar ue, ce;\nfunction __PRIVATE_isPermanentError(e) {\n  switch (e) {\n    default:\n      return fail();\n    case C.CANCELLED:\n    case C.UNKNOWN:\n    case C.DEADLINE_EXCEEDED:\n    case C.RESOURCE_EXHAUSTED:\n    case C.INTERNAL:\n    case C.UNAVAILABLE:\n    case C.UNAUTHENTICATED:\n      return false;\n    case C.INVALID_ARGUMENT:\n    case C.NOT_FOUND:\n    case C.ALREADY_EXISTS:\n    case C.PERMISSION_DENIED:\n    case C.FAILED_PRECONDITION:\n    case C.ABORTED:\n    case C.OUT_OF_RANGE:\n    case C.UNIMPLEMENTED:\n    case C.DATA_LOSS:\n      return true;\n  }\n}\nfunction __PRIVATE_mapCodeFromRpcCode(e) {\n  if (void 0 === e) return __PRIVATE_logError(\"GRPC error has no .code\"), C.UNKNOWN;\n  switch (e) {\n    case ue.OK:\n      return C.OK;\n    case ue.CANCELLED:\n      return C.CANCELLED;\n    case ue.UNKNOWN:\n      return C.UNKNOWN;\n    case ue.DEADLINE_EXCEEDED:\n      return C.DEADLINE_EXCEEDED;\n    case ue.RESOURCE_EXHAUSTED:\n      return C.RESOURCE_EXHAUSTED;\n    case ue.INTERNAL:\n      return C.INTERNAL;\n    case ue.UNAVAILABLE:\n      return C.UNAVAILABLE;\n    case ue.UNAUTHENTICATED:\n      return C.UNAUTHENTICATED;\n    case ue.INVALID_ARGUMENT:\n      return C.INVALID_ARGUMENT;\n    case ue.NOT_FOUND:\n      return C.NOT_FOUND;\n    case ue.ALREADY_EXISTS:\n      return C.ALREADY_EXISTS;\n    case ue.PERMISSION_DENIED:\n      return C.PERMISSION_DENIED;\n    case ue.FAILED_PRECONDITION:\n      return C.FAILED_PRECONDITION;\n    case ue.ABORTED:\n      return C.ABORTED;\n    case ue.OUT_OF_RANGE:\n      return C.OUT_OF_RANGE;\n    case ue.UNIMPLEMENTED:\n      return C.UNIMPLEMENTED;\n    case ue.DATA_LOSS:\n      return C.DATA_LOSS;\n    default:\n      return fail();\n  }\n}\n(ce = ue || (ue = {}))[ce.OK = 0] = \"OK\", ce[ce.CANCELLED = 1] = \"CANCELLED\", ce[ce.UNKNOWN = 2] = \"UNKNOWN\", ce[ce.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", ce[ce.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", ce[ce.NOT_FOUND = 5] = \"NOT_FOUND\", ce[ce.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", ce[ce.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", ce[ce.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", ce[ce.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", ce[ce.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", ce[ce.ABORTED = 10] = \"ABORTED\", ce[ce.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", ce[ce.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", ce[ce.INTERNAL = 13] = \"INTERNAL\", ce[ce.UNAVAILABLE = 14] = \"UNAVAILABLE\", ce[ce.DATA_LOSS = 15] = \"DATA_LOSS\";\nvar le = null;\nfunction __PRIVATE_newTextEncoder() {\n  return new TextEncoder();\n}\nvar he = new import_webchannel_wrapper.Integer([4294967295, 4294967295], 0);\nfunction __PRIVATE_getMd5HashValue(e) {\n  const t = __PRIVATE_newTextEncoder().encode(e),\n    n = new import_webchannel_wrapper.Md5();\n  return n.update(t), new Uint8Array(n.digest());\n}\nfunction __PRIVATE_get64BitUints(e) {\n  const t = new DataView(e.buffer),\n    n = t.getUint32(0, true),\n    r = t.getUint32(4, true),\n    i = t.getUint32(8, true),\n    s = t.getUint32(12, true);\n  return [new import_webchannel_wrapper.Integer([n, r], 0), new import_webchannel_wrapper.Integer([i, s], 0)];\n}\nvar BloomFilter = class {\n  constructor(e, t, n) {\n    if (this.bitmap = e, this.padding = t, this.hashCount = n, t < 0 || t >= 8) throw new __PRIVATE_BloomFilterError(`Invalid padding: ${t}`);\n    if (n < 0) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n}`);\n    if (e.length > 0 && 0 === this.hashCount) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n}`);\n    if (0 === e.length && 0 !== t) throw new __PRIVATE_BloomFilterError(`Invalid padding when bitmap length is 0: ${t}`);\n    this.Te = 8 * e.length - t, this.Ee = import_webchannel_wrapper.Integer.fromNumber(this.Te);\n  }\n  de(e, t, n) {\n    let r = e.add(t.multiply(import_webchannel_wrapper.Integer.fromNumber(n)));\n    return 1 === r.compare(he) && (r = new import_webchannel_wrapper.Integer([r.getBits(0), r.getBits(1)], 0)), r.modulo(this.Ee).toNumber();\n  }\n  Ae(e) {\n    return 0 != (this.bitmap[Math.floor(e / 8)] & 1 << e % 8);\n  }\n  mightContain(e) {\n    if (0 === this.Te) return false;\n    const t = __PRIVATE_getMd5HashValue(e),\n      [n, r] = __PRIVATE_get64BitUints(t);\n    for (let e2 = 0; e2 < this.hashCount; e2++) {\n      const t2 = this.de(n, r, e2);\n      if (!this.Ae(t2)) return false;\n    }\n    return true;\n  }\n  static create(e, t, n) {\n    const r = e % 8 == 0 ? 0 : 8 - e % 8,\n      i = new Uint8Array(Math.ceil(e / 8)),\n      s = new BloomFilter(i, r, t);\n    return n.forEach(e2 => s.insert(e2)), s;\n  }\n  insert(e) {\n    if (0 === this.Te) return;\n    const t = __PRIVATE_getMd5HashValue(e),\n      [n, r] = __PRIVATE_get64BitUints(t);\n    for (let e2 = 0; e2 < this.hashCount; e2++) {\n      const t2 = this.de(n, r, e2);\n      this.Re(t2);\n    }\n  }\n  Re(e) {\n    const t = Math.floor(e / 8),\n      n = e % 8;\n    this.bitmap[t] |= 1 << n;\n  }\n};\nvar __PRIVATE_BloomFilterError = class extends Error {\n  constructor() {\n    super(...arguments), this.name = \"BloomFilterError\";\n  }\n};\nvar RemoteEvent = class {\n  constructor(e, t, n, r, i) {\n    this.snapshotVersion = e, this.targetChanges = t, this.targetMismatches = n, this.documentUpdates = r, this.resolvedLimboDocuments = i;\n  }\n  static createSynthesizedRemoteEventForCurrentChange(e, t, n) {\n    const r = /* @__PURE__ */new Map();\n    return r.set(e, TargetChange.createSynthesizedTargetChangeForCurrentChange(e, t, n)), new RemoteEvent(SnapshotVersion.min(), r, new SortedMap(__PRIVATE_primitiveComparator), __PRIVATE_mutableDocumentMap(), __PRIVATE_documentKeySet());\n  }\n};\nvar TargetChange = class {\n  constructor(e, t, n, r, i) {\n    this.resumeToken = e, this.current = t, this.addedDocuments = n, this.modifiedDocuments = r, this.removedDocuments = i;\n  }\n  static createSynthesizedTargetChangeForCurrentChange(e, t, n) {\n    return new TargetChange(n, t, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());\n  }\n};\nvar __PRIVATE_DocumentWatchChange = class {\n  constructor(e, t, n, r) {\n    this.Ve = e, this.removedTargetIds = t, this.key = n, this.me = r;\n  }\n};\nvar __PRIVATE_ExistenceFilterChange = class {\n  constructor(e, t) {\n    this.targetId = e, this.fe = t;\n  }\n};\nvar __PRIVATE_WatchTargetChange = class {\n  constructor(e, t, n = ByteString.EMPTY_BYTE_STRING, r = null) {\n    this.state = e, this.targetIds = t, this.resumeToken = n, this.cause = r;\n  }\n};\nvar __PRIVATE_TargetState = class {\n  constructor() {\n    this.ge = 0, this.pe = __PRIVATE_snapshotChangesMap(), this.ye = ByteString.EMPTY_BYTE_STRING, this.we = false, this.Se = true;\n  }\n  get current() {\n    return this.we;\n  }\n  get resumeToken() {\n    return this.ye;\n  }\n  get be() {\n    return 0 !== this.ge;\n  }\n  get De() {\n    return this.Se;\n  }\n  Ce(e) {\n    e.approximateByteSize() > 0 && (this.Se = true, this.ye = e);\n  }\n  ve() {\n    let e = __PRIVATE_documentKeySet(),\n      t = __PRIVATE_documentKeySet(),\n      n = __PRIVATE_documentKeySet();\n    return this.pe.forEach((r, i) => {\n      switch (i) {\n        case 0:\n          e = e.add(r);\n          break;\n        case 2:\n          t = t.add(r);\n          break;\n        case 1:\n          n = n.add(r);\n          break;\n        default:\n          fail();\n      }\n    }), new TargetChange(this.ye, this.we, e, t, n);\n  }\n  Fe() {\n    this.Se = false, this.pe = __PRIVATE_snapshotChangesMap();\n  }\n  Me(e, t) {\n    this.Se = true, this.pe = this.pe.insert(e, t);\n  }\n  xe(e) {\n    this.Se = true, this.pe = this.pe.remove(e);\n  }\n  Oe() {\n    this.ge += 1;\n  }\n  Ne() {\n    this.ge -= 1;\n  }\n  Be() {\n    this.Se = true, this.we = true;\n  }\n};\nvar __PRIVATE_WatchChangeAggregator = class {\n  constructor(e) {\n    this.Le = e, this.ke = /* @__PURE__ */new Map(), this.qe = __PRIVATE_mutableDocumentMap(), this.Qe = __PRIVATE_documentTargetMap(), this.Ke = new SortedMap(__PRIVATE_primitiveComparator);\n  }\n  $e(e) {\n    for (const t of e.Ve) e.me && e.me.isFoundDocument() ? this.Ue(t, e.me) : this.We(t, e.key, e.me);\n    for (const t of e.removedTargetIds) this.We(t, e.key, e.me);\n  }\n  Ge(e) {\n    this.forEachTarget(e, t => {\n      const n = this.ze(t);\n      switch (e.state) {\n        case 0:\n          this.je(t) && n.Ce(e.resumeToken);\n          break;\n        case 1:\n          n.Ne(), n.be || n.Fe(), n.Ce(e.resumeToken);\n          break;\n        case 2:\n          n.Ne(), n.be || this.removeTarget(t);\n          break;\n        case 3:\n          this.je(t) && (n.Be(), n.Ce(e.resumeToken));\n          break;\n        case 4:\n          this.je(t) && (this.He(t), n.Ce(e.resumeToken));\n          break;\n        default:\n          fail();\n      }\n    });\n  }\n  forEachTarget(e, t) {\n    e.targetIds.length > 0 ? e.targetIds.forEach(t) : this.ke.forEach((e2, n) => {\n      this.je(n) && t(n);\n    });\n  }\n  Je(e) {\n    const t = e.targetId,\n      n = e.fe.count,\n      r = this.Ye(t);\n    if (r) {\n      const i = r.target;\n      if (__PRIVATE_targetIsDocumentTarget(i)) {\n        if (0 === n) {\n          const e2 = new DocumentKey(i.path);\n          this.We(t, e2, MutableDocument.newNoDocument(e2, SnapshotVersion.min()));\n        } else __PRIVATE_hardAssert(1 === n);\n      } else {\n        const r2 = this.Ze(t);\n        if (r2 !== n) {\n          const n2 = this.Xe(e),\n            i2 = n2 ? this.et(n2, e, r2) : 1;\n          if (0 !== i2) {\n            this.He(t);\n            const e2 = 2 === i2 ? \"TargetPurposeExistenceFilterMismatchBloom\" : \"TargetPurposeExistenceFilterMismatch\";\n            this.Ke = this.Ke.insert(t, e2);\n          }\n          null == le || le.tt(function __PRIVATE_createExistenceFilterMismatchInfoForTestingHooks(e2, t2, n3, r3, i3) {\n            var s, o, _, a, u, c;\n            const l = {\n                localCacheCount: e2,\n                existenceFilterCount: t2.count,\n                databaseId: n3.database,\n                projectId: n3.projectId\n              },\n              h = t2.unchangedNames;\n            h && (l.bloomFilter = {\n              applied: 0 === i3,\n              hashCount: null !== (s = null == h ? void 0 : h.hashCount) && void 0 !== s ? s : 0,\n              bitmapLength: null !== (a = null === (_ = null === (o = null == h ? void 0 : h.bits) || void 0 === o ? void 0 : o.bitmap) || void 0 === _ ? void 0 : _.length) && void 0 !== a ? a : 0,\n              padding: null !== (c = null === (u = null == h ? void 0 : h.bits) || void 0 === u ? void 0 : u.padding) && void 0 !== c ? c : 0,\n              mightContain: e3 => {\n                var t3;\n                return null !== (t3 = null == r3 ? void 0 : r3.mightContain(e3)) && void 0 !== t3 && t3;\n              }\n            });\n            return l;\n          }(r2, e.fe, this.Le.nt(), n2, i2));\n        }\n      }\n    }\n  }\n  Xe(e) {\n    const t = e.fe.unchangedNames;\n    if (!t || !t.bits) return null;\n    const {\n      bits: {\n        bitmap: n = \"\",\n        padding: r = 0\n      },\n      hashCount: i = 0\n    } = t;\n    let s, o;\n    try {\n      s = __PRIVATE_normalizeByteString(n).toUint8Array();\n    } catch (e2) {\n      if (e2 instanceof __PRIVATE_Base64DecodeError) return __PRIVATE_logWarn(\"Decoding the base64 bloom filter in existence filter failed (\" + e2.message + \"); ignoring the bloom filter and falling back to full re-query.\"), null;\n      throw e2;\n    }\n    try {\n      o = new BloomFilter(s, r, i);\n    } catch (e2) {\n      return __PRIVATE_logWarn(e2 instanceof __PRIVATE_BloomFilterError ? \"BloomFilter error: \" : \"Applying bloom filter failed: \", e2), null;\n    }\n    return 0 === o.Te ? null : o;\n  }\n  et(e, t, n) {\n    return t.fe.count === n - this.rt(e, t.targetId) ? 0 : 2;\n  }\n  rt(e, t) {\n    const n = this.Le.getRemoteKeysForTarget(t);\n    let r = 0;\n    return n.forEach(n2 => {\n      const i = this.Le.nt(),\n        s = `projects/${i.projectId}/databases/${i.database}/documents/${n2.path.canonicalString()}`;\n      e.mightContain(s) || (this.We(t, n2, null), r++);\n    }), r;\n  }\n  it(e) {\n    const t = /* @__PURE__ */new Map();\n    this.ke.forEach((n2, r2) => {\n      const i = this.Ye(r2);\n      if (i) {\n        if (n2.current && __PRIVATE_targetIsDocumentTarget(i.target)) {\n          const t2 = new DocumentKey(i.target.path);\n          null !== this.qe.get(t2) || this.st(r2, t2) || this.We(r2, t2, MutableDocument.newNoDocument(t2, e));\n        }\n        n2.De && (t.set(r2, n2.ve()), n2.Fe());\n      }\n    });\n    let n = __PRIVATE_documentKeySet();\n    this.Qe.forEach((e2, t2) => {\n      let r2 = true;\n      t2.forEachWhile(e3 => {\n        const t3 = this.Ye(e3);\n        return !t3 || \"TargetPurposeLimboResolution\" === t3.purpose || (r2 = false, false);\n      }), r2 && (n = n.add(e2));\n    }), this.qe.forEach((t2, n2) => n2.setReadTime(e));\n    const r = new RemoteEvent(e, t, this.Ke, this.qe, n);\n    return this.qe = __PRIVATE_mutableDocumentMap(), this.Qe = __PRIVATE_documentTargetMap(), this.Ke = new SortedMap(__PRIVATE_primitiveComparator), r;\n  }\n  Ue(e, t) {\n    if (!this.je(e)) return;\n    const n = this.st(e, t.key) ? 2 : 0;\n    this.ze(e).Me(t.key, n), this.qe = this.qe.insert(t.key, t), this.Qe = this.Qe.insert(t.key, this.ot(t.key).add(e));\n  }\n  We(e, t, n) {\n    if (!this.je(e)) return;\n    const r = this.ze(e);\n    this.st(e, t) ? r.Me(t, 1) : r.xe(t), this.Qe = this.Qe.insert(t, this.ot(t).delete(e)), n && (this.qe = this.qe.insert(t, n));\n  }\n  removeTarget(e) {\n    this.ke.delete(e);\n  }\n  Ze(e) {\n    const t = this.ze(e).ve();\n    return this.Le.getRemoteKeysForTarget(e).size + t.addedDocuments.size - t.removedDocuments.size;\n  }\n  Oe(e) {\n    this.ze(e).Oe();\n  }\n  ze(e) {\n    let t = this.ke.get(e);\n    return t || (t = new __PRIVATE_TargetState(), this.ke.set(e, t)), t;\n  }\n  ot(e) {\n    let t = this.Qe.get(e);\n    return t || (t = new SortedSet(__PRIVATE_primitiveComparator), this.Qe = this.Qe.insert(e, t)), t;\n  }\n  je(e) {\n    const t = null !== this.Ye(e);\n    return t || __PRIVATE_logDebug(\"WatchChangeAggregator\", \"Detected inactive target\", e), t;\n  }\n  Ye(e) {\n    const t = this.ke.get(e);\n    return t && t.be ? null : this.Le._t(e);\n  }\n  He(e) {\n    this.ke.set(e, new __PRIVATE_TargetState());\n    this.Le.getRemoteKeysForTarget(e).forEach(t => {\n      this.We(e, t, null);\n    });\n  }\n  st(e, t) {\n    return this.Le.getRemoteKeysForTarget(e).has(t);\n  }\n};\nfunction __PRIVATE_documentTargetMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\nfunction __PRIVATE_snapshotChangesMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\nvar Pe = (() => {\n    const e = {\n      asc: \"ASCENDING\",\n      desc: \"DESCENDING\"\n    };\n    return e;\n  })(),\n  Ie = (() => {\n    const e = {\n      \"<\": \"LESS_THAN\",\n      \"<=\": \"LESS_THAN_OR_EQUAL\",\n      \">\": \"GREATER_THAN\",\n      \">=\": \"GREATER_THAN_OR_EQUAL\",\n      \"==\": \"EQUAL\",\n      \"!=\": \"NOT_EQUAL\",\n      \"array-contains\": \"ARRAY_CONTAINS\",\n      in: \"IN\",\n      \"not-in\": \"NOT_IN\",\n      \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return e;\n  })(),\n  Te = (() => {\n    const e = {\n      and: \"AND\",\n      or: \"OR\"\n    };\n    return e;\n  })();\nvar JsonProtoSerializer = class {\n  constructor(e, t) {\n    this.databaseId = e, this.useProto3Json = t;\n  }\n};\nfunction __PRIVATE_toInt32Proto(e, t) {\n  return e.useProto3Json || __PRIVATE_isNullOrUndefined(t) ? t : {\n    value: t\n  };\n}\nfunction toTimestamp(e, t) {\n  if (e.useProto3Json) {\n    return `${new Date(1e3 * t.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + t.nanoseconds).slice(-9)}Z`;\n  }\n  return {\n    seconds: \"\" + t.seconds,\n    nanos: t.nanoseconds\n  };\n}\nfunction __PRIVATE_toBytes(e, t) {\n  return e.useProto3Json ? t.toBase64() : t.toUint8Array();\n}\nfunction __PRIVATE_toVersion(e, t) {\n  return toTimestamp(e, t.toTimestamp());\n}\nfunction __PRIVATE_fromVersion(e) {\n  return __PRIVATE_hardAssert(!!e), SnapshotVersion.fromTimestamp(function fromTimestamp(e2) {\n    const t = __PRIVATE_normalizeTimestamp(e2);\n    return new Timestamp(t.seconds, t.nanos);\n  }(e));\n}\nfunction __PRIVATE_toResourceName(e, t) {\n  return function __PRIVATE_fullyQualifiedPrefixPath(e2) {\n    return new ResourcePath([\"projects\", e2.projectId, \"databases\", e2.database]);\n  }(e).child(\"documents\").child(t).canonicalString();\n}\nfunction __PRIVATE_fromResourceName(e) {\n  const t = ResourcePath.fromString(e);\n  return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(t)), t;\n}\nfunction __PRIVATE_toName(e, t) {\n  return __PRIVATE_toResourceName(e.databaseId, t.path);\n}\nfunction fromName(e, t) {\n  const n = __PRIVATE_fromResourceName(t);\n  if (n.get(1) !== e.databaseId.projectId) throw new FirestoreError(C.INVALID_ARGUMENT, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + e.databaseId.projectId);\n  if (n.get(3) !== e.databaseId.database) throw new FirestoreError(C.INVALID_ARGUMENT, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + e.databaseId.database);\n  return new DocumentKey(__PRIVATE_extractLocalPathFromResourceName(n));\n}\nfunction __PRIVATE_toQueryPath(e, t) {\n  return __PRIVATE_toResourceName(e.databaseId, t);\n}\nfunction __PRIVATE_fromQueryPath(e) {\n  const t = __PRIVATE_fromResourceName(e);\n  return 4 === t.length ? ResourcePath.emptyPath() : __PRIVATE_extractLocalPathFromResourceName(t);\n}\nfunction __PRIVATE_getEncodedDatabaseId(e) {\n  return new ResourcePath([\"projects\", e.databaseId.projectId, \"databases\", e.databaseId.database]).canonicalString();\n}\nfunction __PRIVATE_extractLocalPathFromResourceName(e) {\n  return __PRIVATE_hardAssert(e.length > 4 && \"documents\" === e.get(4)), e.popFirst(5);\n}\nfunction __PRIVATE_toMutationDocument(e, t, n) {\n  return {\n    name: __PRIVATE_toName(e, t),\n    fields: n.value.mapValue.fields\n  };\n}\nfunction __PRIVATE_fromDocument(e, t, n) {\n  const r = fromName(e, t.name),\n    i = __PRIVATE_fromVersion(t.updateTime),\n    s = t.createTime ? __PRIVATE_fromVersion(t.createTime) : SnapshotVersion.min(),\n    o = new ObjectValue({\n      mapValue: {\n        fields: t.fields\n      }\n    }),\n    _ = MutableDocument.newFoundDocument(r, i, s, o);\n  return n && _.setHasCommittedMutations(), n ? _.setHasCommittedMutations() : _;\n}\nfunction __PRIVATE_fromBatchGetDocumentsResponse(e, t) {\n  return \"found\" in t ? function __PRIVATE_fromFound(e2, t2) {\n    __PRIVATE_hardAssert(!!t2.found), t2.found.name, t2.found.updateTime;\n    const n = fromName(e2, t2.found.name),\n      r = __PRIVATE_fromVersion(t2.found.updateTime),\n      i = t2.found.createTime ? __PRIVATE_fromVersion(t2.found.createTime) : SnapshotVersion.min(),\n      s = new ObjectValue({\n        mapValue: {\n          fields: t2.found.fields\n        }\n      });\n    return MutableDocument.newFoundDocument(n, r, i, s);\n  }(e, t) : \"missing\" in t ? function __PRIVATE_fromMissing(e2, t2) {\n    __PRIVATE_hardAssert(!!t2.missing), __PRIVATE_hardAssert(!!t2.readTime);\n    const n = fromName(e2, t2.missing),\n      r = __PRIVATE_fromVersion(t2.readTime);\n    return MutableDocument.newNoDocument(n, r);\n  }(e, t) : fail();\n}\nfunction __PRIVATE_fromWatchChange(e, t) {\n  let n;\n  if (\"targetChange\" in t) {\n    t.targetChange;\n    const r = function __PRIVATE_fromWatchTargetChangeState(e2) {\n        return \"NO_CHANGE\" === e2 ? 0 : \"ADD\" === e2 ? 1 : \"REMOVE\" === e2 ? 2 : \"CURRENT\" === e2 ? 3 : \"RESET\" === e2 ? 4 : fail();\n      }(t.targetChange.targetChangeType || \"NO_CHANGE\"),\n      i = t.targetChange.targetIds || [],\n      s = function __PRIVATE_fromBytes(e2, t2) {\n        return e2.useProto3Json ? (__PRIVATE_hardAssert(void 0 === t2 || \"string\" == typeof t2), ByteString.fromBase64String(t2 || \"\")) : (__PRIVATE_hardAssert(void 0 === t2 || t2 instanceof Uint8Array), ByteString.fromUint8Array(t2 || new Uint8Array()));\n      }(e, t.targetChange.resumeToken),\n      o = t.targetChange.cause,\n      _ = o && function __PRIVATE_fromRpcStatus(e2) {\n        const t2 = void 0 === e2.code ? C.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(e2.code);\n        return new FirestoreError(t2, e2.message || \"\");\n      }(o);\n    n = new __PRIVATE_WatchTargetChange(r, i, s, _ || null);\n  } else if (\"documentChange\" in t) {\n    t.documentChange;\n    const r = t.documentChange;\n    r.document, r.document.name, r.document.updateTime;\n    const i = fromName(e, r.document.name),\n      s = __PRIVATE_fromVersion(r.document.updateTime),\n      o = r.document.createTime ? __PRIVATE_fromVersion(r.document.createTime) : SnapshotVersion.min(),\n      _ = new ObjectValue({\n        mapValue: {\n          fields: r.document.fields\n        }\n      }),\n      a = MutableDocument.newFoundDocument(i, s, o, _),\n      u = r.targetIds || [],\n      c = r.removedTargetIds || [];\n    n = new __PRIVATE_DocumentWatchChange(u, c, a.key, a);\n  } else if (\"documentDelete\" in t) {\n    t.documentDelete;\n    const r = t.documentDelete;\n    r.document;\n    const i = fromName(e, r.document),\n      s = r.readTime ? __PRIVATE_fromVersion(r.readTime) : SnapshotVersion.min(),\n      o = MutableDocument.newNoDocument(i, s),\n      _ = r.removedTargetIds || [];\n    n = new __PRIVATE_DocumentWatchChange([], _, o.key, o);\n  } else if (\"documentRemove\" in t) {\n    t.documentRemove;\n    const r = t.documentRemove;\n    r.document;\n    const i = fromName(e, r.document),\n      s = r.removedTargetIds || [];\n    n = new __PRIVATE_DocumentWatchChange([], s, i, null);\n  } else {\n    if (!(\"filter\" in t)) return fail();\n    {\n      t.filter;\n      const e2 = t.filter;\n      e2.targetId;\n      const {\n          count: r = 0,\n          unchangedNames: i\n        } = e2,\n        s = new ExistenceFilter(r, i),\n        o = e2.targetId;\n      n = new __PRIVATE_ExistenceFilterChange(o, s);\n    }\n  }\n  return n;\n}\nfunction toMutation(e, t) {\n  let n;\n  if (t instanceof __PRIVATE_SetMutation) n = {\n    update: __PRIVATE_toMutationDocument(e, t.key, t.value)\n  };else if (t instanceof __PRIVATE_DeleteMutation) n = {\n    delete: __PRIVATE_toName(e, t.key)\n  };else if (t instanceof __PRIVATE_PatchMutation) n = {\n    update: __PRIVATE_toMutationDocument(e, t.key, t.data),\n    updateMask: __PRIVATE_toDocumentMask(t.fieldMask)\n  };else {\n    if (!(t instanceof __PRIVATE_VerifyMutation)) return fail();\n    n = {\n      verify: __PRIVATE_toName(e, t.key)\n    };\n  }\n  return t.fieldTransforms.length > 0 && (n.updateTransforms = t.fieldTransforms.map(e2 => function __PRIVATE_toFieldTransform(e3, t2) {\n    const n2 = t2.transform;\n    if (n2 instanceof __PRIVATE_ServerTimestampTransform) return {\n      fieldPath: t2.field.canonicalString(),\n      setToServerValue: \"REQUEST_TIME\"\n    };\n    if (n2 instanceof __PRIVATE_ArrayUnionTransformOperation) return {\n      fieldPath: t2.field.canonicalString(),\n      appendMissingElements: {\n        values: n2.elements\n      }\n    };\n    if (n2 instanceof __PRIVATE_ArrayRemoveTransformOperation) return {\n      fieldPath: t2.field.canonicalString(),\n      removeAllFromArray: {\n        values: n2.elements\n      }\n    };\n    if (n2 instanceof __PRIVATE_NumericIncrementTransformOperation) return {\n      fieldPath: t2.field.canonicalString(),\n      increment: n2.Ie\n    };\n    throw fail();\n  }(0, e2))), t.precondition.isNone || (n.currentDocument = function __PRIVATE_toPrecondition(e2, t2) {\n    return void 0 !== t2.updateTime ? {\n      updateTime: __PRIVATE_toVersion(e2, t2.updateTime)\n    } : void 0 !== t2.exists ? {\n      exists: t2.exists\n    } : fail();\n  }(e, t.precondition)), n;\n}\nfunction __PRIVATE_fromMutation(e, t) {\n  const n = t.currentDocument ? function __PRIVATE_fromPrecondition(e2) {\n      return void 0 !== e2.updateTime ? Precondition.updateTime(__PRIVATE_fromVersion(e2.updateTime)) : void 0 !== e2.exists ? Precondition.exists(e2.exists) : Precondition.none();\n    }(t.currentDocument) : Precondition.none(),\n    r = t.updateTransforms ? t.updateTransforms.map(t2 => function __PRIVATE_fromFieldTransform(e2, t3) {\n      let n2 = null;\n      if (\"setToServerValue\" in t3) __PRIVATE_hardAssert(\"REQUEST_TIME\" === t3.setToServerValue), n2 = new __PRIVATE_ServerTimestampTransform();else if (\"appendMissingElements\" in t3) {\n        const e3 = t3.appendMissingElements.values || [];\n        n2 = new __PRIVATE_ArrayUnionTransformOperation(e3);\n      } else if (\"removeAllFromArray\" in t3) {\n        const e3 = t3.removeAllFromArray.values || [];\n        n2 = new __PRIVATE_ArrayRemoveTransformOperation(e3);\n      } else \"increment\" in t3 ? n2 = new __PRIVATE_NumericIncrementTransformOperation(e2, t3.increment) : fail();\n      const r2 = FieldPath$1.fromServerFormat(t3.fieldPath);\n      return new FieldTransform(r2, n2);\n    }(e, t2)) : [];\n  if (t.update) {\n    t.update.name;\n    const i = fromName(e, t.update.name),\n      s = new ObjectValue({\n        mapValue: {\n          fields: t.update.fields\n        }\n      });\n    if (t.updateMask) {\n      const e2 = function __PRIVATE_fromDocumentMask(e3) {\n        const t2 = e3.fieldPaths || [];\n        return new FieldMask(t2.map(e4 => FieldPath$1.fromServerFormat(e4)));\n      }(t.updateMask);\n      return new __PRIVATE_PatchMutation(i, s, e2, n, r);\n    }\n    return new __PRIVATE_SetMutation(i, s, n, r);\n  }\n  if (t.delete) {\n    const r2 = fromName(e, t.delete);\n    return new __PRIVATE_DeleteMutation(r2, n);\n  }\n  if (t.verify) {\n    const r2 = fromName(e, t.verify);\n    return new __PRIVATE_VerifyMutation(r2, n);\n  }\n  return fail();\n}\nfunction __PRIVATE_fromWriteResults(e, t) {\n  return e && e.length > 0 ? (__PRIVATE_hardAssert(void 0 !== t), e.map(e2 => function __PRIVATE_fromWriteResult(e3, t2) {\n    let n = e3.updateTime ? __PRIVATE_fromVersion(e3.updateTime) : __PRIVATE_fromVersion(t2);\n    return n.isEqual(SnapshotVersion.min()) && (n = __PRIVATE_fromVersion(t2)), new MutationResult(n, e3.transformResults || []);\n  }(e2, t))) : [];\n}\nfunction __PRIVATE_toDocumentsTarget(e, t) {\n  return {\n    documents: [__PRIVATE_toQueryPath(e, t.path)]\n  };\n}\nfunction __PRIVATE_toQueryTarget(e, t) {\n  const n = {\n      structuredQuery: {}\n    },\n    r = t.path;\n  null !== t.collectionGroup ? (n.parent = __PRIVATE_toQueryPath(e, r), n.structuredQuery.from = [{\n    collectionId: t.collectionGroup,\n    allDescendants: true\n  }]) : (n.parent = __PRIVATE_toQueryPath(e, r.popLast()), n.structuredQuery.from = [{\n    collectionId: r.lastSegment()\n  }]);\n  const i = function __PRIVATE_toFilters(e2) {\n    if (0 === e2.length) return;\n    return __PRIVATE_toFilter(CompositeFilter.create(e2, \"and\"));\n  }(t.filters);\n  i && (n.structuredQuery.where = i);\n  const s = function __PRIVATE_toOrder(e2) {\n    if (0 === e2.length) return;\n    return e2.map(e3 => function __PRIVATE_toPropertyOrder(e4) {\n      return {\n        field: __PRIVATE_toFieldPathReference(e4.field),\n        direction: __PRIVATE_toDirection(e4.dir)\n      };\n    }(e3));\n  }(t.orderBy);\n  s && (n.structuredQuery.orderBy = s);\n  const o = __PRIVATE_toInt32Proto(e, t.limit);\n  return null !== o && (n.structuredQuery.limit = o), t.startAt && (n.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(e2) {\n    return {\n      before: e2.inclusive,\n      values: e2.position\n    };\n  }(t.startAt)), t.endAt && (n.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(e2) {\n    return {\n      before: !e2.inclusive,\n      values: e2.position\n    };\n  }(t.endAt)), n;\n}\nfunction __PRIVATE_convertQueryTargetToQuery(e) {\n  let t = __PRIVATE_fromQueryPath(e.parent);\n  const n = e.structuredQuery,\n    r = n.from ? n.from.length : 0;\n  let i = null;\n  if (r > 0) {\n    __PRIVATE_hardAssert(1 === r);\n    const e2 = n.from[0];\n    e2.allDescendants ? i = e2.collectionId : t = t.child(e2.collectionId);\n  }\n  let s = [];\n  n.where && (s = function __PRIVATE_fromFilters(e2) {\n    const t2 = __PRIVATE_fromFilter(e2);\n    if (t2 instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(t2)) return t2.getFilters();\n    return [t2];\n  }(n.where));\n  let o = [];\n  n.orderBy && (o = function __PRIVATE_fromOrder(e2) {\n    return e2.map(e3 => function __PRIVATE_fromPropertyOrder(e4) {\n      return new OrderBy(__PRIVATE_fromFieldPathReference(e4.field), function __PRIVATE_fromDirection(e5) {\n        switch (e5) {\n          case \"ASCENDING\":\n            return \"asc\";\n          case \"DESCENDING\":\n            return \"desc\";\n          default:\n            return;\n        }\n      }(e4.direction));\n    }(e3));\n  }(n.orderBy));\n  let _ = null;\n  n.limit && (_ = function __PRIVATE_fromInt32Proto(e2) {\n    let t2;\n    return t2 = \"object\" == typeof e2 ? e2.value : e2, __PRIVATE_isNullOrUndefined(t2) ? null : t2;\n  }(n.limit));\n  let a = null;\n  n.startAt && (a = function __PRIVATE_fromStartAtCursor(e2) {\n    const t2 = !!e2.before,\n      n2 = e2.values || [];\n    return new Bound(n2, t2);\n  }(n.startAt));\n  let u = null;\n  return n.endAt && (u = function __PRIVATE_fromEndAtCursor(e2) {\n    const t2 = !e2.before,\n      n2 = e2.values || [];\n    return new Bound(n2, t2);\n  }(n.endAt)), __PRIVATE_newQuery(t, i, o, s, _, \"F\", a, u);\n}\nfunction __PRIVATE_toListenRequestLabels(e, t) {\n  const n = function __PRIVATE_toLabel(e2) {\n    switch (e2) {\n      case \"TargetPurposeListen\":\n        return null;\n      case \"TargetPurposeExistenceFilterMismatch\":\n        return \"existence-filter-mismatch\";\n      case \"TargetPurposeExistenceFilterMismatchBloom\":\n        return \"existence-filter-mismatch-bloom\";\n      case \"TargetPurposeLimboResolution\":\n        return \"limbo-document\";\n      default:\n        return fail();\n    }\n  }(t.purpose);\n  return null == n ? null : {\n    \"goog-listen-tags\": n\n  };\n}\nfunction __PRIVATE_fromFilter(e) {\n  return void 0 !== e.unaryFilter ? function __PRIVATE_fromUnaryFilter(e2) {\n    switch (e2.unaryFilter.op) {\n      case \"IS_NAN\":\n        const t = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);\n        return FieldFilter.create(t, \"==\", {\n          doubleValue: NaN\n        });\n      case \"IS_NULL\":\n        const n = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);\n        return FieldFilter.create(n, \"==\", {\n          nullValue: \"NULL_VALUE\"\n        });\n      case \"IS_NOT_NAN\":\n        const r = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);\n        return FieldFilter.create(r, \"!=\", {\n          doubleValue: NaN\n        });\n      case \"IS_NOT_NULL\":\n        const i = __PRIVATE_fromFieldPathReference(e2.unaryFilter.field);\n        return FieldFilter.create(i, \"!=\", {\n          nullValue: \"NULL_VALUE\"\n        });\n      default:\n        return fail();\n    }\n  }(e) : void 0 !== e.fieldFilter ? function __PRIVATE_fromFieldFilter(e2) {\n    return FieldFilter.create(__PRIVATE_fromFieldPathReference(e2.fieldFilter.field), function __PRIVATE_fromOperatorName(e3) {\n      switch (e3) {\n        case \"EQUAL\":\n          return \"==\";\n        case \"NOT_EQUAL\":\n          return \"!=\";\n        case \"GREATER_THAN\":\n          return \">\";\n        case \"GREATER_THAN_OR_EQUAL\":\n          return \">=\";\n        case \"LESS_THAN\":\n          return \"<\";\n        case \"LESS_THAN_OR_EQUAL\":\n          return \"<=\";\n        case \"ARRAY_CONTAINS\":\n          return \"array-contains\";\n        case \"IN\":\n          return \"in\";\n        case \"NOT_IN\":\n          return \"not-in\";\n        case \"ARRAY_CONTAINS_ANY\":\n          return \"array-contains-any\";\n        default:\n          return fail();\n      }\n    }(e2.fieldFilter.op), e2.fieldFilter.value);\n  }(e) : void 0 !== e.compositeFilter ? function __PRIVATE_fromCompositeFilter(e2) {\n    return CompositeFilter.create(e2.compositeFilter.filters.map(e3 => __PRIVATE_fromFilter(e3)), function __PRIVATE_fromCompositeOperatorName(e3) {\n      switch (e3) {\n        case \"AND\":\n          return \"and\";\n        case \"OR\":\n          return \"or\";\n        default:\n          return fail();\n      }\n    }(e2.compositeFilter.op));\n  }(e) : fail();\n}\nfunction __PRIVATE_toDirection(e) {\n  return Pe[e];\n}\nfunction __PRIVATE_toOperatorName(e) {\n  return Ie[e];\n}\nfunction __PRIVATE_toCompositeOperatorName(e) {\n  return Te[e];\n}\nfunction __PRIVATE_toFieldPathReference(e) {\n  return {\n    fieldPath: e.canonicalString()\n  };\n}\nfunction __PRIVATE_fromFieldPathReference(e) {\n  return FieldPath$1.fromServerFormat(e.fieldPath);\n}\nfunction __PRIVATE_toFilter(e) {\n  return e instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(e2) {\n    if (\"==\" === e2.op) {\n      if (__PRIVATE_isNanValue(e2.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(e2.field),\n          op: \"IS_NAN\"\n        }\n      };\n      if (__PRIVATE_isNullValue(e2.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(e2.field),\n          op: \"IS_NULL\"\n        }\n      };\n    } else if (\"!=\" === e2.op) {\n      if (__PRIVATE_isNanValue(e2.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(e2.field),\n          op: \"IS_NOT_NAN\"\n        }\n      };\n      if (__PRIVATE_isNullValue(e2.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(e2.field),\n          op: \"IS_NOT_NULL\"\n        }\n      };\n    }\n    return {\n      fieldFilter: {\n        field: __PRIVATE_toFieldPathReference(e2.field),\n        op: __PRIVATE_toOperatorName(e2.op),\n        value: e2.value\n      }\n    };\n  }(e) : e instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(e2) {\n    const t = e2.getFilters().map(e3 => __PRIVATE_toFilter(e3));\n    if (1 === t.length) return t[0];\n    return {\n      compositeFilter: {\n        op: __PRIVATE_toCompositeOperatorName(e2.op),\n        filters: t\n      }\n    };\n  }(e) : fail();\n}\nfunction __PRIVATE_toDocumentMask(e) {\n  const t = [];\n  return e.fields.forEach(e2 => t.push(e2.canonicalString())), {\n    fieldPaths: t\n  };\n}\nfunction __PRIVATE_isValidResourceName(e) {\n  return e.length >= 4 && \"projects\" === e.get(0) && \"databases\" === e.get(2);\n}\nvar TargetData = class {\n  constructor(e, t, n, r, i = SnapshotVersion.min(), s = SnapshotVersion.min(), o = ByteString.EMPTY_BYTE_STRING, _ = null) {\n    this.target = e, this.targetId = t, this.purpose = n, this.sequenceNumber = r, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = s, this.resumeToken = o, this.expectedCount = _;\n  }\n  withSequenceNumber(e) {\n    return new TargetData(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\n  }\n  withResumeToken(e, t) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, t, this.lastLimboFreeSnapshotVersion, e, null);\n  }\n  withExpectedCount(e) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);\n  }\n  withLastLimboFreeSnapshotVersion(e) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);\n  }\n};\nvar __PRIVATE_LocalSerializer = class {\n  constructor(e) {\n    this.ut = e;\n  }\n};\nfunction __PRIVATE_fromDbRemoteDocument(e, t) {\n  let n;\n  if (t.document) n = __PRIVATE_fromDocument(e.ut, t.document, !!t.hasCommittedMutations);else if (t.noDocument) {\n    const e2 = DocumentKey.fromSegments(t.noDocument.path),\n      r = __PRIVATE_fromDbTimestamp(t.noDocument.readTime);\n    n = MutableDocument.newNoDocument(e2, r), t.hasCommittedMutations && n.setHasCommittedMutations();\n  } else {\n    if (!t.unknownDocument) return fail();\n    {\n      const e2 = DocumentKey.fromSegments(t.unknownDocument.path),\n        r = __PRIVATE_fromDbTimestamp(t.unknownDocument.version);\n      n = MutableDocument.newUnknownDocument(e2, r);\n    }\n  }\n  return t.readTime && n.setReadTime(function __PRIVATE_fromDbTimestampKey(e2) {\n    const t2 = new Timestamp(e2[0], e2[1]);\n    return SnapshotVersion.fromTimestamp(t2);\n  }(t.readTime)), n;\n}\nfunction __PRIVATE_toDbRemoteDocument(e, t) {\n  const n = t.key,\n    r = {\n      prefixPath: n.getCollectionPath().popLast().toArray(),\n      collectionGroup: n.collectionGroup,\n      documentId: n.path.lastSegment(),\n      readTime: __PRIVATE_toDbTimestampKey(t.readTime),\n      hasCommittedMutations: t.hasCommittedMutations\n    };\n  if (t.isFoundDocument()) r.document = function __PRIVATE_toDocument(e2, t2) {\n    return {\n      name: __PRIVATE_toName(e2, t2.key),\n      fields: t2.data.value.mapValue.fields,\n      updateTime: toTimestamp(e2, t2.version.toTimestamp()),\n      createTime: toTimestamp(e2, t2.createTime.toTimestamp())\n    };\n  }(e.ut, t);else if (t.isNoDocument()) r.noDocument = {\n    path: n.path.toArray(),\n    readTime: __PRIVATE_toDbTimestamp(t.version)\n  };else {\n    if (!t.isUnknownDocument()) return fail();\n    r.unknownDocument = {\n      path: n.path.toArray(),\n      version: __PRIVATE_toDbTimestamp(t.version)\n    };\n  }\n  return r;\n}\nfunction __PRIVATE_toDbTimestampKey(e) {\n  const t = e.toTimestamp();\n  return [t.seconds, t.nanoseconds];\n}\nfunction __PRIVATE_toDbTimestamp(e) {\n  const t = e.toTimestamp();\n  return {\n    seconds: t.seconds,\n    nanoseconds: t.nanoseconds\n  };\n}\nfunction __PRIVATE_fromDbTimestamp(e) {\n  const t = new Timestamp(e.seconds, e.nanoseconds);\n  return SnapshotVersion.fromTimestamp(t);\n}\nfunction __PRIVATE_fromDbMutationBatch(e, t) {\n  const n = (t.baseMutations || []).map(t2 => __PRIVATE_fromMutation(e.ut, t2));\n  for (let e2 = 0; e2 < t.mutations.length - 1; ++e2) {\n    const n2 = t.mutations[e2];\n    if (e2 + 1 < t.mutations.length && void 0 !== t.mutations[e2 + 1].transform) {\n      const r2 = t.mutations[e2 + 1];\n      n2.updateTransforms = r2.transform.fieldTransforms, t.mutations.splice(e2 + 1, 1), ++e2;\n    }\n  }\n  const r = t.mutations.map(t2 => __PRIVATE_fromMutation(e.ut, t2)),\n    i = Timestamp.fromMillis(t.localWriteTimeMs);\n  return new MutationBatch(t.batchId, i, n, r);\n}\nfunction __PRIVATE_fromDbTarget(e) {\n  const t = __PRIVATE_fromDbTimestamp(e.readTime),\n    n = void 0 !== e.lastLimboFreeSnapshotVersion ? __PRIVATE_fromDbTimestamp(e.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();\n  let r;\n  return r = function __PRIVATE_isDocumentQuery(e2) {\n    return void 0 !== e2.documents;\n  }(e.query) ? function __PRIVATE_fromDocumentsTarget(e2) {\n    return __PRIVATE_hardAssert(1 === e2.documents.length), __PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(__PRIVATE_fromQueryPath(e2.documents[0])));\n  }(e.query) : function __PRIVATE_fromQueryTarget(e2) {\n    return __PRIVATE_queryToTarget(__PRIVATE_convertQueryTargetToQuery(e2));\n  }(e.query), new TargetData(r, e.targetId, \"TargetPurposeListen\", e.lastListenSequenceNumber, t, n, ByteString.fromBase64String(e.resumeToken));\n}\nfunction __PRIVATE_toDbTarget(e, t) {\n  const n = __PRIVATE_toDbTimestamp(t.snapshotVersion),\n    r = __PRIVATE_toDbTimestamp(t.lastLimboFreeSnapshotVersion);\n  let i;\n  i = __PRIVATE_targetIsDocumentTarget(t.target) ? __PRIVATE_toDocumentsTarget(e.ut, t.target) : __PRIVATE_toQueryTarget(e.ut, t.target);\n  const s = t.resumeToken.toBase64();\n  return {\n    targetId: t.targetId,\n    canonicalId: __PRIVATE_canonifyTarget(t.target),\n    readTime: n,\n    resumeToken: s,\n    lastListenSequenceNumber: t.sequenceNumber,\n    lastLimboFreeSnapshotVersion: r,\n    query: i\n  };\n}\nfunction __PRIVATE_fromBundledQuery(e) {\n  const t = __PRIVATE_convertQueryTargetToQuery({\n    parent: e.parent,\n    structuredQuery: e.structuredQuery\n  });\n  return \"LAST\" === e.limitType ? __PRIVATE_queryWithLimit(t, t.limit, \"L\") : t;\n}\nfunction __PRIVATE_fromDbDocumentOverlay(e, t) {\n  return new Overlay(t.largestBatchId, __PRIVATE_fromMutation(e.ut, t.overlayMutation));\n}\nfunction __PRIVATE_toDbDocumentOverlayKey(e, t) {\n  const n = t.path.lastSegment();\n  return [e, __PRIVATE_encodeResourcePath(t.path.popLast()), n];\n}\nfunction __PRIVATE_toDbIndexState(e, t, n, r) {\n  return {\n    indexId: e,\n    uid: t.uid || \"\",\n    sequenceNumber: n,\n    readTime: __PRIVATE_toDbTimestamp(r.readTime),\n    documentKey: __PRIVATE_encodeResourcePath(r.documentKey.path),\n    largestBatchId: r.largestBatchId\n  };\n}\nvar __PRIVATE_IndexedDbBundleCache = class {\n  getBundleMetadata(e, t) {\n    return __PRIVATE_bundlesStore(e).get(t).next(e2 => {\n      if (e2) return function __PRIVATE_fromDbBundle(e3) {\n        return {\n          id: e3.bundleId,\n          createTime: __PRIVATE_fromDbTimestamp(e3.createTime),\n          version: e3.version\n        };\n      }(e2);\n    });\n  }\n  saveBundleMetadata(e, t) {\n    return __PRIVATE_bundlesStore(e).put(function __PRIVATE_toDbBundle(e2) {\n      return {\n        bundleId: e2.id,\n        createTime: __PRIVATE_toDbTimestamp(__PRIVATE_fromVersion(e2.createTime)),\n        version: e2.version\n      };\n    }(t));\n  }\n  getNamedQuery(e, t) {\n    return __PRIVATE_namedQueriesStore(e).get(t).next(e2 => {\n      if (e2) return function __PRIVATE_fromDbNamedQuery(e3) {\n        return {\n          name: e3.name,\n          query: __PRIVATE_fromBundledQuery(e3.bundledQuery),\n          readTime: __PRIVATE_fromDbTimestamp(e3.readTime)\n        };\n      }(e2);\n    });\n  }\n  saveNamedQuery(e, t) {\n    return __PRIVATE_namedQueriesStore(e).put(function __PRIVATE_toDbNamedQuery(e2) {\n      return {\n        name: e2.name,\n        readTime: __PRIVATE_toDbTimestamp(__PRIVATE_fromVersion(e2.readTime)),\n        bundledQuery: e2.bundledQuery\n      };\n    }(t));\n  }\n};\nfunction __PRIVATE_bundlesStore(e) {\n  return __PRIVATE_getStore(e, \"bundles\");\n}\nfunction __PRIVATE_namedQueriesStore(e) {\n  return __PRIVATE_getStore(e, \"namedQueries\");\n}\nvar __PRIVATE_IndexedDbDocumentOverlayCache = class {\n  constructor(e, t) {\n    this.serializer = e, this.userId = t;\n  }\n  static ct(e, t) {\n    const n = t.uid || \"\";\n    return new __PRIVATE_IndexedDbDocumentOverlayCache(e, n);\n  }\n  getOverlay(e, t) {\n    return __PRIVATE_documentOverlayStore(e).get(__PRIVATE_toDbDocumentOverlayKey(this.userId, t)).next(e2 => e2 ? __PRIVATE_fromDbDocumentOverlay(this.serializer, e2) : null);\n  }\n  getOverlays(e, t) {\n    const n = __PRIVATE_newOverlayMap();\n    return PersistencePromise.forEach(t, t2 => this.getOverlay(e, t2).next(e2 => {\n      null !== e2 && n.set(t2, e2);\n    })).next(() => n);\n  }\n  saveOverlays(e, t, n) {\n    const r = [];\n    return n.forEach((n2, i) => {\n      const s = new Overlay(t, i);\n      r.push(this.lt(e, s));\n    }), PersistencePromise.waitFor(r);\n  }\n  removeOverlaysForBatchId(e, t, n) {\n    const r = /* @__PURE__ */new Set();\n    t.forEach(e2 => r.add(__PRIVATE_encodeResourcePath(e2.getCollectionPath())));\n    const i = [];\n    return r.forEach(t2 => {\n      const r2 = IDBKeyRange.bound([this.userId, t2, n], [this.userId, t2, n + 1], false, true);\n      i.push(__PRIVATE_documentOverlayStore(e).H(\"collectionPathOverlayIndex\", r2));\n    }), PersistencePromise.waitFor(i);\n  }\n  getOverlaysForCollection(e, t, n) {\n    const r = __PRIVATE_newOverlayMap(),\n      i = __PRIVATE_encodeResourcePath(t),\n      s = IDBKeyRange.bound([this.userId, i, n], [this.userId, i, Number.POSITIVE_INFINITY], true);\n    return __PRIVATE_documentOverlayStore(e).W(\"collectionPathOverlayIndex\", s).next(e2 => {\n      for (const t2 of e2) {\n        const e3 = __PRIVATE_fromDbDocumentOverlay(this.serializer, t2);\n        r.set(e3.getKey(), e3);\n      }\n      return r;\n    });\n  }\n  getOverlaysForCollectionGroup(e, t, n, r) {\n    const i = __PRIVATE_newOverlayMap();\n    let s;\n    const o = IDBKeyRange.bound([this.userId, t, n], [this.userId, t, Number.POSITIVE_INFINITY], true);\n    return __PRIVATE_documentOverlayStore(e).Y({\n      index: \"collectionGroupOverlayIndex\",\n      range: o\n    }, (e2, t2, n2) => {\n      const o2 = __PRIVATE_fromDbDocumentOverlay(this.serializer, t2);\n      i.size() < r || o2.largestBatchId === s ? (i.set(o2.getKey(), o2), s = o2.largestBatchId) : n2.done();\n    }).next(() => i);\n  }\n  lt(e, t) {\n    return __PRIVATE_documentOverlayStore(e).put(function __PRIVATE_toDbDocumentOverlay(e2, t2, n) {\n      const [r, i, s] = __PRIVATE_toDbDocumentOverlayKey(t2, n.mutation.key);\n      return {\n        userId: t2,\n        collectionPath: i,\n        documentId: s,\n        collectionGroup: n.mutation.key.getCollectionGroup(),\n        largestBatchId: n.largestBatchId,\n        overlayMutation: toMutation(e2.ut, n.mutation)\n      };\n    }(this.serializer, this.userId, t));\n  }\n};\nfunction __PRIVATE_documentOverlayStore(e) {\n  return __PRIVATE_getStore(e, \"documentOverlays\");\n}\nvar __PRIVATE_FirestoreIndexValueWriter = class {\n  constructor() {}\n  ht(e, t) {\n    this.Pt(e, t), t.It();\n  }\n  Pt(e, t) {\n    if (\"nullValue\" in e) this.Tt(t, 5);else if (\"booleanValue\" in e) this.Tt(t, 10), t.Et(e.booleanValue ? 1 : 0);else if (\"integerValue\" in e) this.Tt(t, 15), t.Et(__PRIVATE_normalizeNumber(e.integerValue));else if (\"doubleValue\" in e) {\n      const n = __PRIVATE_normalizeNumber(e.doubleValue);\n      isNaN(n) ? this.Tt(t, 13) : (this.Tt(t, 15), __PRIVATE_isNegativeZero(n) ? t.Et(0) : t.Et(n));\n    } else if (\"timestampValue\" in e) {\n      const n = e.timestampValue;\n      this.Tt(t, 20), \"string\" == typeof n ? t.dt(n) : (t.dt(`${n.seconds || \"\"}`), t.Et(n.nanos || 0));\n    } else if (\"stringValue\" in e) this.At(e.stringValue, t), this.Rt(t);else if (\"bytesValue\" in e) this.Tt(t, 30), t.Vt(__PRIVATE_normalizeByteString(e.bytesValue)), this.Rt(t);else if (\"referenceValue\" in e) this.ft(e.referenceValue, t);else if (\"geoPointValue\" in e) {\n      const n = e.geoPointValue;\n      this.Tt(t, 45), t.Et(n.latitude || 0), t.Et(n.longitude || 0);\n    } else \"mapValue\" in e ? __PRIVATE_isMaxValue(e) ? this.Tt(t, Number.MAX_SAFE_INTEGER) : (this.gt(e.mapValue, t), this.Rt(t)) : \"arrayValue\" in e ? (this.yt(e.arrayValue, t), this.Rt(t)) : fail();\n  }\n  At(e, t) {\n    this.Tt(t, 25), this.wt(e, t);\n  }\n  wt(e, t) {\n    t.dt(e);\n  }\n  gt(e, t) {\n    const n = e.fields || {};\n    this.Tt(t, 55);\n    for (const e2 of Object.keys(n)) this.At(e2, t), this.Pt(n[e2], t);\n  }\n  yt(e, t) {\n    const n = e.values || [];\n    this.Tt(t, 50);\n    for (const e2 of n) this.Pt(e2, t);\n  }\n  ft(e, t) {\n    this.Tt(t, 37);\n    DocumentKey.fromName(e).path.forEach(e2 => {\n      this.Tt(t, 60), this.wt(e2, t);\n    });\n  }\n  Tt(e, t) {\n    e.Et(t);\n  }\n  Rt(e) {\n    e.Et(2);\n  }\n};\n__PRIVATE_FirestoreIndexValueWriter.St = new __PRIVATE_FirestoreIndexValueWriter();\nfunction __PRIVATE_numberOfLeadingZerosInByte(e) {\n  if (0 === e) return 8;\n  let t = 0;\n  return e >> 4 == 0 && (t += 4, e <<= 4), e >> 6 == 0 && (t += 2, e <<= 2), e >> 7 == 0 && (t += 1), t;\n}\nfunction __PRIVATE_unsignedNumLength(e) {\n  const t = 64 - function __PRIVATE_numberOfLeadingZeros(e2) {\n    let t2 = 0;\n    for (let n = 0; n < 8; ++n) {\n      const r = __PRIVATE_numberOfLeadingZerosInByte(255 & e2[n]);\n      if (t2 += r, 8 !== r) break;\n    }\n    return t2;\n  }(e);\n  return Math.ceil(t / 8);\n}\nvar __PRIVATE_OrderedCodeWriter = class {\n  constructor() {\n    this.buffer = new Uint8Array(1024), this.position = 0;\n  }\n  bt(e) {\n    const t = e[Symbol.iterator]();\n    let n = t.next();\n    for (; !n.done;) this.Dt(n.value), n = t.next();\n    this.Ct();\n  }\n  vt(e) {\n    const t = e[Symbol.iterator]();\n    let n = t.next();\n    for (; !n.done;) this.Ft(n.value), n = t.next();\n    this.Mt();\n  }\n  xt(e) {\n    for (const t of e) {\n      const e2 = t.charCodeAt(0);\n      if (e2 < 128) this.Dt(e2);else if (e2 < 2048) this.Dt(960 | e2 >>> 6), this.Dt(128 | 63 & e2);else if (t < \"\\uD800\" || \"\\uDBFF\" < t) this.Dt(480 | e2 >>> 12), this.Dt(128 | 63 & e2 >>> 6), this.Dt(128 | 63 & e2);else {\n        const e3 = t.codePointAt(0);\n        this.Dt(240 | e3 >>> 18), this.Dt(128 | 63 & e3 >>> 12), this.Dt(128 | 63 & e3 >>> 6), this.Dt(128 | 63 & e3);\n      }\n    }\n    this.Ct();\n  }\n  Ot(e) {\n    for (const t of e) {\n      const e2 = t.charCodeAt(0);\n      if (e2 < 128) this.Ft(e2);else if (e2 < 2048) this.Ft(960 | e2 >>> 6), this.Ft(128 | 63 & e2);else if (t < \"\\uD800\" || \"\\uDBFF\" < t) this.Ft(480 | e2 >>> 12), this.Ft(128 | 63 & e2 >>> 6), this.Ft(128 | 63 & e2);else {\n        const e3 = t.codePointAt(0);\n        this.Ft(240 | e3 >>> 18), this.Ft(128 | 63 & e3 >>> 12), this.Ft(128 | 63 & e3 >>> 6), this.Ft(128 | 63 & e3);\n      }\n    }\n    this.Mt();\n  }\n  Nt(e) {\n    const t = this.Bt(e),\n      n = __PRIVATE_unsignedNumLength(t);\n    this.Lt(1 + n), this.buffer[this.position++] = 255 & n;\n    for (let e2 = t.length - n; e2 < t.length; ++e2) this.buffer[this.position++] = 255 & t[e2];\n  }\n  kt(e) {\n    const t = this.Bt(e),\n      n = __PRIVATE_unsignedNumLength(t);\n    this.Lt(1 + n), this.buffer[this.position++] = ~(255 & n);\n    for (let e2 = t.length - n; e2 < t.length; ++e2) this.buffer[this.position++] = ~(255 & t[e2]);\n  }\n  qt() {\n    this.Qt(255), this.Qt(255);\n  }\n  Kt() {\n    this.$t(255), this.$t(255);\n  }\n  reset() {\n    this.position = 0;\n  }\n  seed(e) {\n    this.Lt(e.length), this.buffer.set(e, this.position), this.position += e.length;\n  }\n  Ut() {\n    return this.buffer.slice(0, this.position);\n  }\n  Bt(e) {\n    const t = function __PRIVATE_doubleToLongBits(e2) {\n        const t2 = new DataView(new ArrayBuffer(8));\n        return t2.setFloat64(0, e2, false), new Uint8Array(t2.buffer);\n      }(e),\n      n = 0 != (128 & t[0]);\n    t[0] ^= n ? 255 : 128;\n    for (let e2 = 1; e2 < t.length; ++e2) t[e2] ^= n ? 255 : 0;\n    return t;\n  }\n  Dt(e) {\n    const t = 255 & e;\n    0 === t ? (this.Qt(0), this.Qt(255)) : 255 === t ? (this.Qt(255), this.Qt(0)) : this.Qt(t);\n  }\n  Ft(e) {\n    const t = 255 & e;\n    0 === t ? (this.$t(0), this.$t(255)) : 255 === t ? (this.$t(255), this.$t(0)) : this.$t(e);\n  }\n  Ct() {\n    this.Qt(0), this.Qt(1);\n  }\n  Mt() {\n    this.$t(0), this.$t(1);\n  }\n  Qt(e) {\n    this.Lt(1), this.buffer[this.position++] = e;\n  }\n  $t(e) {\n    this.Lt(1), this.buffer[this.position++] = ~e;\n  }\n  Lt(e) {\n    const t = e + this.position;\n    if (t <= this.buffer.length) return;\n    let n = 2 * this.buffer.length;\n    n < t && (n = t);\n    const r = new Uint8Array(n);\n    r.set(this.buffer), this.buffer = r;\n  }\n};\nvar __PRIVATE_AscendingIndexByteEncoder = class {\n  constructor(e) {\n    this.Wt = e;\n  }\n  Vt(e) {\n    this.Wt.bt(e);\n  }\n  dt(e) {\n    this.Wt.xt(e);\n  }\n  Et(e) {\n    this.Wt.Nt(e);\n  }\n  It() {\n    this.Wt.qt();\n  }\n};\nvar __PRIVATE_DescendingIndexByteEncoder = class {\n  constructor(e) {\n    this.Wt = e;\n  }\n  Vt(e) {\n    this.Wt.vt(e);\n  }\n  dt(e) {\n    this.Wt.Ot(e);\n  }\n  Et(e) {\n    this.Wt.kt(e);\n  }\n  It() {\n    this.Wt.Kt();\n  }\n};\nvar __PRIVATE_IndexByteEncoder = class {\n  constructor() {\n    this.Wt = new __PRIVATE_OrderedCodeWriter(), this.Gt = new __PRIVATE_AscendingIndexByteEncoder(this.Wt), this.zt = new __PRIVATE_DescendingIndexByteEncoder(this.Wt);\n  }\n  seed(e) {\n    this.Wt.seed(e);\n  }\n  jt(e) {\n    return 0 === e ? this.Gt : this.zt;\n  }\n  Ut() {\n    return this.Wt.Ut();\n  }\n  reset() {\n    this.Wt.reset();\n  }\n};\nvar __PRIVATE_IndexEntry = class {\n  constructor(e, t, n, r) {\n    this.indexId = e, this.documentKey = t, this.arrayValue = n, this.directionalValue = r;\n  }\n  Ht() {\n    const e = this.directionalValue.length,\n      t = 0 === e || 255 === this.directionalValue[e - 1] ? e + 1 : e,\n      n = new Uint8Array(t);\n    return n.set(this.directionalValue, 0), t !== e ? n.set([0], this.directionalValue.length) : ++n[n.length - 1], new __PRIVATE_IndexEntry(this.indexId, this.documentKey, this.arrayValue, n);\n  }\n};\nfunction __PRIVATE_indexEntryComparator(e, t) {\n  let n = e.indexId - t.indexId;\n  return 0 !== n ? n : (n = __PRIVATE_compareByteArrays(e.arrayValue, t.arrayValue), 0 !== n ? n : (n = __PRIVATE_compareByteArrays(e.directionalValue, t.directionalValue), 0 !== n ? n : DocumentKey.comparator(e.documentKey, t.documentKey)));\n}\nfunction __PRIVATE_compareByteArrays(e, t) {\n  for (let n = 0; n < e.length && n < t.length; ++n) {\n    const r = e[n] - t[n];\n    if (0 !== r) return r;\n  }\n  return e.length - t.length;\n}\nvar __PRIVATE_TargetIndexMatcher = class {\n  constructor(e) {\n    this.Jt = new SortedSet((e2, t) => FieldPath$1.comparator(e2.field, t.field)), this.collectionId = null != e.collectionGroup ? e.collectionGroup : e.path.lastSegment(), this.Yt = e.orderBy, this.Zt = [];\n    for (const t of e.filters) {\n      const e2 = t;\n      e2.isInequality() ? this.Jt = this.Jt.add(e2) : this.Zt.push(e2);\n    }\n  }\n  get Xt() {\n    return this.Jt.size > 1;\n  }\n  en(e) {\n    if (__PRIVATE_hardAssert(e.collectionGroup === this.collectionId), this.Xt) return false;\n    const t = __PRIVATE_fieldIndexGetArraySegment(e);\n    if (void 0 !== t && !this.tn(t)) return false;\n    const n = __PRIVATE_fieldIndexGetDirectionalSegments(e);\n    let r = /* @__PURE__ */new Set(),\n      i = 0,\n      s = 0;\n    for (; i < n.length && this.tn(n[i]); ++i) r = r.add(n[i].fieldPath.canonicalString());\n    if (i === n.length) return true;\n    if (this.Jt.size > 0) {\n      const e2 = this.Jt.getIterator().getNext();\n      if (!r.has(e2.field.canonicalString())) {\n        const t2 = n[i];\n        if (!this.nn(e2, t2) || !this.rn(this.Yt[s++], t2)) return false;\n      }\n      ++i;\n    }\n    for (; i < n.length; ++i) {\n      const e2 = n[i];\n      if (s >= this.Yt.length || !this.rn(this.Yt[s++], e2)) return false;\n    }\n    return true;\n  }\n  sn() {\n    if (this.Xt) return null;\n    let e = new SortedSet(FieldPath$1.comparator);\n    const t = [];\n    for (const n of this.Zt) {\n      if (n.field.isKeyField()) continue;\n      if (\"array-contains\" === n.op || \"array-contains-any\" === n.op) t.push(new IndexSegment(n.field, 2));else {\n        if (e.has(n.field)) continue;\n        e = e.add(n.field), t.push(new IndexSegment(n.field, 0));\n      }\n    }\n    for (const n of this.Yt) n.field.isKeyField() || e.has(n.field) || (e = e.add(n.field), t.push(new IndexSegment(n.field, \"asc\" === n.dir ? 0 : 1)));\n    return new FieldIndex(FieldIndex.UNKNOWN_ID, this.collectionId, t, IndexState.empty());\n  }\n  tn(e) {\n    for (const t of this.Zt) if (this.nn(t, e)) return true;\n    return false;\n  }\n  nn(e, t) {\n    if (void 0 === e || !e.field.isEqual(t.fieldPath)) return false;\n    const n = \"array-contains\" === e.op || \"array-contains-any\" === e.op;\n    return 2 === t.kind === n;\n  }\n  rn(e, t) {\n    return !!e.field.isEqual(t.fieldPath) && (0 === t.kind && \"asc\" === e.dir || 1 === t.kind && \"desc\" === e.dir);\n  }\n};\nfunction __PRIVATE_computeInExpansion(e) {\n  var t, n;\n  if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), e instanceof FieldFilter) {\n    if (e instanceof __PRIVATE_InFilter) {\n      const r2 = (null === (n = null === (t = e.value.arrayValue) || void 0 === t ? void 0 : t.values) || void 0 === n ? void 0 : n.map(t2 => FieldFilter.create(e.field, \"==\", t2))) || [];\n      return CompositeFilter.create(r2, \"or\");\n    }\n    return e;\n  }\n  const r = e.filters.map(e2 => __PRIVATE_computeInExpansion(e2));\n  return CompositeFilter.create(r, e.op);\n}\nfunction __PRIVATE_getDnfTerms(e) {\n  if (0 === e.getFilters().length) return [];\n  const t = __PRIVATE_computeDistributedNormalForm(__PRIVATE_computeInExpansion(e));\n  return __PRIVATE_hardAssert(__PRIVATE_isDisjunctiveNormalForm(t)), __PRIVATE_isSingleFieldFilter(t) || __PRIVATE_isFlatConjunction(t) ? [t] : t.getFilters();\n}\nfunction __PRIVATE_isSingleFieldFilter(e) {\n  return e instanceof FieldFilter;\n}\nfunction __PRIVATE_isFlatConjunction(e) {\n  return e instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(e);\n}\nfunction __PRIVATE_isDisjunctiveNormalForm(e) {\n  return __PRIVATE_isSingleFieldFilter(e) || __PRIVATE_isFlatConjunction(e) || function __PRIVATE_isDisjunctionOfFieldFiltersAndFlatConjunctions(e2) {\n    if (e2 instanceof CompositeFilter && __PRIVATE_compositeFilterIsDisjunction(e2)) {\n      for (const t of e2.getFilters()) if (!__PRIVATE_isSingleFieldFilter(t) && !__PRIVATE_isFlatConjunction(t)) return false;\n      return true;\n    }\n    return false;\n  }(e);\n}\nfunction __PRIVATE_computeDistributedNormalForm(e) {\n  if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), e instanceof FieldFilter) return e;\n  if (1 === e.filters.length) return __PRIVATE_computeDistributedNormalForm(e.filters[0]);\n  const t = e.filters.map(e2 => __PRIVATE_computeDistributedNormalForm(e2));\n  let n = CompositeFilter.create(t, e.op);\n  return n = __PRIVATE_applyAssociation(n), __PRIVATE_isDisjunctiveNormalForm(n) ? n : (__PRIVATE_hardAssert(n instanceof CompositeFilter), __PRIVATE_hardAssert(__PRIVATE_compositeFilterIsConjunction(n)), __PRIVATE_hardAssert(n.filters.length > 1), n.filters.reduce((e2, t2) => __PRIVATE_applyDistribution(e2, t2)));\n}\nfunction __PRIVATE_applyDistribution(e, t) {\n  let n;\n  return __PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), __PRIVATE_hardAssert(t instanceof FieldFilter || t instanceof CompositeFilter), n = e instanceof FieldFilter ? t instanceof FieldFilter ? function __PRIVATE_applyDistributionFieldFilters(e2, t2) {\n    return CompositeFilter.create([e2, t2], \"and\");\n  }(e, t) : __PRIVATE_applyDistributionFieldAndCompositeFilters(e, t) : t instanceof FieldFilter ? __PRIVATE_applyDistributionFieldAndCompositeFilters(t, e) : function __PRIVATE_applyDistributionCompositeFilters(e2, t2) {\n    if (__PRIVATE_hardAssert(e2.filters.length > 0 && t2.filters.length > 0), __PRIVATE_compositeFilterIsConjunction(e2) && __PRIVATE_compositeFilterIsConjunction(t2)) return __PRIVATE_compositeFilterWithAddedFilters(e2, t2.getFilters());\n    const n2 = __PRIVATE_compositeFilterIsDisjunction(e2) ? e2 : t2,\n      r = __PRIVATE_compositeFilterIsDisjunction(e2) ? t2 : e2,\n      i = n2.filters.map(e3 => __PRIVATE_applyDistribution(e3, r));\n    return CompositeFilter.create(i, \"or\");\n  }(e, t), __PRIVATE_applyAssociation(n);\n}\nfunction __PRIVATE_applyDistributionFieldAndCompositeFilters(e, t) {\n  if (__PRIVATE_compositeFilterIsConjunction(t)) return __PRIVATE_compositeFilterWithAddedFilters(t, e.getFilters());\n  {\n    const n = t.filters.map(t2 => __PRIVATE_applyDistribution(e, t2));\n    return CompositeFilter.create(n, \"or\");\n  }\n}\nfunction __PRIVATE_applyAssociation(e) {\n  if (__PRIVATE_hardAssert(e instanceof FieldFilter || e instanceof CompositeFilter), e instanceof FieldFilter) return e;\n  const t = e.getFilters();\n  if (1 === t.length) return __PRIVATE_applyAssociation(t[0]);\n  if (__PRIVATE_compositeFilterIsFlat(e)) return e;\n  const n = t.map(e2 => __PRIVATE_applyAssociation(e2)),\n    r = [];\n  return n.forEach(t2 => {\n    t2 instanceof FieldFilter ? r.push(t2) : t2 instanceof CompositeFilter && (t2.op === e.op ? r.push(...t2.filters) : r.push(t2));\n  }), 1 === r.length ? r[0] : CompositeFilter.create(r, e.op);\n}\nvar __PRIVATE_MemoryIndexManager = class {\n  constructor() {\n    this.on = new __PRIVATE_MemoryCollectionParentIndex();\n  }\n  addToCollectionParentIndex(e, t) {\n    return this.on.add(t), PersistencePromise.resolve();\n  }\n  getCollectionParents(e, t) {\n    return PersistencePromise.resolve(this.on.getEntries(t));\n  }\n  addFieldIndex(e, t) {\n    return PersistencePromise.resolve();\n  }\n  deleteFieldIndex(e, t) {\n    return PersistencePromise.resolve();\n  }\n  deleteAllFieldIndexes(e) {\n    return PersistencePromise.resolve();\n  }\n  createTargetIndexes(e, t) {\n    return PersistencePromise.resolve();\n  }\n  getDocumentsMatchingTarget(e, t) {\n    return PersistencePromise.resolve(null);\n  }\n  getIndexType(e, t) {\n    return PersistencePromise.resolve(0);\n  }\n  getFieldIndexes(e, t) {\n    return PersistencePromise.resolve([]);\n  }\n  getNextCollectionGroupToUpdate(e) {\n    return PersistencePromise.resolve(null);\n  }\n  getMinOffset(e, t) {\n    return PersistencePromise.resolve(IndexOffset.min());\n  }\n  getMinOffsetFromCollectionGroup(e, t) {\n    return PersistencePromise.resolve(IndexOffset.min());\n  }\n  updateCollectionGroup(e, t, n) {\n    return PersistencePromise.resolve();\n  }\n  updateIndexEntries(e, t) {\n    return PersistencePromise.resolve();\n  }\n};\nvar __PRIVATE_MemoryCollectionParentIndex = class {\n  constructor() {\n    this.index = {};\n  }\n  add(e) {\n    const t = e.lastSegment(),\n      n = e.popLast(),\n      r = this.index[t] || new SortedSet(ResourcePath.comparator),\n      i = !r.has(n);\n    return this.index[t] = r.add(n), i;\n  }\n  has(e) {\n    const t = e.lastSegment(),\n      n = e.popLast(),\n      r = this.index[t];\n    return r && r.has(n);\n  }\n  getEntries(e) {\n    return (this.index[e] || new SortedSet(ResourcePath.comparator)).toArray();\n  }\n};\nvar Ee = new Uint8Array(0);\nvar __PRIVATE_IndexedDbIndexManager = class {\n  constructor(e, t) {\n    this.user = e, this.databaseId = t, this._n = new __PRIVATE_MemoryCollectionParentIndex(), this.an = new ObjectMap(e2 => __PRIVATE_canonifyTarget(e2), (e2, t2) => __PRIVATE_targetEquals(e2, t2)), this.uid = e.uid || \"\";\n  }\n  addToCollectionParentIndex(e, t) {\n    if (!this._n.has(t)) {\n      const n = t.lastSegment(),\n        r = t.popLast();\n      e.addOnCommittedListener(() => {\n        this._n.add(t);\n      });\n      const i = {\n        collectionId: n,\n        parent: __PRIVATE_encodeResourcePath(r)\n      };\n      return __PRIVATE_collectionParentsStore(e).put(i);\n    }\n    return PersistencePromise.resolve();\n  }\n  getCollectionParents(e, t) {\n    const n = [],\n      r = IDBKeyRange.bound([t, \"\"], [__PRIVATE_immediateSuccessor(t), \"\"], false, true);\n    return __PRIVATE_collectionParentsStore(e).W(r).next(e2 => {\n      for (const r2 of e2) {\n        if (r2.collectionId !== t) break;\n        n.push(__PRIVATE_decodeResourcePath(r2.parent));\n      }\n      return n;\n    });\n  }\n  addFieldIndex(e, t) {\n    const n = __PRIVATE_indexConfigurationStore(e),\n      r = function __PRIVATE_toDbIndexConfiguration(e2) {\n        return {\n          indexId: e2.indexId,\n          collectionGroup: e2.collectionGroup,\n          fields: e2.fields.map(e3 => [e3.fieldPath.canonicalString(), e3.kind])\n        };\n      }(t);\n    delete r.indexId;\n    const i = n.add(r);\n    if (t.indexState) {\n      const n2 = __PRIVATE_indexStateStore(e);\n      return i.next(e2 => {\n        n2.put(__PRIVATE_toDbIndexState(e2, this.user, t.indexState.sequenceNumber, t.indexState.offset));\n      });\n    }\n    return i.next();\n  }\n  deleteFieldIndex(e, t) {\n    const n = __PRIVATE_indexConfigurationStore(e),\n      r = __PRIVATE_indexStateStore(e),\n      i = __PRIVATE_indexEntriesStore(e);\n    return n.delete(t.indexId).next(() => r.delete(IDBKeyRange.bound([t.indexId], [t.indexId + 1], false, true))).next(() => i.delete(IDBKeyRange.bound([t.indexId], [t.indexId + 1], false, true)));\n  }\n  deleteAllFieldIndexes(e) {\n    const t = __PRIVATE_indexConfigurationStore(e),\n      n = __PRIVATE_indexEntriesStore(e),\n      r = __PRIVATE_indexStateStore(e);\n    return t.H().next(() => n.H()).next(() => r.H());\n  }\n  createTargetIndexes(e, t) {\n    return PersistencePromise.forEach(this.un(t), t2 => this.getIndexType(e, t2).next(n => {\n      if (0 === n || 1 === n) {\n        const n2 = new __PRIVATE_TargetIndexMatcher(t2).sn();\n        if (null != n2) return this.addFieldIndex(e, n2);\n      }\n    }));\n  }\n  getDocumentsMatchingTarget(e, t) {\n    const n = __PRIVATE_indexEntriesStore(e);\n    let r = true;\n    const i = /* @__PURE__ */new Map();\n    return PersistencePromise.forEach(this.un(t), t2 => this.cn(e, t2).next(e2 => {\n      r && (r = !!e2), i.set(t2, e2);\n    })).next(() => {\n      if (r) {\n        let e2 = __PRIVATE_documentKeySet();\n        const r2 = [];\n        return PersistencePromise.forEach(i, (i2, s) => {\n          __PRIVATE_logDebug(\"IndexedDbIndexManager\", `Using index ${function __PRIVATE_fieldIndexToString(e3) {\n            return `id=${e3.indexId}|cg=${e3.collectionGroup}|f=${e3.fields.map(e4 => `${e4.fieldPath}:${e4.kind}`).join(\",\")}`;\n          }(i2)} to execute ${__PRIVATE_canonifyTarget(t)}`);\n          const o = function __PRIVATE_targetGetArrayValues(e3, t2) {\n              const n2 = __PRIVATE_fieldIndexGetArraySegment(t2);\n              if (void 0 === n2) return null;\n              for (const t3 of __PRIVATE_targetGetFieldFiltersForPath(e3, n2.fieldPath)) switch (t3.op) {\n                case \"array-contains-any\":\n                  return t3.value.arrayValue.values || [];\n                case \"array-contains\":\n                  return [t3.value];\n              }\n              return null;\n            }(s, i2),\n            _ = function __PRIVATE_targetGetNotInValues(e3, t2) {\n              const n2 = /* @__PURE__ */new Map();\n              for (const r3 of __PRIVATE_fieldIndexGetDirectionalSegments(t2)) for (const t3 of __PRIVATE_targetGetFieldFiltersForPath(e3, r3.fieldPath)) switch (t3.op) {\n                case \"==\":\n                case \"in\":\n                  n2.set(r3.fieldPath.canonicalString(), t3.value);\n                  break;\n                case \"not-in\":\n                case \"!=\":\n                  return n2.set(r3.fieldPath.canonicalString(), t3.value), Array.from(n2.values());\n              }\n              return null;\n            }(s, i2),\n            a = function __PRIVATE_targetGetLowerBound(e3, t2) {\n              const n2 = [];\n              let r3 = true;\n              for (const i3 of __PRIVATE_fieldIndexGetDirectionalSegments(t2)) {\n                const t3 = 0 === i3.kind ? __PRIVATE_targetGetAscendingBound(e3, i3.fieldPath, e3.startAt) : __PRIVATE_targetGetDescendingBound(e3, i3.fieldPath, e3.startAt);\n                n2.push(t3.value), r3 && (r3 = t3.inclusive);\n              }\n              return new Bound(n2, r3);\n            }(s, i2),\n            u = function __PRIVATE_targetGetUpperBound(e3, t2) {\n              const n2 = [];\n              let r3 = true;\n              for (const i3 of __PRIVATE_fieldIndexGetDirectionalSegments(t2)) {\n                const t3 = 0 === i3.kind ? __PRIVATE_targetGetDescendingBound(e3, i3.fieldPath, e3.endAt) : __PRIVATE_targetGetAscendingBound(e3, i3.fieldPath, e3.endAt);\n                n2.push(t3.value), r3 && (r3 = t3.inclusive);\n              }\n              return new Bound(n2, r3);\n            }(s, i2),\n            c = this.ln(i2, s, a),\n            l = this.ln(i2, s, u),\n            h = this.hn(i2, s, _),\n            P = this.Pn(i2.indexId, o, c, a.inclusive, l, u.inclusive, h);\n          return PersistencePromise.forEach(P, i3 => n.j(i3, t.limit).next(t2 => {\n            t2.forEach(t3 => {\n              const n2 = DocumentKey.fromSegments(t3.documentKey);\n              e2.has(n2) || (e2 = e2.add(n2), r2.push(n2));\n            });\n          }));\n        }).next(() => r2);\n      }\n      return PersistencePromise.resolve(null);\n    });\n  }\n  un(e) {\n    let t = this.an.get(e);\n    if (t) return t;\n    if (0 === e.filters.length) t = [e];else {\n      t = __PRIVATE_getDnfTerms(CompositeFilter.create(e.filters, \"and\")).map(t2 => __PRIVATE_newTarget(e.path, e.collectionGroup, e.orderBy, t2.getFilters(), e.limit, e.startAt, e.endAt));\n    }\n    return this.an.set(e, t), t;\n  }\n  Pn(e, t, n, r, i, s, o) {\n    const _ = (null != t ? t.length : 1) * Math.max(n.length, i.length),\n      a = _ / (null != t ? t.length : 1),\n      u = [];\n    for (let c = 0; c < _; ++c) {\n      const _2 = t ? this.In(t[c / a]) : Ee,\n        l = this.Tn(e, _2, n[c % a], r),\n        h = this.En(e, _2, i[c % a], s),\n        P = o.map(t2 => this.Tn(e, _2, t2, true));\n      u.push(...this.createRange(l, h, P));\n    }\n    return u;\n  }\n  Tn(e, t, n, r) {\n    const i = new __PRIVATE_IndexEntry(e, DocumentKey.empty(), t, n);\n    return r ? i : i.Ht();\n  }\n  En(e, t, n, r) {\n    const i = new __PRIVATE_IndexEntry(e, DocumentKey.empty(), t, n);\n    return r ? i.Ht() : i;\n  }\n  cn(e, t) {\n    const n = new __PRIVATE_TargetIndexMatcher(t),\n      r = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment();\n    return this.getFieldIndexes(e, r).next(e2 => {\n      let t2 = null;\n      for (const r2 of e2) {\n        n.en(r2) && (!t2 || r2.fields.length > t2.fields.length) && (t2 = r2);\n      }\n      return t2;\n    });\n  }\n  getIndexType(e, t) {\n    let n = 2;\n    const r = this.un(t);\n    return PersistencePromise.forEach(r, t2 => this.cn(e, t2).next(e2 => {\n      e2 ? 0 !== n && e2.fields.length < function __PRIVATE_targetGetSegmentCount(e3) {\n        let t3 = new SortedSet(FieldPath$1.comparator),\n          n2 = false;\n        for (const r2 of e3.filters) for (const e4 of r2.getFlattenedFilters()) e4.field.isKeyField() || (\"array-contains\" === e4.op || \"array-contains-any\" === e4.op ? n2 = true : t3 = t3.add(e4.field));\n        for (const n3 of e3.orderBy) n3.field.isKeyField() || (t3 = t3.add(n3.field));\n        return t3.size + (n2 ? 1 : 0);\n      }(t2) && (n = 1) : n = 0;\n    })).next(() => function __PRIVATE_targetHasLimit(e2) {\n      return null !== e2.limit;\n    }(t) && r.length > 1 && 2 === n ? 1 : n);\n  }\n  dn(e, t) {\n    const n = new __PRIVATE_IndexByteEncoder();\n    for (const r of __PRIVATE_fieldIndexGetDirectionalSegments(e)) {\n      const e2 = t.data.field(r.fieldPath);\n      if (null == e2) return null;\n      const i = n.jt(r.kind);\n      __PRIVATE_FirestoreIndexValueWriter.St.ht(e2, i);\n    }\n    return n.Ut();\n  }\n  In(e) {\n    const t = new __PRIVATE_IndexByteEncoder();\n    return __PRIVATE_FirestoreIndexValueWriter.St.ht(e, t.jt(0)), t.Ut();\n  }\n  An(e, t) {\n    const n = new __PRIVATE_IndexByteEncoder();\n    return __PRIVATE_FirestoreIndexValueWriter.St.ht(__PRIVATE_refValue(this.databaseId, t), n.jt(function __PRIVATE_fieldIndexGetKeyOrder(e2) {\n      const t2 = __PRIVATE_fieldIndexGetDirectionalSegments(e2);\n      return 0 === t2.length ? 0 : t2[t2.length - 1].kind;\n    }(e))), n.Ut();\n  }\n  hn(e, t, n) {\n    if (null === n) return [];\n    let r = [];\n    r.push(new __PRIVATE_IndexByteEncoder());\n    let i = 0;\n    for (const s of __PRIVATE_fieldIndexGetDirectionalSegments(e)) {\n      const e2 = n[i++];\n      for (const n2 of r) if (this.Rn(t, s.fieldPath) && isArray(e2)) r = this.Vn(r, s, e2);else {\n        const t2 = n2.jt(s.kind);\n        __PRIVATE_FirestoreIndexValueWriter.St.ht(e2, t2);\n      }\n    }\n    return this.mn(r);\n  }\n  ln(e, t, n) {\n    return this.hn(e, t, n.position);\n  }\n  mn(e) {\n    const t = [];\n    for (let n = 0; n < e.length; ++n) t[n] = e[n].Ut();\n    return t;\n  }\n  Vn(e, t, n) {\n    const r = [...e],\n      i = [];\n    for (const e2 of n.arrayValue.values || []) for (const n2 of r) {\n      const r2 = new __PRIVATE_IndexByteEncoder();\n      r2.seed(n2.Ut()), __PRIVATE_FirestoreIndexValueWriter.St.ht(e2, r2.jt(t.kind)), i.push(r2);\n    }\n    return i;\n  }\n  Rn(e, t) {\n    return !!e.filters.find(e2 => e2 instanceof FieldFilter && e2.field.isEqual(t) && (\"in\" === e2.op || \"not-in\" === e2.op));\n  }\n  getFieldIndexes(e, t) {\n    const n = __PRIVATE_indexConfigurationStore(e),\n      r = __PRIVATE_indexStateStore(e);\n    return (t ? n.W(\"collectionGroupIndex\", IDBKeyRange.bound(t, t)) : n.W()).next(e2 => {\n      const t2 = [];\n      return PersistencePromise.forEach(e2, e3 => r.get([e3.indexId, this.uid]).next(n2 => {\n        t2.push(function __PRIVATE_fromDbIndexConfiguration(e4, t3) {\n          const n3 = t3 ? new IndexState(t3.sequenceNumber, new IndexOffset(__PRIVATE_fromDbTimestamp(t3.readTime), new DocumentKey(__PRIVATE_decodeResourcePath(t3.documentKey)), t3.largestBatchId)) : IndexState.empty(),\n            r2 = e4.fields.map(([e5, t4]) => new IndexSegment(FieldPath$1.fromServerFormat(e5), t4));\n          return new FieldIndex(e4.indexId, e4.collectionGroup, r2, n3);\n        }(e3, n2));\n      })).next(() => t2);\n    });\n  }\n  getNextCollectionGroupToUpdate(e) {\n    return this.getFieldIndexes(e).next(e2 => 0 === e2.length ? null : (e2.sort((e3, t) => {\n      const n = e3.indexState.sequenceNumber - t.indexState.sequenceNumber;\n      return 0 !== n ? n : __PRIVATE_primitiveComparator(e3.collectionGroup, t.collectionGroup);\n    }), e2[0].collectionGroup));\n  }\n  updateCollectionGroup(e, t, n) {\n    const r = __PRIVATE_indexConfigurationStore(e),\n      i = __PRIVATE_indexStateStore(e);\n    return this.fn(e).next(e2 => r.W(\"collectionGroupIndex\", IDBKeyRange.bound(t, t)).next(t2 => PersistencePromise.forEach(t2, t3 => i.put(__PRIVATE_toDbIndexState(t3.indexId, this.user, e2, n)))));\n  }\n  updateIndexEntries(e, t) {\n    const n = /* @__PURE__ */new Map();\n    return PersistencePromise.forEach(t, (t2, r) => {\n      const i = n.get(t2.collectionGroup);\n      return (i ? PersistencePromise.resolve(i) : this.getFieldIndexes(e, t2.collectionGroup)).next(i2 => (n.set(t2.collectionGroup, i2), PersistencePromise.forEach(i2, n2 => this.gn(e, t2, n2).next(t3 => {\n        const i3 = this.pn(r, n2);\n        return t3.isEqual(i3) ? PersistencePromise.resolve() : this.yn(e, r, n2, t3, i3);\n      }))));\n    });\n  }\n  wn(e, t, n, r) {\n    return __PRIVATE_indexEntriesStore(e).put({\n      indexId: r.indexId,\n      uid: this.uid,\n      arrayValue: r.arrayValue,\n      directionalValue: r.directionalValue,\n      orderedDocumentKey: this.An(n, t.key),\n      documentKey: t.key.path.toArray()\n    });\n  }\n  Sn(e, t, n, r) {\n    return __PRIVATE_indexEntriesStore(e).delete([r.indexId, this.uid, r.arrayValue, r.directionalValue, this.An(n, t.key), t.key.path.toArray()]);\n  }\n  gn(e, t, n) {\n    const r = __PRIVATE_indexEntriesStore(e);\n    let i = new SortedSet(__PRIVATE_indexEntryComparator);\n    return r.Y({\n      index: \"documentKeyIndex\",\n      range: IDBKeyRange.only([n.indexId, this.uid, this.An(n, t)])\n    }, (e2, r2) => {\n      i = i.add(new __PRIVATE_IndexEntry(n.indexId, t, r2.arrayValue, r2.directionalValue));\n    }).next(() => i);\n  }\n  pn(e, t) {\n    let n = new SortedSet(__PRIVATE_indexEntryComparator);\n    const r = this.dn(t, e);\n    if (null == r) return n;\n    const i = __PRIVATE_fieldIndexGetArraySegment(t);\n    if (null != i) {\n      const s = e.data.field(i.fieldPath);\n      if (isArray(s)) for (const i2 of s.arrayValue.values || []) n = n.add(new __PRIVATE_IndexEntry(t.indexId, e.key, this.In(i2), r));\n    } else n = n.add(new __PRIVATE_IndexEntry(t.indexId, e.key, Ee, r));\n    return n;\n  }\n  yn(e, t, n, r, i) {\n    __PRIVATE_logDebug(\"IndexedDbIndexManager\", \"Updating index entries for document '%s'\", t.key);\n    const s = [];\n    return function __PRIVATE_diffSortedSets(e2, t2, n2, r2, i2) {\n      const s2 = e2.getIterator(),\n        o = t2.getIterator();\n      let _ = __PRIVATE_advanceIterator(s2),\n        a = __PRIVATE_advanceIterator(o);\n      for (; _ || a;) {\n        let e3 = false,\n          t3 = false;\n        if (_ && a) {\n          const r3 = n2(_, a);\n          r3 < 0 ? t3 = true : r3 > 0 && (e3 = true);\n        } else null != _ ? t3 = true : e3 = true;\n        e3 ? (r2(a), a = __PRIVATE_advanceIterator(o)) : t3 ? (i2(_), _ = __PRIVATE_advanceIterator(s2)) : (_ = __PRIVATE_advanceIterator(s2), a = __PRIVATE_advanceIterator(o));\n      }\n    }(r, i, __PRIVATE_indexEntryComparator, r2 => {\n      s.push(this.wn(e, t, n, r2));\n    }, r2 => {\n      s.push(this.Sn(e, t, n, r2));\n    }), PersistencePromise.waitFor(s);\n  }\n  fn(e) {\n    let t = 1;\n    return __PRIVATE_indexStateStore(e).Y({\n      index: \"sequenceNumberIndex\",\n      reverse: true,\n      range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])\n    }, (e2, n, r) => {\n      r.done(), t = n.sequenceNumber + 1;\n    }).next(() => t);\n  }\n  createRange(e, t, n) {\n    n = n.sort((e2, t2) => __PRIVATE_indexEntryComparator(e2, t2)).filter((e2, t2, n2) => !t2 || 0 !== __PRIVATE_indexEntryComparator(e2, n2[t2 - 1]));\n    const r = [];\n    r.push(e);\n    for (const i2 of n) {\n      const n2 = __PRIVATE_indexEntryComparator(i2, e),\n        s = __PRIVATE_indexEntryComparator(i2, t);\n      if (0 === n2) r[0] = e.Ht();else if (n2 > 0 && s < 0) r.push(i2), r.push(i2.Ht());else if (s > 0) break;\n    }\n    r.push(t);\n    const i = [];\n    for (let e2 = 0; e2 < r.length; e2 += 2) {\n      if (this.bn(r[e2], r[e2 + 1])) return [];\n      const t2 = [r[e2].indexId, this.uid, r[e2].arrayValue, r[e2].directionalValue, Ee, []],\n        n2 = [r[e2 + 1].indexId, this.uid, r[e2 + 1].arrayValue, r[e2 + 1].directionalValue, Ee, []];\n      i.push(IDBKeyRange.bound(t2, n2));\n    }\n    return i;\n  }\n  bn(e, t) {\n    return __PRIVATE_indexEntryComparator(e, t) > 0;\n  }\n  getMinOffsetFromCollectionGroup(e, t) {\n    return this.getFieldIndexes(e, t).next(__PRIVATE_getMinOffsetFromFieldIndexes);\n  }\n  getMinOffset(e, t) {\n    return PersistencePromise.mapArray(this.un(t), t2 => this.cn(e, t2).next(e2 => e2 || fail())).next(__PRIVATE_getMinOffsetFromFieldIndexes);\n  }\n};\nfunction __PRIVATE_collectionParentsStore(e) {\n  return __PRIVATE_getStore(e, \"collectionParents\");\n}\nfunction __PRIVATE_indexEntriesStore(e) {\n  return __PRIVATE_getStore(e, \"indexEntries\");\n}\nfunction __PRIVATE_indexConfigurationStore(e) {\n  return __PRIVATE_getStore(e, \"indexConfiguration\");\n}\nfunction __PRIVATE_indexStateStore(e) {\n  return __PRIVATE_getStore(e, \"indexState\");\n}\nfunction __PRIVATE_getMinOffsetFromFieldIndexes(e) {\n  __PRIVATE_hardAssert(0 !== e.length);\n  let t = e[0].indexState.offset,\n    n = t.largestBatchId;\n  for (let r = 1; r < e.length; r++) {\n    const i = e[r].indexState.offset;\n    __PRIVATE_indexOffsetComparator(i, t) < 0 && (t = i), n < i.largestBatchId && (n = i.largestBatchId);\n  }\n  return new IndexOffset(t.readTime, t.documentKey, n);\n}\nvar de = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\nvar LruParams = class {\n  constructor(e, t, n) {\n    this.cacheSizeCollectionThreshold = e, this.percentileToCollect = t, this.maximumSequenceNumbersToCollect = n;\n  }\n  static withCacheSize(e) {\n    return new LruParams(e, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\n  }\n};\nfunction removeMutationBatch(e, t, n) {\n  const r = e.store(\"mutations\"),\n    i = e.store(\"documentMutations\"),\n    s = [],\n    o = IDBKeyRange.only(n.batchId);\n  let _ = 0;\n  const a = r.Y({\n    range: o\n  }, (e2, t2, n2) => (_++, n2.delete()));\n  s.push(a.next(() => {\n    __PRIVATE_hardAssert(1 === _);\n  }));\n  const u = [];\n  for (const e2 of n.mutations) {\n    const r2 = __PRIVATE_newDbDocumentMutationKey(t, e2.key.path, n.batchId);\n    s.push(i.delete(r2)), u.push(e2.key);\n  }\n  return PersistencePromise.waitFor(s).next(() => u);\n}\nfunction __PRIVATE_dbDocumentSize(e) {\n  if (!e) return 0;\n  let t;\n  if (e.document) t = e.document;else if (e.unknownDocument) t = e.unknownDocument;else {\n    if (!e.noDocument) throw fail();\n    t = e.noDocument;\n  }\n  return JSON.stringify(t).length;\n}\nLruParams.DEFAULT_COLLECTION_PERCENTILE = 10, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, LruParams.DEFAULT = new LruParams(41943040, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), LruParams.DISABLED = new LruParams(-1, 0, 0);\nvar __PRIVATE_IndexedDbMutationQueue = class {\n  constructor(e, t, n, r) {\n    this.userId = e, this.serializer = t, this.indexManager = n, this.referenceDelegate = r, this.Dn = {};\n  }\n  static ct(e, t, n, r) {\n    __PRIVATE_hardAssert(\"\" !== e.uid);\n    const i = e.isAuthenticated() ? e.uid : \"\";\n    return new __PRIVATE_IndexedDbMutationQueue(i, t, n, r);\n  }\n  checkEmpty(e) {\n    let t = true;\n    const n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);\n    return __PRIVATE_mutationsStore(e).Y({\n      index: \"userMutationsIndex\",\n      range: n\n    }, (e2, n2, r) => {\n      t = false, r.done();\n    }).next(() => t);\n  }\n  addMutationBatch(e, t, n, r) {\n    const i = __PRIVATE_documentMutationsStore(e),\n      s = __PRIVATE_mutationsStore(e);\n    return s.add({}).next(o => {\n      __PRIVATE_hardAssert(\"number\" == typeof o);\n      const _ = new MutationBatch(o, t, n, r),\n        a = function __PRIVATE_toDbMutationBatch(e2, t2, n2) {\n          const r2 = n2.baseMutations.map(t3 => toMutation(e2.ut, t3)),\n            i2 = n2.mutations.map(t3 => toMutation(e2.ut, t3));\n          return {\n            userId: t2,\n            batchId: n2.batchId,\n            localWriteTimeMs: n2.localWriteTime.toMillis(),\n            baseMutations: r2,\n            mutations: i2\n          };\n        }(this.serializer, this.userId, _),\n        u = [];\n      let c = new SortedSet((e2, t2) => __PRIVATE_primitiveComparator(e2.canonicalString(), t2.canonicalString()));\n      for (const e2 of r) {\n        const t2 = __PRIVATE_newDbDocumentMutationKey(this.userId, e2.key.path, o);\n        c = c.add(e2.key.path.popLast()), u.push(s.put(a)), u.push(i.put(t2, O));\n      }\n      return c.forEach(t2 => {\n        u.push(this.indexManager.addToCollectionParentIndex(e, t2));\n      }), e.addOnCommittedListener(() => {\n        this.Dn[o] = _.keys();\n      }), PersistencePromise.waitFor(u).next(() => _);\n    });\n  }\n  lookupMutationBatch(e, t) {\n    return __PRIVATE_mutationsStore(e).get(t).next(e2 => e2 ? (__PRIVATE_hardAssert(e2.userId === this.userId), __PRIVATE_fromDbMutationBatch(this.serializer, e2)) : null);\n  }\n  Cn(e, t) {\n    return this.Dn[t] ? PersistencePromise.resolve(this.Dn[t]) : this.lookupMutationBatch(e, t).next(e2 => {\n      if (e2) {\n        const n = e2.keys();\n        return this.Dn[t] = n, n;\n      }\n      return null;\n    });\n  }\n  getNextMutationBatchAfterBatchId(e, t) {\n    const n = t + 1,\n      r = IDBKeyRange.lowerBound([this.userId, n]);\n    let i = null;\n    return __PRIVATE_mutationsStore(e).Y({\n      index: \"userMutationsIndex\",\n      range: r\n    }, (e2, t2, r2) => {\n      t2.userId === this.userId && (__PRIVATE_hardAssert(t2.batchId >= n), i = __PRIVATE_fromDbMutationBatch(this.serializer, t2)), r2.done();\n    }).next(() => i);\n  }\n  getHighestUnacknowledgedBatchId(e) {\n    const t = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);\n    let n = -1;\n    return __PRIVATE_mutationsStore(e).Y({\n      index: \"userMutationsIndex\",\n      range: t,\n      reverse: true\n    }, (e2, t2, r) => {\n      n = t2.batchId, r.done();\n    }).next(() => n);\n  }\n  getAllMutationBatches(e) {\n    const t = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);\n    return __PRIVATE_mutationsStore(e).W(\"userMutationsIndex\", t).next(e2 => e2.map(e3 => __PRIVATE_fromDbMutationBatch(this.serializer, e3)));\n  }\n  getAllMutationBatchesAffectingDocumentKey(e, t) {\n    const n = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, t.path),\n      r = IDBKeyRange.lowerBound(n),\n      i = [];\n    return __PRIVATE_documentMutationsStore(e).Y({\n      range: r\n    }, (n2, r2, s) => {\n      const [o, _, a] = n2,\n        u = __PRIVATE_decodeResourcePath(_);\n      if (o === this.userId && t.path.isEqual(u)) return __PRIVATE_mutationsStore(e).get(a).next(e2 => {\n        if (!e2) throw fail();\n        __PRIVATE_hardAssert(e2.userId === this.userId), i.push(__PRIVATE_fromDbMutationBatch(this.serializer, e2));\n      });\n      s.done();\n    }).next(() => i);\n  }\n  getAllMutationBatchesAffectingDocumentKeys(e, t) {\n    let n = new SortedSet(__PRIVATE_primitiveComparator);\n    const r = [];\n    return t.forEach(t2 => {\n      const i = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, t2.path),\n        s = IDBKeyRange.lowerBound(i),\n        o = __PRIVATE_documentMutationsStore(e).Y({\n          range: s\n        }, (e2, r2, i2) => {\n          const [s2, o2, _] = e2,\n            a = __PRIVATE_decodeResourcePath(o2);\n          s2 === this.userId && t2.path.isEqual(a) ? n = n.add(_) : i2.done();\n        });\n      r.push(o);\n    }), PersistencePromise.waitFor(r).next(() => this.vn(e, n));\n  }\n  getAllMutationBatchesAffectingQuery(e, t) {\n    const n = t.path,\n      r = n.length + 1,\n      i = __PRIVATE_newDbDocumentMutationPrefixForPath(this.userId, n),\n      s = IDBKeyRange.lowerBound(i);\n    let o = new SortedSet(__PRIVATE_primitiveComparator);\n    return __PRIVATE_documentMutationsStore(e).Y({\n      range: s\n    }, (e2, t2, i2) => {\n      const [s2, _, a] = e2,\n        u = __PRIVATE_decodeResourcePath(_);\n      s2 === this.userId && n.isPrefixOf(u) ? u.length === r && (o = o.add(a)) : i2.done();\n    }).next(() => this.vn(e, o));\n  }\n  vn(e, t) {\n    const n = [],\n      r = [];\n    return t.forEach(t2 => {\n      r.push(__PRIVATE_mutationsStore(e).get(t2).next(e2 => {\n        if (null === e2) throw fail();\n        __PRIVATE_hardAssert(e2.userId === this.userId), n.push(__PRIVATE_fromDbMutationBatch(this.serializer, e2));\n      }));\n    }), PersistencePromise.waitFor(r).next(() => n);\n  }\n  removeMutationBatch(e, t) {\n    return removeMutationBatch(e.ae, this.userId, t).next(n => (e.addOnCommittedListener(() => {\n      this.Fn(t.batchId);\n    }), PersistencePromise.forEach(n, t2 => this.referenceDelegate.markPotentiallyOrphaned(e, t2))));\n  }\n  Fn(e) {\n    delete this.Dn[e];\n  }\n  performConsistencyCheck(e) {\n    return this.checkEmpty(e).next(t => {\n      if (!t) return PersistencePromise.resolve();\n      const n = IDBKeyRange.lowerBound(function __PRIVATE_newDbDocumentMutationPrefixForUser(e2) {\n          return [e2];\n        }(this.userId)),\n        r = [];\n      return __PRIVATE_documentMutationsStore(e).Y({\n        range: n\n      }, (e2, t2, n2) => {\n        if (e2[0] === this.userId) {\n          const t3 = __PRIVATE_decodeResourcePath(e2[1]);\n          r.push(t3);\n        } else n2.done();\n      }).next(() => {\n        __PRIVATE_hardAssert(0 === r.length);\n      });\n    });\n  }\n  containsKey(e, t) {\n    return __PRIVATE_mutationQueueContainsKey(e, this.userId, t);\n  }\n  Mn(e) {\n    return __PRIVATE_mutationQueuesStore(e).get(this.userId).next(e2 => e2 || {\n      userId: this.userId,\n      lastAcknowledgedBatchId: -1,\n      lastStreamToken: \"\"\n    });\n  }\n};\nfunction __PRIVATE_mutationQueueContainsKey(e, t, n) {\n  const r = __PRIVATE_newDbDocumentMutationPrefixForPath(t, n.path),\n    i = r[1],\n    s = IDBKeyRange.lowerBound(r);\n  let o = false;\n  return __PRIVATE_documentMutationsStore(e).Y({\n    range: s,\n    J: true\n  }, (e2, n2, r2) => {\n    const [s2, _, a] = e2;\n    s2 === t && _ === i && (o = true), r2.done();\n  }).next(() => o);\n}\nfunction __PRIVATE_mutationsStore(e) {\n  return __PRIVATE_getStore(e, \"mutations\");\n}\nfunction __PRIVATE_documentMutationsStore(e) {\n  return __PRIVATE_getStore(e, \"documentMutations\");\n}\nfunction __PRIVATE_mutationQueuesStore(e) {\n  return __PRIVATE_getStore(e, \"mutationQueues\");\n}\nvar __PRIVATE_TargetIdGenerator = class {\n  constructor(e) {\n    this.xn = e;\n  }\n  next() {\n    return this.xn += 2, this.xn;\n  }\n  static On() {\n    return new __PRIVATE_TargetIdGenerator(0);\n  }\n  static Nn() {\n    return new __PRIVATE_TargetIdGenerator(-1);\n  }\n};\nvar __PRIVATE_IndexedDbTargetCache = class {\n  constructor(e, t) {\n    this.referenceDelegate = e, this.serializer = t;\n  }\n  allocateTargetId(e) {\n    return this.Bn(e).next(t => {\n      const n = new __PRIVATE_TargetIdGenerator(t.highestTargetId);\n      return t.highestTargetId = n.next(), this.Ln(e, t).next(() => t.highestTargetId);\n    });\n  }\n  getLastRemoteSnapshotVersion(e) {\n    return this.Bn(e).next(e2 => SnapshotVersion.fromTimestamp(new Timestamp(e2.lastRemoteSnapshotVersion.seconds, e2.lastRemoteSnapshotVersion.nanoseconds)));\n  }\n  getHighestSequenceNumber(e) {\n    return this.Bn(e).next(e2 => e2.highestListenSequenceNumber);\n  }\n  setTargetsMetadata(e, t, n) {\n    return this.Bn(e).next(r => (r.highestListenSequenceNumber = t, n && (r.lastRemoteSnapshotVersion = n.toTimestamp()), t > r.highestListenSequenceNumber && (r.highestListenSequenceNumber = t), this.Ln(e, r)));\n  }\n  addTargetData(e, t) {\n    return this.kn(e, t).next(() => this.Bn(e).next(n => (n.targetCount += 1, this.qn(t, n), this.Ln(e, n))));\n  }\n  updateTargetData(e, t) {\n    return this.kn(e, t);\n  }\n  removeTargetData(e, t) {\n    return this.removeMatchingKeysForTargetId(e, t.targetId).next(() => __PRIVATE_targetsStore(e).delete(t.targetId)).next(() => this.Bn(e)).next(t2 => (__PRIVATE_hardAssert(t2.targetCount > 0), t2.targetCount -= 1, this.Ln(e, t2)));\n  }\n  removeTargets(e, t, n) {\n    let r = 0;\n    const i = [];\n    return __PRIVATE_targetsStore(e).Y((s, o) => {\n      const _ = __PRIVATE_fromDbTarget(o);\n      _.sequenceNumber <= t && null === n.get(_.targetId) && (r++, i.push(this.removeTargetData(e, _)));\n    }).next(() => PersistencePromise.waitFor(i)).next(() => r);\n  }\n  forEachTarget(e, t) {\n    return __PRIVATE_targetsStore(e).Y((e2, n) => {\n      const r = __PRIVATE_fromDbTarget(n);\n      t(r);\n    });\n  }\n  Bn(e) {\n    return __PRIVATE_globalTargetStore(e).get(\"targetGlobalKey\").next(e2 => (__PRIVATE_hardAssert(null !== e2), e2));\n  }\n  Ln(e, t) {\n    return __PRIVATE_globalTargetStore(e).put(\"targetGlobalKey\", t);\n  }\n  kn(e, t) {\n    return __PRIVATE_targetsStore(e).put(__PRIVATE_toDbTarget(this.serializer, t));\n  }\n  qn(e, t) {\n    let n = false;\n    return e.targetId > t.highestTargetId && (t.highestTargetId = e.targetId, n = true), e.sequenceNumber > t.highestListenSequenceNumber && (t.highestListenSequenceNumber = e.sequenceNumber, n = true), n;\n  }\n  getTargetCount(e) {\n    return this.Bn(e).next(e2 => e2.targetCount);\n  }\n  getTargetData(e, t) {\n    const n = __PRIVATE_canonifyTarget(t),\n      r = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]);\n    let i = null;\n    return __PRIVATE_targetsStore(e).Y({\n      range: r,\n      index: \"queryTargetsIndex\"\n    }, (e2, n2, r2) => {\n      const s = __PRIVATE_fromDbTarget(n2);\n      __PRIVATE_targetEquals(t, s.target) && (i = s, r2.done());\n    }).next(() => i);\n  }\n  addMatchingKeys(e, t, n) {\n    const r = [],\n      i = __PRIVATE_documentTargetStore(e);\n    return t.forEach(t2 => {\n      const s = __PRIVATE_encodeResourcePath(t2.path);\n      r.push(i.put({\n        targetId: n,\n        path: s\n      })), r.push(this.referenceDelegate.addReference(e, n, t2));\n    }), PersistencePromise.waitFor(r);\n  }\n  removeMatchingKeys(e, t, n) {\n    const r = __PRIVATE_documentTargetStore(e);\n    return PersistencePromise.forEach(t, t2 => {\n      const i = __PRIVATE_encodeResourcePath(t2.path);\n      return PersistencePromise.waitFor([r.delete([n, i]), this.referenceDelegate.removeReference(e, n, t2)]);\n    });\n  }\n  removeMatchingKeysForTargetId(e, t) {\n    const n = __PRIVATE_documentTargetStore(e),\n      r = IDBKeyRange.bound([t], [t + 1], false, true);\n    return n.delete(r);\n  }\n  getMatchingKeysForTargetId(e, t) {\n    const n = IDBKeyRange.bound([t], [t + 1], false, true),\n      r = __PRIVATE_documentTargetStore(e);\n    let i = __PRIVATE_documentKeySet();\n    return r.Y({\n      range: n,\n      J: true\n    }, (e2, t2, n2) => {\n      const r2 = __PRIVATE_decodeResourcePath(e2[1]),\n        s = new DocumentKey(r2);\n      i = i.add(s);\n    }).next(() => i);\n  }\n  containsKey(e, t) {\n    const n = __PRIVATE_encodeResourcePath(t.path),\n      r = IDBKeyRange.bound([n], [__PRIVATE_immediateSuccessor(n)], false, true);\n    let i = 0;\n    return __PRIVATE_documentTargetStore(e).Y({\n      index: \"documentTargetsIndex\",\n      J: true,\n      range: r\n    }, ([e2, t2], n2, r2) => {\n      0 !== e2 && (i++, r2.done());\n    }).next(() => i > 0);\n  }\n  _t(e, t) {\n    return __PRIVATE_targetsStore(e).get(t).next(e2 => e2 ? __PRIVATE_fromDbTarget(e2) : null);\n  }\n};\nfunction __PRIVATE_targetsStore(e) {\n  return __PRIVATE_getStore(e, \"targets\");\n}\nfunction __PRIVATE_globalTargetStore(e) {\n  return __PRIVATE_getStore(e, \"targetGlobal\");\n}\nfunction __PRIVATE_documentTargetStore(e) {\n  return __PRIVATE_getStore(e, \"targetDocuments\");\n}\nfunction __PRIVATE_bufferEntryComparator([e, t], [n, r]) {\n  const i = __PRIVATE_primitiveComparator(e, n);\n  return 0 === i ? __PRIVATE_primitiveComparator(t, r) : i;\n}\nvar __PRIVATE_RollingSequenceNumberBuffer = class {\n  constructor(e) {\n    this.Qn = e, this.buffer = new SortedSet(__PRIVATE_bufferEntryComparator), this.Kn = 0;\n  }\n  $n() {\n    return ++this.Kn;\n  }\n  Un(e) {\n    const t = [e, this.$n()];\n    if (this.buffer.size < this.Qn) this.buffer = this.buffer.add(t);else {\n      const e2 = this.buffer.last();\n      __PRIVATE_bufferEntryComparator(t, e2) < 0 && (this.buffer = this.buffer.delete(e2).add(t));\n    }\n  }\n  get maxValue() {\n    return this.buffer.last()[0];\n  }\n};\nvar __PRIVATE_LruScheduler = class {\n  constructor(e, t, n) {\n    this.garbageCollector = e, this.asyncQueue = t, this.localStore = n, this.Wn = null;\n  }\n  start() {\n    -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.Gn(6e4);\n  }\n  stop() {\n    this.Wn && (this.Wn.cancel(), this.Wn = null);\n  }\n  get started() {\n    return null !== this.Wn;\n  }\n  Gn(e) {\n    __PRIVATE_logDebug(\"LruGarbageCollector\", `Garbage collection scheduled in ${e}ms`), this.Wn = this.asyncQueue.enqueueAfterDelay(\"lru_garbage_collection\", e, async () => {\n      this.Wn = null;\n      try {\n        await this.localStore.collectGarbage(this.garbageCollector);\n      } catch (e2) {\n        __PRIVATE_isIndexedDbTransactionError(e2) ? __PRIVATE_logDebug(\"LruGarbageCollector\", \"Ignoring IndexedDB error during garbage collection: \", e2) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);\n      }\n      await this.Gn(3e5);\n    });\n  }\n};\nvar __PRIVATE_LruGarbageCollectorImpl = class {\n  constructor(e, t) {\n    this.zn = e, this.params = t;\n  }\n  calculateTargetCount(e, t) {\n    return this.zn.jn(e).next(e2 => Math.floor(t / 100 * e2));\n  }\n  nthSequenceNumber(e, t) {\n    if (0 === t) return PersistencePromise.resolve(__PRIVATE_ListenSequence._e);\n    const n = new __PRIVATE_RollingSequenceNumberBuffer(t);\n    return this.zn.forEachTarget(e, e2 => n.Un(e2.sequenceNumber)).next(() => this.zn.Hn(e, e2 => n.Un(e2))).next(() => n.maxValue);\n  }\n  removeTargets(e, t, n) {\n    return this.zn.removeTargets(e, t, n);\n  }\n  removeOrphanedDocuments(e, t) {\n    return this.zn.removeOrphanedDocuments(e, t);\n  }\n  collect(e, t) {\n    return -1 === this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug(\"LruGarbageCollector\", \"Garbage collection skipped; disabled\"), PersistencePromise.resolve(de)) : this.getCacheSize(e).next(n => n < this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug(\"LruGarbageCollector\", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), de) : this.Jn(e, t));\n  }\n  getCacheSize(e) {\n    return this.zn.getCacheSize(e);\n  }\n  Jn(e, t) {\n    let n, r, i, s, o, a, u;\n    const c = Date.now();\n    return this.calculateTargetCount(e, this.params.percentileToCollect).next(t2 => (t2 > this.params.maximumSequenceNumbersToCollect ? (__PRIVATE_logDebug(\"LruGarbageCollector\", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${t2}`), r = this.params.maximumSequenceNumbersToCollect) : r = t2, s = Date.now(), this.nthSequenceNumber(e, r))).next(r2 => (n = r2, o = Date.now(), this.removeTargets(e, n, t))).next(t2 => (i = t2, a = Date.now(), this.removeOrphanedDocuments(e, n))).next(e2 => {\n      if (u = Date.now(), __PRIVATE_getLogLevel() <= import_logger.LogLevel.DEBUG) {\n        __PRIVATE_logDebug(\"LruGarbageCollector\", `LRU Garbage Collection\n\tCounted targets in ${s - c}ms\n\tDetermined least recently used ${r} in ` + (o - s) + `ms\n\tRemoved ${i} targets in ` + (a - o) + `ms\n\tRemoved ${e2} documents in ` + (u - a) + `ms\nTotal Duration: ${u - c}ms`);\n      }\n      return PersistencePromise.resolve({\n        didRun: true,\n        sequenceNumbersCollected: r,\n        targetsRemoved: i,\n        documentsRemoved: e2\n      });\n    });\n  }\n};\nfunction __PRIVATE_newLruGarbageCollector(e, t) {\n  return new __PRIVATE_LruGarbageCollectorImpl(e, t);\n}\nvar __PRIVATE_IndexedDbLruDelegateImpl = class {\n  constructor(e, t) {\n    this.db = e, this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t);\n  }\n  jn(e) {\n    const t = this.Yn(e);\n    return this.db.getTargetCache().getTargetCount(e).next(e2 => t.next(t2 => e2 + t2));\n  }\n  Yn(e) {\n    let t = 0;\n    return this.Hn(e, e2 => {\n      t++;\n    }).next(() => t);\n  }\n  forEachTarget(e, t) {\n    return this.db.getTargetCache().forEachTarget(e, t);\n  }\n  Hn(e, t) {\n    return this.Zn(e, (e2, n) => t(n));\n  }\n  addReference(e, t, n) {\n    return __PRIVATE_writeSentinelKey(e, n);\n  }\n  removeReference(e, t, n) {\n    return __PRIVATE_writeSentinelKey(e, n);\n  }\n  removeTargets(e, t, n) {\n    return this.db.getTargetCache().removeTargets(e, t, n);\n  }\n  markPotentiallyOrphaned(e, t) {\n    return __PRIVATE_writeSentinelKey(e, t);\n  }\n  Xn(e, t) {\n    return function __PRIVATE_mutationQueuesContainKey(e2, t2) {\n      let n = false;\n      return __PRIVATE_mutationQueuesStore(e2).Z(r => __PRIVATE_mutationQueueContainsKey(e2, r, t2).next(e3 => (e3 && (n = true), PersistencePromise.resolve(!e3)))).next(() => n);\n    }(e, t);\n  }\n  removeOrphanedDocuments(e, t) {\n    const n = this.db.getRemoteDocumentCache().newChangeBuffer(),\n      r = [];\n    let i = 0;\n    return this.Zn(e, (s, o) => {\n      if (o <= t) {\n        const t2 = this.Xn(e, s).next(t3 => {\n          if (!t3) return i++, n.getEntry(e, s).next(() => (n.removeEntry(s, SnapshotVersion.min()), __PRIVATE_documentTargetStore(e).delete(function __PRIVATE_sentinelKey$1(e2) {\n            return [0, __PRIVATE_encodeResourcePath(e2.path)];\n          }(s))));\n        });\n        r.push(t2);\n      }\n    }).next(() => PersistencePromise.waitFor(r)).next(() => n.apply(e)).next(() => i);\n  }\n  removeTarget(e, t) {\n    const n = t.withSequenceNumber(e.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(e, n);\n  }\n  updateLimboDocument(e, t) {\n    return __PRIVATE_writeSentinelKey(e, t);\n  }\n  Zn(e, t) {\n    const n = __PRIVATE_documentTargetStore(e);\n    let r,\n      i = __PRIVATE_ListenSequence._e;\n    return n.Y({\n      index: \"documentTargetsIndex\"\n    }, ([e2, n2], {\n      path: s,\n      sequenceNumber: o\n    }) => {\n      0 === e2 ? (i !== __PRIVATE_ListenSequence._e && t(new DocumentKey(__PRIVATE_decodeResourcePath(r)), i), i = o, r = s) : i = __PRIVATE_ListenSequence._e;\n    }).next(() => {\n      i !== __PRIVATE_ListenSequence._e && t(new DocumentKey(__PRIVATE_decodeResourcePath(r)), i);\n    });\n  }\n  getCacheSize(e) {\n    return this.db.getRemoteDocumentCache().getSize(e);\n  }\n};\nfunction __PRIVATE_writeSentinelKey(e, t) {\n  return __PRIVATE_documentTargetStore(e).put(function __PRIVATE_sentinelRow(e2, t2) {\n    return {\n      targetId: 0,\n      path: __PRIVATE_encodeResourcePath(e2.path),\n      sequenceNumber: t2\n    };\n  }(t, e.currentSequenceNumber));\n}\nvar RemoteDocumentChangeBuffer = class {\n  constructor() {\n    this.changes = new ObjectMap(e => e.toString(), (e, t) => e.isEqual(t)), this.changesApplied = false;\n  }\n  addEntry(e) {\n    this.assertNotApplied(), this.changes.set(e.key, e);\n  }\n  removeEntry(e, t) {\n    this.assertNotApplied(), this.changes.set(e, MutableDocument.newInvalidDocument(e).setReadTime(t));\n  }\n  getEntry(e, t) {\n    this.assertNotApplied();\n    const n = this.changes.get(t);\n    return void 0 !== n ? PersistencePromise.resolve(n) : this.getFromCache(e, t);\n  }\n  getEntries(e, t) {\n    return this.getAllFromCache(e, t);\n  }\n  apply(e) {\n    return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(e);\n  }\n  assertNotApplied() {}\n};\nvar __PRIVATE_IndexedDbRemoteDocumentCacheImpl = class {\n  constructor(e) {\n    this.serializer = e;\n  }\n  setIndexManager(e) {\n    this.indexManager = e;\n  }\n  addEntry(e, t, n) {\n    return __PRIVATE_remoteDocumentsStore(e).put(n);\n  }\n  removeEntry(e, t, n) {\n    return __PRIVATE_remoteDocumentsStore(e).delete(function __PRIVATE_dbReadTimeKey(e2, t2) {\n      const n2 = e2.path.toArray();\n      return [n2.slice(0, n2.length - 2), n2[n2.length - 2], __PRIVATE_toDbTimestampKey(t2), n2[n2.length - 1]];\n    }(t, n));\n  }\n  updateMetadata(e, t) {\n    return this.getMetadata(e).next(n => (n.byteSize += t, this.er(e, n)));\n  }\n  getEntry(e, t) {\n    let n = MutableDocument.newInvalidDocument(t);\n    return __PRIVATE_remoteDocumentsStore(e).Y({\n      index: \"documentKeyIndex\",\n      range: IDBKeyRange.only(__PRIVATE_dbKey(t))\n    }, (e2, r) => {\n      n = this.tr(t, r);\n    }).next(() => n);\n  }\n  nr(e, t) {\n    let n = {\n      size: 0,\n      document: MutableDocument.newInvalidDocument(t)\n    };\n    return __PRIVATE_remoteDocumentsStore(e).Y({\n      index: \"documentKeyIndex\",\n      range: IDBKeyRange.only(__PRIVATE_dbKey(t))\n    }, (e2, r) => {\n      n = {\n        document: this.tr(t, r),\n        size: __PRIVATE_dbDocumentSize(r)\n      };\n    }).next(() => n);\n  }\n  getEntries(e, t) {\n    let n = __PRIVATE_mutableDocumentMap();\n    return this.rr(e, t, (e2, t2) => {\n      const r = this.tr(e2, t2);\n      n = n.insert(e2, r);\n    }).next(() => n);\n  }\n  ir(e, t) {\n    let n = __PRIVATE_mutableDocumentMap(),\n      r = new SortedMap(DocumentKey.comparator);\n    return this.rr(e, t, (e2, t2) => {\n      const i = this.tr(e2, t2);\n      n = n.insert(e2, i), r = r.insert(e2, __PRIVATE_dbDocumentSize(t2));\n    }).next(() => ({\n      documents: n,\n      sr: r\n    }));\n  }\n  rr(e, t, n) {\n    if (t.isEmpty()) return PersistencePromise.resolve();\n    let r = new SortedSet(__PRIVATE_dbKeyComparator);\n    t.forEach(e2 => r = r.add(e2));\n    const i = IDBKeyRange.bound(__PRIVATE_dbKey(r.first()), __PRIVATE_dbKey(r.last())),\n      s = r.getIterator();\n    let o = s.getNext();\n    return __PRIVATE_remoteDocumentsStore(e).Y({\n      index: \"documentKeyIndex\",\n      range: i\n    }, (e2, t2, r2) => {\n      const i2 = DocumentKey.fromSegments([...t2.prefixPath, t2.collectionGroup, t2.documentId]);\n      for (; o && __PRIVATE_dbKeyComparator(o, i2) < 0;) n(o, null), o = s.getNext();\n      o && o.isEqual(i2) && (n(o, t2), o = s.hasNext() ? s.getNext() : null), o ? r2.U(__PRIVATE_dbKey(o)) : r2.done();\n    }).next(() => {\n      for (; o;) n(o, null), o = s.hasNext() ? s.getNext() : null;\n    });\n  }\n  getDocumentsMatchingQuery(e, t, n, r, i) {\n    const s = t.path,\n      o = [s.popLast().toArray(), s.lastSegment(), __PRIVATE_toDbTimestampKey(n.readTime), n.documentKey.path.isEmpty() ? \"\" : n.documentKey.path.lastSegment()],\n      _ = [s.popLast().toArray(), s.lastSegment(), [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER], \"\"];\n    return __PRIVATE_remoteDocumentsStore(e).W(IDBKeyRange.bound(o, _, true)).next(e2 => {\n      null == i || i.incrementDocumentReadCount(e2.length);\n      let n2 = __PRIVATE_mutableDocumentMap();\n      for (const i2 of e2) {\n        const e3 = this.tr(DocumentKey.fromSegments(i2.prefixPath.concat(i2.collectionGroup, i2.documentId)), i2);\n        e3.isFoundDocument() && (__PRIVATE_queryMatches(t, e3) || r.has(e3.key)) && (n2 = n2.insert(e3.key, e3));\n      }\n      return n2;\n    });\n  }\n  getAllFromCollectionGroup(e, t, n, r) {\n    let i = __PRIVATE_mutableDocumentMap();\n    const s = __PRIVATE_dbCollectionGroupKey(t, n),\n      o = __PRIVATE_dbCollectionGroupKey(t, IndexOffset.max());\n    return __PRIVATE_remoteDocumentsStore(e).Y({\n      index: \"collectionGroupIndex\",\n      range: IDBKeyRange.bound(s, o, true)\n    }, (e2, t2, n2) => {\n      const s2 = this.tr(DocumentKey.fromSegments(t2.prefixPath.concat(t2.collectionGroup, t2.documentId)), t2);\n      i = i.insert(s2.key, s2), i.size === r && n2.done();\n    }).next(() => i);\n  }\n  newChangeBuffer(e) {\n    return new __PRIVATE_IndexedDbRemoteDocumentChangeBuffer(this, !!e && e.trackRemovals);\n  }\n  getSize(e) {\n    return this.getMetadata(e).next(e2 => e2.byteSize);\n  }\n  getMetadata(e) {\n    return __PRIVATE_documentGlobalStore(e).get(\"remoteDocumentGlobalKey\").next(e2 => (__PRIVATE_hardAssert(!!e2), e2));\n  }\n  er(e, t) {\n    return __PRIVATE_documentGlobalStore(e).put(\"remoteDocumentGlobalKey\", t);\n  }\n  tr(e, t) {\n    if (t) {\n      const e2 = __PRIVATE_fromDbRemoteDocument(this.serializer, t);\n      if (!(e2.isNoDocument() && e2.version.isEqual(SnapshotVersion.min()))) return e2;\n    }\n    return MutableDocument.newInvalidDocument(e);\n  }\n};\nfunction __PRIVATE_newIndexedDbRemoteDocumentCache(e) {\n  return new __PRIVATE_IndexedDbRemoteDocumentCacheImpl(e);\n}\nvar __PRIVATE_IndexedDbRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n  constructor(e, t) {\n    super(), this._r = e, this.trackRemovals = t, this.ar = new ObjectMap(e2 => e2.toString(), (e2, t2) => e2.isEqual(t2));\n  }\n  applyChanges(e) {\n    const t = [];\n    let n = 0,\n      r = new SortedSet((e2, t2) => __PRIVATE_primitiveComparator(e2.canonicalString(), t2.canonicalString()));\n    return this.changes.forEach((i, s) => {\n      const o = this.ar.get(i);\n      if (t.push(this._r.removeEntry(e, i, o.readTime)), s.isValidDocument()) {\n        const _ = __PRIVATE_toDbRemoteDocument(this._r.serializer, s);\n        r = r.add(i.path.popLast());\n        const a = __PRIVATE_dbDocumentSize(_);\n        n += a - o.size, t.push(this._r.addEntry(e, i, _));\n      } else if (n -= o.size, this.trackRemovals) {\n        const n2 = __PRIVATE_toDbRemoteDocument(this._r.serializer, s.convertToNoDocument(SnapshotVersion.min()));\n        t.push(this._r.addEntry(e, i, n2));\n      }\n    }), r.forEach(n2 => {\n      t.push(this._r.indexManager.addToCollectionParentIndex(e, n2));\n    }), t.push(this._r.updateMetadata(e, n)), PersistencePromise.waitFor(t);\n  }\n  getFromCache(e, t) {\n    return this._r.nr(e, t).next(e2 => (this.ar.set(t, {\n      size: e2.size,\n      readTime: e2.document.readTime\n    }), e2.document));\n  }\n  getAllFromCache(e, t) {\n    return this._r.ir(e, t).next(({\n      documents: e2,\n      sr: t2\n    }) => (t2.forEach((t3, n) => {\n      this.ar.set(t3, {\n        size: n,\n        readTime: e2.get(t3).readTime\n      });\n    }), e2));\n  }\n};\nfunction __PRIVATE_documentGlobalStore(e) {\n  return __PRIVATE_getStore(e, \"remoteDocumentGlobal\");\n}\nfunction __PRIVATE_remoteDocumentsStore(e) {\n  return __PRIVATE_getStore(e, \"remoteDocumentsV14\");\n}\nfunction __PRIVATE_dbKey(e) {\n  const t = e.path.toArray();\n  return [t.slice(0, t.length - 2), t[t.length - 2], t[t.length - 1]];\n}\nfunction __PRIVATE_dbCollectionGroupKey(e, t) {\n  const n = t.documentKey.path.toArray();\n  return [e, __PRIVATE_toDbTimestampKey(t.readTime), n.slice(0, n.length - 2), n.length > 0 ? n[n.length - 1] : \"\"];\n}\nfunction __PRIVATE_dbKeyComparator(e, t) {\n  const n = e.path.toArray(),\n    r = t.path.toArray();\n  let i = 0;\n  for (let e2 = 0; e2 < n.length - 2 && e2 < r.length - 2; ++e2) if (i = __PRIVATE_primitiveComparator(n[e2], r[e2]), i) return i;\n  return i = __PRIVATE_primitiveComparator(n.length, r.length), i || (i = __PRIVATE_primitiveComparator(n[n.length - 2], r[r.length - 2]), i || __PRIVATE_primitiveComparator(n[n.length - 1], r[r.length - 1]));\n}\nvar OverlayedDocument = class {\n  constructor(e, t) {\n    this.overlayedDocument = e, this.mutatedFields = t;\n  }\n};\nvar LocalDocumentsView = class {\n  constructor(e, t, n, r) {\n    this.remoteDocumentCache = e, this.mutationQueue = t, this.documentOverlayCache = n, this.indexManager = r;\n  }\n  getDocument(e, t) {\n    let n = null;\n    return this.documentOverlayCache.getOverlay(e, t).next(r => (n = r, this.remoteDocumentCache.getEntry(e, t))).next(e2 => (null !== n && __PRIVATE_mutationApplyToLocalView(n.mutation, e2, FieldMask.empty(), Timestamp.now()), e2));\n  }\n  getDocuments(e, t) {\n    return this.remoteDocumentCache.getEntries(e, t).next(t2 => this.getLocalViewOfDocuments(e, t2, __PRIVATE_documentKeySet()).next(() => t2));\n  }\n  getLocalViewOfDocuments(e, t, n = __PRIVATE_documentKeySet()) {\n    const r = __PRIVATE_newOverlayMap();\n    return this.populateOverlays(e, r, t).next(() => this.computeViews(e, t, r, n).next(e2 => {\n      let t2 = documentMap();\n      return e2.forEach((e3, n2) => {\n        t2 = t2.insert(e3, n2.overlayedDocument);\n      }), t2;\n    }));\n  }\n  getOverlayedDocuments(e, t) {\n    const n = __PRIVATE_newOverlayMap();\n    return this.populateOverlays(e, n, t).next(() => this.computeViews(e, t, n, __PRIVATE_documentKeySet()));\n  }\n  populateOverlays(e, t, n) {\n    const r = [];\n    return n.forEach(e2 => {\n      t.has(e2) || r.push(e2);\n    }), this.documentOverlayCache.getOverlays(e, r).next(e2 => {\n      e2.forEach((e3, n2) => {\n        t.set(e3, n2);\n      });\n    });\n  }\n  computeViews(e, t, n, r) {\n    let i = __PRIVATE_mutableDocumentMap();\n    const s = __PRIVATE_newDocumentKeyMap(),\n      o = function __PRIVATE_newOverlayedDocumentMap() {\n        return __PRIVATE_newDocumentKeyMap();\n      }();\n    return t.forEach((e2, t2) => {\n      const o2 = n.get(t2.key);\n      r.has(t2.key) && (void 0 === o2 || o2.mutation instanceof __PRIVATE_PatchMutation) ? i = i.insert(t2.key, t2) : void 0 !== o2 ? (s.set(t2.key, o2.mutation.getFieldMask()), __PRIVATE_mutationApplyToLocalView(o2.mutation, t2, o2.mutation.getFieldMask(), Timestamp.now())) : s.set(t2.key, FieldMask.empty());\n    }), this.recalculateAndSaveOverlays(e, i).next(e2 => (e2.forEach((e3, t2) => s.set(e3, t2)), t.forEach((e3, t2) => {\n      var n2;\n      return o.set(e3, new OverlayedDocument(t2, null !== (n2 = s.get(e3)) && void 0 !== n2 ? n2 : null));\n    }), o));\n  }\n  recalculateAndSaveOverlays(e, t) {\n    const n = __PRIVATE_newDocumentKeyMap();\n    let r = new SortedMap((e2, t2) => e2 - t2),\n      i = __PRIVATE_documentKeySet();\n    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, t).next(e2 => {\n      for (const i2 of e2) i2.keys().forEach(e3 => {\n        const s = t.get(e3);\n        if (null === s) return;\n        let o = n.get(e3) || FieldMask.empty();\n        o = i2.applyToLocalView(s, o), n.set(e3, o);\n        const _ = (r.get(i2.batchId) || __PRIVATE_documentKeySet()).add(e3);\n        r = r.insert(i2.batchId, _);\n      });\n    }).next(() => {\n      const s = [],\n        o = r.getReverseIterator();\n      for (; o.hasNext();) {\n        const r2 = o.getNext(),\n          _ = r2.key,\n          a = r2.value,\n          u = __PRIVATE_newMutationMap();\n        a.forEach(e2 => {\n          if (!i.has(e2)) {\n            const r3 = __PRIVATE_calculateOverlayMutation(t.get(e2), n.get(e2));\n            null !== r3 && u.set(e2, r3), i = i.add(e2);\n          }\n        }), s.push(this.documentOverlayCache.saveOverlays(e, _, u));\n      }\n      return PersistencePromise.waitFor(s);\n    }).next(() => n);\n  }\n  recalculateAndSaveOverlaysForDocumentKeys(e, t) {\n    return this.remoteDocumentCache.getEntries(e, t).next(t2 => this.recalculateAndSaveOverlays(e, t2));\n  }\n  getDocumentsMatchingQuery(e, t, n, r) {\n    return function __PRIVATE_isDocumentQuery$1(e2) {\n      return DocumentKey.isDocumentKey(e2.path) && null === e2.collectionGroup && 0 === e2.filters.length;\n    }(t) ? this.getDocumentsMatchingDocumentQuery(e, t.path) : __PRIVATE_isCollectionGroupQuery(t) ? this.getDocumentsMatchingCollectionGroupQuery(e, t, n, r) : this.getDocumentsMatchingCollectionQuery(e, t, n, r);\n  }\n  getNextDocuments(e, t, n, r) {\n    return this.remoteDocumentCache.getAllFromCollectionGroup(e, t, n, r).next(i => {\n      const s = r - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, t, n.largestBatchId, r - i.size) : PersistencePromise.resolve(__PRIVATE_newOverlayMap());\n      let o = -1,\n        _ = i;\n      return s.next(t2 => PersistencePromise.forEach(t2, (t3, n2) => (o < n2.largestBatchId && (o = n2.largestBatchId), i.get(t3) ? PersistencePromise.resolve() : this.remoteDocumentCache.getEntry(e, t3).next(e2 => {\n        _ = _.insert(t3, e2);\n      }))).next(() => this.populateOverlays(e, t2, i)).next(() => this.computeViews(e, _, t2, __PRIVATE_documentKeySet())).next(e2 => ({\n        batchId: o,\n        changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e2)\n      })));\n    });\n  }\n  getDocumentsMatchingDocumentQuery(e, t) {\n    return this.getDocument(e, new DocumentKey(t)).next(e2 => {\n      let t2 = documentMap();\n      return e2.isFoundDocument() && (t2 = t2.insert(e2.key, e2)), t2;\n    });\n  }\n  getDocumentsMatchingCollectionGroupQuery(e, t, n, r) {\n    const i = t.collectionGroup;\n    let s = documentMap();\n    return this.indexManager.getCollectionParents(e, i).next(o => PersistencePromise.forEach(o, o2 => {\n      const _ = function __PRIVATE_asCollectionQueryAtPath(e2, t2) {\n        return new __PRIVATE_QueryImpl(t2, null, e2.explicitOrderBy.slice(), e2.filters.slice(), e2.limit, e2.limitType, e2.startAt, e2.endAt);\n      }(t, o2.child(i));\n      return this.getDocumentsMatchingCollectionQuery(e, _, n, r).next(e2 => {\n        e2.forEach((e3, t2) => {\n          s = s.insert(e3, t2);\n        });\n      });\n    }).next(() => s));\n  }\n  getDocumentsMatchingCollectionQuery(e, t, n, r) {\n    let i;\n    return this.documentOverlayCache.getOverlaysForCollection(e, t.path, n.largestBatchId).next(s => (i = s, this.remoteDocumentCache.getDocumentsMatchingQuery(e, t, n, i, r))).next(e2 => {\n      i.forEach((t2, n3) => {\n        const r2 = n3.getKey();\n        null === e2.get(r2) && (e2 = e2.insert(r2, MutableDocument.newInvalidDocument(r2)));\n      });\n      let n2 = documentMap();\n      return e2.forEach((e3, r2) => {\n        const s = i.get(e3);\n        void 0 !== s && __PRIVATE_mutationApplyToLocalView(s.mutation, r2, FieldMask.empty(), Timestamp.now()), __PRIVATE_queryMatches(t, r2) && (n2 = n2.insert(e3, r2));\n      }), n2;\n    });\n  }\n};\nvar __PRIVATE_MemoryBundleCache = class {\n  constructor(e) {\n    this.serializer = e, this.ur = /* @__PURE__ */new Map(), this.cr = /* @__PURE__ */new Map();\n  }\n  getBundleMetadata(e, t) {\n    return PersistencePromise.resolve(this.ur.get(t));\n  }\n  saveBundleMetadata(e, t) {\n    return this.ur.set(t.id, function __PRIVATE_fromBundleMetadata(e2) {\n      return {\n        id: e2.id,\n        version: e2.version,\n        createTime: __PRIVATE_fromVersion(e2.createTime)\n      };\n    }(t)), PersistencePromise.resolve();\n  }\n  getNamedQuery(e, t) {\n    return PersistencePromise.resolve(this.cr.get(t));\n  }\n  saveNamedQuery(e, t) {\n    return this.cr.set(t.name, function __PRIVATE_fromProtoNamedQuery(e2) {\n      return {\n        name: e2.name,\n        query: __PRIVATE_fromBundledQuery(e2.bundledQuery),\n        readTime: __PRIVATE_fromVersion(e2.readTime)\n      };\n    }(t)), PersistencePromise.resolve();\n  }\n};\nvar __PRIVATE_MemoryDocumentOverlayCache = class {\n  constructor() {\n    this.overlays = new SortedMap(DocumentKey.comparator), this.lr = /* @__PURE__ */new Map();\n  }\n  getOverlay(e, t) {\n    return PersistencePromise.resolve(this.overlays.get(t));\n  }\n  getOverlays(e, t) {\n    const n = __PRIVATE_newOverlayMap();\n    return PersistencePromise.forEach(t, t2 => this.getOverlay(e, t2).next(e2 => {\n      null !== e2 && n.set(t2, e2);\n    })).next(() => n);\n  }\n  saveOverlays(e, t, n) {\n    return n.forEach((n2, r) => {\n      this.lt(e, t, r);\n    }), PersistencePromise.resolve();\n  }\n  removeOverlaysForBatchId(e, t, n) {\n    const r = this.lr.get(n);\n    return void 0 !== r && (r.forEach(e2 => this.overlays = this.overlays.remove(e2)), this.lr.delete(n)), PersistencePromise.resolve();\n  }\n  getOverlaysForCollection(e, t, n) {\n    const r = __PRIVATE_newOverlayMap(),\n      i = t.length + 1,\n      s = new DocumentKey(t.child(\"\")),\n      o = this.overlays.getIteratorFrom(s);\n    for (; o.hasNext();) {\n      const e2 = o.getNext().value,\n        s2 = e2.getKey();\n      if (!t.isPrefixOf(s2.path)) break;\n      s2.path.length === i && e2.largestBatchId > n && r.set(e2.getKey(), e2);\n    }\n    return PersistencePromise.resolve(r);\n  }\n  getOverlaysForCollectionGroup(e, t, n, r) {\n    let i = new SortedMap((e2, t2) => e2 - t2);\n    const s = this.overlays.getIterator();\n    for (; s.hasNext();) {\n      const e2 = s.getNext().value;\n      if (e2.getKey().getCollectionGroup() === t && e2.largestBatchId > n) {\n        let t2 = i.get(e2.largestBatchId);\n        null === t2 && (t2 = __PRIVATE_newOverlayMap(), i = i.insert(e2.largestBatchId, t2)), t2.set(e2.getKey(), e2);\n      }\n    }\n    const o = __PRIVATE_newOverlayMap(),\n      _ = i.getIterator();\n    for (; _.hasNext();) {\n      if (_.getNext().value.forEach((e2, t2) => o.set(e2, t2)), o.size() >= r) break;\n    }\n    return PersistencePromise.resolve(o);\n  }\n  lt(e, t, n) {\n    const r = this.overlays.get(n.key);\n    if (null !== r) {\n      const e2 = this.lr.get(r.largestBatchId).delete(n.key);\n      this.lr.set(r.largestBatchId, e2);\n    }\n    this.overlays = this.overlays.insert(n.key, new Overlay(t, n));\n    let i = this.lr.get(t);\n    void 0 === i && (i = __PRIVATE_documentKeySet(), this.lr.set(t, i)), this.lr.set(t, i.add(n.key));\n  }\n};\nvar __PRIVATE_ReferenceSet = class {\n  constructor() {\n    this.hr = new SortedSet(__PRIVATE_DocReference.Pr), this.Ir = new SortedSet(__PRIVATE_DocReference.Tr);\n  }\n  isEmpty() {\n    return this.hr.isEmpty();\n  }\n  addReference(e, t) {\n    const n = new __PRIVATE_DocReference(e, t);\n    this.hr = this.hr.add(n), this.Ir = this.Ir.add(n);\n  }\n  Er(e, t) {\n    e.forEach(e2 => this.addReference(e2, t));\n  }\n  removeReference(e, t) {\n    this.dr(new __PRIVATE_DocReference(e, t));\n  }\n  Ar(e, t) {\n    e.forEach(e2 => this.removeReference(e2, t));\n  }\n  Rr(e) {\n    const t = new DocumentKey(new ResourcePath([])),\n      n = new __PRIVATE_DocReference(t, e),\n      r = new __PRIVATE_DocReference(t, e + 1),\n      i = [];\n    return this.Ir.forEachInRange([n, r], e2 => {\n      this.dr(e2), i.push(e2.key);\n    }), i;\n  }\n  Vr() {\n    this.hr.forEach(e => this.dr(e));\n  }\n  dr(e) {\n    this.hr = this.hr.delete(e), this.Ir = this.Ir.delete(e);\n  }\n  mr(e) {\n    const t = new DocumentKey(new ResourcePath([])),\n      n = new __PRIVATE_DocReference(t, e),\n      r = new __PRIVATE_DocReference(t, e + 1);\n    let i = __PRIVATE_documentKeySet();\n    return this.Ir.forEachInRange([n, r], e2 => {\n      i = i.add(e2.key);\n    }), i;\n  }\n  containsKey(e) {\n    const t = new __PRIVATE_DocReference(e, 0),\n      n = this.hr.firstAfterOrEqual(t);\n    return null !== n && e.isEqual(n.key);\n  }\n};\nvar __PRIVATE_DocReference = class {\n  constructor(e, t) {\n    this.key = e, this.gr = t;\n  }\n  static Pr(e, t) {\n    return DocumentKey.comparator(e.key, t.key) || __PRIVATE_primitiveComparator(e.gr, t.gr);\n  }\n  static Tr(e, t) {\n    return __PRIVATE_primitiveComparator(e.gr, t.gr) || DocumentKey.comparator(e.key, t.key);\n  }\n};\nvar __PRIVATE_MemoryMutationQueue = class {\n  constructor(e, t) {\n    this.indexManager = e, this.referenceDelegate = t, this.mutationQueue = [], this.pr = 1, this.yr = new SortedSet(__PRIVATE_DocReference.Pr);\n  }\n  checkEmpty(e) {\n    return PersistencePromise.resolve(0 === this.mutationQueue.length);\n  }\n  addMutationBatch(e, t, n, r) {\n    const i = this.pr;\n    this.pr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];\n    const s = new MutationBatch(i, t, n, r);\n    this.mutationQueue.push(s);\n    for (const t2 of r) this.yr = this.yr.add(new __PRIVATE_DocReference(t2.key, i)), this.indexManager.addToCollectionParentIndex(e, t2.key.path.popLast());\n    return PersistencePromise.resolve(s);\n  }\n  lookupMutationBatch(e, t) {\n    return PersistencePromise.resolve(this.wr(t));\n  }\n  getNextMutationBatchAfterBatchId(e, t) {\n    const n = t + 1,\n      r = this.Sr(n),\n      i = r < 0 ? 0 : r;\n    return PersistencePromise.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);\n  }\n  getHighestUnacknowledgedBatchId() {\n    return PersistencePromise.resolve(0 === this.mutationQueue.length ? -1 : this.pr - 1);\n  }\n  getAllMutationBatches(e) {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n  getAllMutationBatchesAffectingDocumentKey(e, t) {\n    const n = new __PRIVATE_DocReference(t, 0),\n      r = new __PRIVATE_DocReference(t, Number.POSITIVE_INFINITY),\n      i = [];\n    return this.yr.forEachInRange([n, r], e2 => {\n      const t2 = this.wr(e2.gr);\n      i.push(t2);\n    }), PersistencePromise.resolve(i);\n  }\n  getAllMutationBatchesAffectingDocumentKeys(e, t) {\n    let n = new SortedSet(__PRIVATE_primitiveComparator);\n    return t.forEach(e2 => {\n      const t2 = new __PRIVATE_DocReference(e2, 0),\n        r = new __PRIVATE_DocReference(e2, Number.POSITIVE_INFINITY);\n      this.yr.forEachInRange([t2, r], e3 => {\n        n = n.add(e3.gr);\n      });\n    }), PersistencePromise.resolve(this.br(n));\n  }\n  getAllMutationBatchesAffectingQuery(e, t) {\n    const n = t.path,\n      r = n.length + 1;\n    let i = n;\n    DocumentKey.isDocumentKey(i) || (i = i.child(\"\"));\n    const s = new __PRIVATE_DocReference(new DocumentKey(i), 0);\n    let o = new SortedSet(__PRIVATE_primitiveComparator);\n    return this.yr.forEachWhile(e2 => {\n      const t2 = e2.key.path;\n      return !!n.isPrefixOf(t2) && (t2.length === r && (o = o.add(e2.gr)), true);\n    }, s), PersistencePromise.resolve(this.br(o));\n  }\n  br(e) {\n    const t = [];\n    return e.forEach(e2 => {\n      const n = this.wr(e2);\n      null !== n && t.push(n);\n    }), t;\n  }\n  removeMutationBatch(e, t) {\n    __PRIVATE_hardAssert(0 === this.Dr(t.batchId, \"removed\")), this.mutationQueue.shift();\n    let n = this.yr;\n    return PersistencePromise.forEach(t.mutations, r => {\n      const i = new __PRIVATE_DocReference(r.key, t.batchId);\n      return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(e, r.key);\n    }).next(() => {\n      this.yr = n;\n    });\n  }\n  Fn(e) {}\n  containsKey(e, t) {\n    const n = new __PRIVATE_DocReference(t, 0),\n      r = this.yr.firstAfterOrEqual(n);\n    return PersistencePromise.resolve(t.isEqual(r && r.key));\n  }\n  performConsistencyCheck(e) {\n    return this.mutationQueue.length, PersistencePromise.resolve();\n  }\n  Dr(e, t) {\n    return this.Sr(e);\n  }\n  Sr(e) {\n    if (0 === this.mutationQueue.length) return 0;\n    return e - this.mutationQueue[0].batchId;\n  }\n  wr(e) {\n    const t = this.Sr(e);\n    if (t < 0 || t >= this.mutationQueue.length) return null;\n    return this.mutationQueue[t];\n  }\n};\nvar __PRIVATE_MemoryRemoteDocumentCacheImpl = class {\n  constructor(e) {\n    this.Cr = e, this.docs = function __PRIVATE_documentEntryMap() {\n      return new SortedMap(DocumentKey.comparator);\n    }(), this.size = 0;\n  }\n  setIndexManager(e) {\n    this.indexManager = e;\n  }\n  addEntry(e, t) {\n    const n = t.key,\n      r = this.docs.get(n),\n      i = r ? r.size : 0,\n      s = this.Cr(t);\n    return this.docs = this.docs.insert(n, {\n      document: t.mutableCopy(),\n      size: s\n    }), this.size += s - i, this.indexManager.addToCollectionParentIndex(e, n.path.popLast());\n  }\n  removeEntry(e) {\n    const t = this.docs.get(e);\n    t && (this.docs = this.docs.remove(e), this.size -= t.size);\n  }\n  getEntry(e, t) {\n    const n = this.docs.get(t);\n    return PersistencePromise.resolve(n ? n.document.mutableCopy() : MutableDocument.newInvalidDocument(t));\n  }\n  getEntries(e, t) {\n    let n = __PRIVATE_mutableDocumentMap();\n    return t.forEach(e2 => {\n      const t2 = this.docs.get(e2);\n      n = n.insert(e2, t2 ? t2.document.mutableCopy() : MutableDocument.newInvalidDocument(e2));\n    }), PersistencePromise.resolve(n);\n  }\n  getDocumentsMatchingQuery(e, t, n, r) {\n    let i = __PRIVATE_mutableDocumentMap();\n    const s = t.path,\n      o = new DocumentKey(s.child(\"\")),\n      _ = this.docs.getIteratorFrom(o);\n    for (; _.hasNext();) {\n      const {\n        key: e2,\n        value: {\n          document: o2\n        }\n      } = _.getNext();\n      if (!s.isPrefixOf(e2.path)) break;\n      e2.path.length > s.length + 1 || __PRIVATE_indexOffsetComparator(__PRIVATE_newIndexOffsetFromDocument(o2), n) <= 0 || (r.has(o2.key) || __PRIVATE_queryMatches(t, o2)) && (i = i.insert(o2.key, o2.mutableCopy()));\n    }\n    return PersistencePromise.resolve(i);\n  }\n  getAllFromCollectionGroup(e, t, n, r) {\n    fail();\n  }\n  vr(e, t) {\n    return PersistencePromise.forEach(this.docs, e2 => t(e2));\n  }\n  newChangeBuffer(e) {\n    return new __PRIVATE_MemoryRemoteDocumentChangeBuffer(this);\n  }\n  getSize(e) {\n    return PersistencePromise.resolve(this.size);\n  }\n};\nvar __PRIVATE_MemoryRemoteDocumentChangeBuffer = class extends RemoteDocumentChangeBuffer {\n  constructor(e) {\n    super(), this._r = e;\n  }\n  applyChanges(e) {\n    const t = [];\n    return this.changes.forEach((n, r) => {\n      r.isValidDocument() ? t.push(this._r.addEntry(e, r)) : this._r.removeEntry(n);\n    }), PersistencePromise.waitFor(t);\n  }\n  getFromCache(e, t) {\n    return this._r.getEntry(e, t);\n  }\n  getAllFromCache(e, t) {\n    return this._r.getEntries(e, t);\n  }\n};\nvar __PRIVATE_MemoryTargetCache = class {\n  constructor(e) {\n    this.persistence = e, this.Fr = new ObjectMap(e2 => __PRIVATE_canonifyTarget(e2), __PRIVATE_targetEquals), this.lastRemoteSnapshotVersion = SnapshotVersion.min(), this.highestTargetId = 0, this.Mr = 0, this.Or = new __PRIVATE_ReferenceSet(), this.targetCount = 0, this.Nr = __PRIVATE_TargetIdGenerator.On();\n  }\n  forEachTarget(e, t) {\n    return this.Fr.forEach((e2, n) => t(n)), PersistencePromise.resolve();\n  }\n  getLastRemoteSnapshotVersion(e) {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n  getHighestSequenceNumber(e) {\n    return PersistencePromise.resolve(this.Mr);\n  }\n  allocateTargetId(e) {\n    return this.highestTargetId = this.Nr.next(), PersistencePromise.resolve(this.highestTargetId);\n  }\n  setTargetsMetadata(e, t, n) {\n    return n && (this.lastRemoteSnapshotVersion = n), t > this.Mr && (this.Mr = t), PersistencePromise.resolve();\n  }\n  kn(e) {\n    this.Fr.set(e.target, e);\n    const t = e.targetId;\n    t > this.highestTargetId && (this.Nr = new __PRIVATE_TargetIdGenerator(t), this.highestTargetId = t), e.sequenceNumber > this.Mr && (this.Mr = e.sequenceNumber);\n  }\n  addTargetData(e, t) {\n    return this.kn(t), this.targetCount += 1, PersistencePromise.resolve();\n  }\n  updateTargetData(e, t) {\n    return this.kn(t), PersistencePromise.resolve();\n  }\n  removeTargetData(e, t) {\n    return this.Fr.delete(t.target), this.Or.Rr(t.targetId), this.targetCount -= 1, PersistencePromise.resolve();\n  }\n  removeTargets(e, t, n) {\n    let r = 0;\n    const i = [];\n    return this.Fr.forEach((s, o) => {\n      o.sequenceNumber <= t && null === n.get(o.targetId) && (this.Fr.delete(s), i.push(this.removeMatchingKeysForTargetId(e, o.targetId)), r++);\n    }), PersistencePromise.waitFor(i).next(() => r);\n  }\n  getTargetCount(e) {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n  getTargetData(e, t) {\n    const n = this.Fr.get(t) || null;\n    return PersistencePromise.resolve(n);\n  }\n  addMatchingKeys(e, t, n) {\n    return this.Or.Er(t, n), PersistencePromise.resolve();\n  }\n  removeMatchingKeys(e, t, n) {\n    this.Or.Ar(t, n);\n    const r = this.persistence.referenceDelegate,\n      i = [];\n    return r && t.forEach(t2 => {\n      i.push(r.markPotentiallyOrphaned(e, t2));\n    }), PersistencePromise.waitFor(i);\n  }\n  removeMatchingKeysForTargetId(e, t) {\n    return this.Or.Rr(t), PersistencePromise.resolve();\n  }\n  getMatchingKeysForTargetId(e, t) {\n    const n = this.Or.mr(t);\n    return PersistencePromise.resolve(n);\n  }\n  containsKey(e, t) {\n    return PersistencePromise.resolve(this.Or.containsKey(t));\n  }\n};\nvar __PRIVATE_MemoryPersistence = class {\n  constructor(e, t) {\n    this.Br = {}, this.overlays = {}, this.Lr = new __PRIVATE_ListenSequence(0), this.kr = false, this.kr = true, this.referenceDelegate = e(this), this.qr = new __PRIVATE_MemoryTargetCache(this);\n    this.indexManager = new __PRIVATE_MemoryIndexManager(), this.remoteDocumentCache = function __PRIVATE_newMemoryRemoteDocumentCache(e2) {\n      return new __PRIVATE_MemoryRemoteDocumentCacheImpl(e2);\n    }(e2 => this.referenceDelegate.Qr(e2)), this.serializer = new __PRIVATE_LocalSerializer(t), this.Kr = new __PRIVATE_MemoryBundleCache(this.serializer);\n  }\n  start() {\n    return Promise.resolve();\n  }\n  shutdown() {\n    return this.kr = false, Promise.resolve();\n  }\n  get started() {\n    return this.kr;\n  }\n  setDatabaseDeletedListener() {}\n  setNetworkEnabled() {}\n  getIndexManager(e) {\n    return this.indexManager;\n  }\n  getDocumentOverlayCache(e) {\n    let t = this.overlays[e.toKey()];\n    return t || (t = new __PRIVATE_MemoryDocumentOverlayCache(), this.overlays[e.toKey()] = t), t;\n  }\n  getMutationQueue(e, t) {\n    let n = this.Br[e.toKey()];\n    return n || (n = new __PRIVATE_MemoryMutationQueue(t, this.referenceDelegate), this.Br[e.toKey()] = n), n;\n  }\n  getTargetCache() {\n    return this.qr;\n  }\n  getRemoteDocumentCache() {\n    return this.remoteDocumentCache;\n  }\n  getBundleCache() {\n    return this.Kr;\n  }\n  runTransaction(e, t, n) {\n    __PRIVATE_logDebug(\"MemoryPersistence\", \"Starting transaction:\", e);\n    const r = new __PRIVATE_MemoryTransaction(this.Lr.next());\n    return this.referenceDelegate.$r(), n(r).next(e2 => this.referenceDelegate.Ur(r).next(() => e2)).toPromise().then(e2 => (r.raiseOnCommittedEvent(), e2));\n  }\n  Wr(e, t) {\n    return PersistencePromise.or(Object.values(this.Br).map(n => () => n.containsKey(e, t)));\n  }\n};\nvar __PRIVATE_MemoryTransaction = class extends PersistenceTransaction {\n  constructor(e) {\n    super(), this.currentSequenceNumber = e;\n  }\n};\nvar __PRIVATE_MemoryEagerDelegate = class {\n  constructor(e) {\n    this.persistence = e, this.Gr = new __PRIVATE_ReferenceSet(), this.zr = null;\n  }\n  static jr(e) {\n    return new __PRIVATE_MemoryEagerDelegate(e);\n  }\n  get Hr() {\n    if (this.zr) return this.zr;\n    throw fail();\n  }\n  addReference(e, t, n) {\n    return this.Gr.addReference(n, t), this.Hr.delete(n.toString()), PersistencePromise.resolve();\n  }\n  removeReference(e, t, n) {\n    return this.Gr.removeReference(n, t), this.Hr.add(n.toString()), PersistencePromise.resolve();\n  }\n  markPotentiallyOrphaned(e, t) {\n    return this.Hr.add(t.toString()), PersistencePromise.resolve();\n  }\n  removeTarget(e, t) {\n    this.Gr.Rr(t.targetId).forEach(e2 => this.Hr.add(e2.toString()));\n    const n = this.persistence.getTargetCache();\n    return n.getMatchingKeysForTargetId(e, t.targetId).next(e2 => {\n      e2.forEach(e3 => this.Hr.add(e3.toString()));\n    }).next(() => n.removeTargetData(e, t));\n  }\n  $r() {\n    this.zr = /* @__PURE__ */new Set();\n  }\n  Ur(e) {\n    const t = this.persistence.getRemoteDocumentCache().newChangeBuffer();\n    return PersistencePromise.forEach(this.Hr, n => {\n      const r = DocumentKey.fromPath(n);\n      return this.Jr(e, r).next(e2 => {\n        e2 || t.removeEntry(r, SnapshotVersion.min());\n      });\n    }).next(() => (this.zr = null, t.apply(e)));\n  }\n  updateLimboDocument(e, t) {\n    return this.Jr(e, t).next(e2 => {\n      e2 ? this.Hr.delete(t.toString()) : this.Hr.add(t.toString());\n    });\n  }\n  Qr(e) {\n    return 0;\n  }\n  Jr(e, t) {\n    return PersistencePromise.or([() => PersistencePromise.resolve(this.Gr.containsKey(t)), () => this.persistence.getTargetCache().containsKey(e, t), () => this.persistence.Wr(e, t)]);\n  }\n};\nvar __PRIVATE_MemoryLruDelegate = class {\n  constructor(e, t) {\n    this.persistence = e, this.Yr = new ObjectMap(e2 => __PRIVATE_encodeResourcePath(e2.path), (e2, t2) => e2.isEqual(t2)), this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t);\n  }\n  static jr(e, t) {\n    return new __PRIVATE_MemoryLruDelegate(e, t);\n  }\n  $r() {}\n  Ur(e) {\n    return PersistencePromise.resolve();\n  }\n  forEachTarget(e, t) {\n    return this.persistence.getTargetCache().forEachTarget(e, t);\n  }\n  jn(e) {\n    const t = this.Yn(e);\n    return this.persistence.getTargetCache().getTargetCount(e).next(e2 => t.next(t2 => e2 + t2));\n  }\n  Yn(e) {\n    let t = 0;\n    return this.Hn(e, e2 => {\n      t++;\n    }).next(() => t);\n  }\n  Hn(e, t) {\n    return PersistencePromise.forEach(this.Yr, (n, r) => this.Xn(e, n, r).next(e2 => e2 ? PersistencePromise.resolve() : t(r)));\n  }\n  removeTargets(e, t, n) {\n    return this.persistence.getTargetCache().removeTargets(e, t, n);\n  }\n  removeOrphanedDocuments(e, t) {\n    let n = 0;\n    const r = this.persistence.getRemoteDocumentCache(),\n      i = r.newChangeBuffer();\n    return r.vr(e, r2 => this.Xn(e, r2, t).next(e2 => {\n      e2 || (n++, i.removeEntry(r2, SnapshotVersion.min()));\n    })).next(() => i.apply(e)).next(() => n);\n  }\n  markPotentiallyOrphaned(e, t) {\n    return this.Yr.set(t, e.currentSequenceNumber), PersistencePromise.resolve();\n  }\n  removeTarget(e, t) {\n    const n = t.withSequenceNumber(e.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(e, n);\n  }\n  addReference(e, t, n) {\n    return this.Yr.set(n, e.currentSequenceNumber), PersistencePromise.resolve();\n  }\n  removeReference(e, t, n) {\n    return this.Yr.set(n, e.currentSequenceNumber), PersistencePromise.resolve();\n  }\n  updateLimboDocument(e, t) {\n    return this.Yr.set(t, e.currentSequenceNumber), PersistencePromise.resolve();\n  }\n  Qr(e) {\n    let t = e.key.toString().length;\n    return e.isFoundDocument() && (t += __PRIVATE_estimateByteSize(e.data.value)), t;\n  }\n  Xn(e, t, n) {\n    return PersistencePromise.or([() => this.persistence.Wr(e, t), () => this.persistence.getTargetCache().containsKey(e, t), () => {\n      const e2 = this.Yr.get(t);\n      return PersistencePromise.resolve(void 0 !== e2 && e2 > n);\n    }]);\n  }\n  getCacheSize(e) {\n    return this.persistence.getRemoteDocumentCache().getSize(e);\n  }\n};\nvar __PRIVATE_SchemaConverter = class {\n  constructor(e) {\n    this.serializer = e;\n  }\n  N(e, t, n, r) {\n    const i = new __PRIVATE_SimpleDbTransaction(\"createOrUpgrade\", t);\n    n < 1 && r >= 1 && (!function __PRIVATE_createPrimaryClientStore(e2) {\n      e2.createObjectStore(\"owner\");\n    }(e), function __PRIVATE_createMutationQueue(e2) {\n      e2.createObjectStore(\"mutationQueues\", {\n        keyPath: \"userId\"\n      });\n      e2.createObjectStore(\"mutations\", {\n        keyPath: \"batchId\",\n        autoIncrement: true\n      }).createIndex(\"userMutationsIndex\", x, {\n        unique: true\n      }), e2.createObjectStore(\"documentMutations\");\n    }(e), __PRIVATE_createQueryCache(e), function __PRIVATE_createLegacyRemoteDocumentCache(e2) {\n      e2.createObjectStore(\"remoteDocuments\");\n    }(e));\n    let s = PersistencePromise.resolve();\n    return n < 3 && r >= 3 && (0 !== n && (!function __PRIVATE_dropQueryCache(e2) {\n      e2.deleteObjectStore(\"targetDocuments\"), e2.deleteObjectStore(\"targets\"), e2.deleteObjectStore(\"targetGlobal\");\n    }(e), __PRIVATE_createQueryCache(e)), s = s.next(() => function __PRIVATE_writeEmptyTargetGlobalEntry(e2) {\n      const t2 = e2.store(\"targetGlobal\"),\n        n2 = {\n          highestTargetId: 0,\n          highestListenSequenceNumber: 0,\n          lastRemoteSnapshotVersion: SnapshotVersion.min().toTimestamp(),\n          targetCount: 0\n        };\n      return t2.put(\"targetGlobalKey\", n2);\n    }(i))), n < 4 && r >= 4 && (0 !== n && (s = s.next(() => function __PRIVATE_upgradeMutationBatchSchemaAndMigrateData(e2, t2) {\n      return t2.store(\"mutations\").W().next(n2 => {\n        e2.deleteObjectStore(\"mutations\");\n        e2.createObjectStore(\"mutations\", {\n          keyPath: \"batchId\",\n          autoIncrement: true\n        }).createIndex(\"userMutationsIndex\", x, {\n          unique: true\n        });\n        const r2 = t2.store(\"mutations\"),\n          i2 = n2.map(e3 => r2.put(e3));\n        return PersistencePromise.waitFor(i2);\n      });\n    }(e, i))), s = s.next(() => {\n      !function __PRIVATE_createClientMetadataStore(e2) {\n        e2.createObjectStore(\"clientMetadata\", {\n          keyPath: \"clientId\"\n        });\n      }(e);\n    })), n < 5 && r >= 5 && (s = s.next(() => this.Zr(i))), n < 6 && r >= 6 && (s = s.next(() => (function __PRIVATE_createDocumentGlobalStore(e2) {\n      e2.createObjectStore(\"remoteDocumentGlobal\");\n    }(e), this.Xr(i)))), n < 7 && r >= 7 && (s = s.next(() => this.ei(i))), n < 8 && r >= 8 && (s = s.next(() => this.ti(e, i))), n < 9 && r >= 9 && (s = s.next(() => {\n      !function __PRIVATE_dropRemoteDocumentChangesStore(e2) {\n        e2.objectStoreNames.contains(\"remoteDocumentChanges\") && e2.deleteObjectStore(\"remoteDocumentChanges\");\n      }(e);\n    })), n < 10 && r >= 10 && (s = s.next(() => this.ni(i))), n < 11 && r >= 11 && (s = s.next(() => {\n      !function __PRIVATE_createBundlesStore(e2) {\n        e2.createObjectStore(\"bundles\", {\n          keyPath: \"bundleId\"\n        });\n      }(e), function __PRIVATE_createNamedQueriesStore(e2) {\n        e2.createObjectStore(\"namedQueries\", {\n          keyPath: \"name\"\n        });\n      }(e);\n    })), n < 12 && r >= 12 && (s = s.next(() => {\n      !function __PRIVATE_createDocumentOverlayStore(e2) {\n        const t2 = e2.createObjectStore(\"documentOverlays\", {\n          keyPath: z\n        });\n        t2.createIndex(\"collectionPathOverlayIndex\", j, {\n          unique: false\n        }), t2.createIndex(\"collectionGroupOverlayIndex\", H, {\n          unique: false\n        });\n      }(e);\n    })), n < 13 && r >= 13 && (s = s.next(() => function __PRIVATE_createRemoteDocumentCache(e2) {\n      const t2 = e2.createObjectStore(\"remoteDocumentsV14\", {\n        keyPath: N\n      });\n      t2.createIndex(\"documentKeyIndex\", B), t2.createIndex(\"collectionGroupIndex\", L);\n    }(e)).next(() => this.ri(e, i)).next(() => e.deleteObjectStore(\"remoteDocuments\"))), n < 14 && r >= 14 && (s = s.next(() => this.ii(e, i))), n < 15 && r >= 15 && (s = s.next(() => function __PRIVATE_createFieldIndex(e2) {\n      e2.createObjectStore(\"indexConfiguration\", {\n        keyPath: \"indexId\",\n        autoIncrement: true\n      }).createIndex(\"collectionGroupIndex\", \"collectionGroup\", {\n        unique: false\n      });\n      e2.createObjectStore(\"indexState\", {\n        keyPath: $\n      }).createIndex(\"sequenceNumberIndex\", U, {\n        unique: false\n      });\n      e2.createObjectStore(\"indexEntries\", {\n        keyPath: W\n      }).createIndex(\"documentKeyIndex\", G, {\n        unique: false\n      });\n    }(e))), s;\n  }\n  Xr(e) {\n    let t = 0;\n    return e.store(\"remoteDocuments\").Y((e2, n) => {\n      t += __PRIVATE_dbDocumentSize(n);\n    }).next(() => {\n      const n = {\n        byteSize: t\n      };\n      return e.store(\"remoteDocumentGlobal\").put(\"remoteDocumentGlobalKey\", n);\n    });\n  }\n  Zr(e) {\n    const t = e.store(\"mutationQueues\"),\n      n = e.store(\"mutations\");\n    return t.W().next(t2 => PersistencePromise.forEach(t2, t3 => {\n      const r = IDBKeyRange.bound([t3.userId, -1], [t3.userId, t3.lastAcknowledgedBatchId]);\n      return n.W(\"userMutationsIndex\", r).next(n2 => PersistencePromise.forEach(n2, n3 => {\n        __PRIVATE_hardAssert(n3.userId === t3.userId);\n        const r2 = __PRIVATE_fromDbMutationBatch(this.serializer, n3);\n        return removeMutationBatch(e, t3.userId, r2).next(() => {});\n      }));\n    }));\n  }\n  ei(e) {\n    const t = e.store(\"targetDocuments\"),\n      n = e.store(\"remoteDocuments\");\n    return e.store(\"targetGlobal\").get(\"targetGlobalKey\").next(e2 => {\n      const r = [];\n      return n.Y((n2, i) => {\n        const s = new ResourcePath(n2),\n          o = function __PRIVATE_sentinelKey(e3) {\n            return [0, __PRIVATE_encodeResourcePath(e3)];\n          }(s);\n        r.push(t.get(o).next(n3 => n3 ? PersistencePromise.resolve() : (n4 => t.put({\n          targetId: 0,\n          path: __PRIVATE_encodeResourcePath(n4),\n          sequenceNumber: e2.highestListenSequenceNumber\n        }))(s)));\n      }).next(() => PersistencePromise.waitFor(r));\n    });\n  }\n  ti(e, t) {\n    e.createObjectStore(\"collectionParents\", {\n      keyPath: K\n    });\n    const n = t.store(\"collectionParents\"),\n      r = new __PRIVATE_MemoryCollectionParentIndex(),\n      addEntry = e2 => {\n        if (r.add(e2)) {\n          const t2 = e2.lastSegment(),\n            r2 = e2.popLast();\n          return n.put({\n            collectionId: t2,\n            parent: __PRIVATE_encodeResourcePath(r2)\n          });\n        }\n      };\n    return t.store(\"remoteDocuments\").Y({\n      J: true\n    }, (e2, t2) => {\n      const n2 = new ResourcePath(e2);\n      return addEntry(n2.popLast());\n    }).next(() => t.store(\"documentMutations\").Y({\n      J: true\n    }, ([e2, t2, n2], r2) => {\n      const i = __PRIVATE_decodeResourcePath(t2);\n      return addEntry(i.popLast());\n    }));\n  }\n  ni(e) {\n    const t = e.store(\"targets\");\n    return t.Y((e2, n) => {\n      const r = __PRIVATE_fromDbTarget(n),\n        i = __PRIVATE_toDbTarget(this.serializer, r);\n      return t.put(i);\n    });\n  }\n  ri(e, t) {\n    const n = t.store(\"remoteDocuments\"),\n      r = [];\n    return n.Y((e2, n2) => {\n      const i = t.store(\"remoteDocumentsV14\"),\n        s = function __PRIVATE_extractKey(e3) {\n          return e3.document ? new DocumentKey(ResourcePath.fromString(e3.document.name).popFirst(5)) : e3.noDocument ? DocumentKey.fromSegments(e3.noDocument.path) : e3.unknownDocument ? DocumentKey.fromSegments(e3.unknownDocument.path) : fail();\n        }(n2).path.toArray(),\n        o = {\n          prefixPath: s.slice(0, s.length - 2),\n          collectionGroup: s[s.length - 2],\n          documentId: s[s.length - 1],\n          readTime: n2.readTime || [0, 0],\n          unknownDocument: n2.unknownDocument,\n          noDocument: n2.noDocument,\n          document: n2.document,\n          hasCommittedMutations: !!n2.hasCommittedMutations\n        };\n      r.push(i.put(o));\n    }).next(() => PersistencePromise.waitFor(r));\n  }\n  ii(e, t) {\n    const n = t.store(\"mutations\"),\n      r = __PRIVATE_newIndexedDbRemoteDocumentCache(this.serializer),\n      i = new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.jr, this.serializer.ut);\n    return n.W().next(e2 => {\n      const n2 = /* @__PURE__ */new Map();\n      return e2.forEach(e3 => {\n        var t2;\n        let r2 = null !== (t2 = n2.get(e3.userId)) && void 0 !== t2 ? t2 : __PRIVATE_documentKeySet();\n        __PRIVATE_fromDbMutationBatch(this.serializer, e3).keys().forEach(e4 => r2 = r2.add(e4)), n2.set(e3.userId, r2);\n      }), PersistencePromise.forEach(n2, (e3, n3) => {\n        const s = new User(n3),\n          o = __PRIVATE_IndexedDbDocumentOverlayCache.ct(this.serializer, s),\n          _ = i.getIndexManager(s),\n          a = __PRIVATE_IndexedDbMutationQueue.ct(s, this.serializer, _, i.referenceDelegate);\n        return new LocalDocumentsView(r, a, o, _).recalculateAndSaveOverlaysForDocumentKeys(new __PRIVATE_IndexedDbTransaction(t, __PRIVATE_ListenSequence._e), e3).next();\n      });\n    });\n  }\n};\nfunction __PRIVATE_createQueryCache(e) {\n  e.createObjectStore(\"targetDocuments\", {\n    keyPath: q\n  }).createIndex(\"documentTargetsIndex\", Q, {\n    unique: true\n  });\n  e.createObjectStore(\"targets\", {\n    keyPath: \"targetId\"\n  }).createIndex(\"queryTargetsIndex\", k, {\n    unique: true\n  }), e.createObjectStore(\"targetGlobal\");\n}\nvar Ae = \"Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.\";\nvar __PRIVATE_IndexedDbPersistence = class {\n  constructor(e, t, n, r, i, s, o, _, a, u, c = 15) {\n    if (this.allowTabSynchronization = e, this.persistenceKey = t, this.clientId = n, this.si = i, this.window = s, this.document = o, this.oi = a, this._i = u, this.ai = c, this.Lr = null, this.kr = false, this.isPrimary = false, this.networkEnabled = true, this.ui = null, this.inForeground = false, this.ci = null, this.li = null, this.hi = Number.NEGATIVE_INFINITY, this.Pi = e2 => Promise.resolve(), !__PRIVATE_IndexedDbPersistence.D()) throw new FirestoreError(C.UNIMPLEMENTED, \"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.\");\n    this.referenceDelegate = new __PRIVATE_IndexedDbLruDelegateImpl(this, r), this.Ii = t + \"main\", this.serializer = new __PRIVATE_LocalSerializer(_), this.Ti = new __PRIVATE_SimpleDb(this.Ii, this.ai, new __PRIVATE_SchemaConverter(this.serializer)), this.qr = new __PRIVATE_IndexedDbTargetCache(this.referenceDelegate, this.serializer), this.remoteDocumentCache = __PRIVATE_newIndexedDbRemoteDocumentCache(this.serializer), this.Kr = new __PRIVATE_IndexedDbBundleCache(), this.window && this.window.localStorage ? this.Ei = this.window.localStorage : (this.Ei = null, false === u && __PRIVATE_logError(\"IndexedDbPersistence\", \"LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page.\"));\n  }\n  start() {\n    return this.di().then(() => {\n      if (!this.isPrimary && !this.allowTabSynchronization) throw new FirestoreError(C.FAILED_PRECONDITION, Ae);\n      return this.Ai(), this.Ri(), this.Vi(), this.runTransaction(\"getHighestListenSequenceNumber\", \"readonly\", e => this.qr.getHighestSequenceNumber(e));\n    }).then(e => {\n      this.Lr = new __PRIVATE_ListenSequence(e, this.oi);\n    }).then(() => {\n      this.kr = true;\n    }).catch(e => (this.Ti && this.Ti.close(), Promise.reject(e)));\n  }\n  mi(e) {\n    return this.Pi = async t => {\n      if (this.started) return e(t);\n    }, e(this.isPrimary);\n  }\n  setDatabaseDeletedListener(e) {\n    this.Ti.L(async t => {\n      null === t.newVersion && (await e());\n    });\n  }\n  setNetworkEnabled(e) {\n    this.networkEnabled !== e && (this.networkEnabled = e, this.si.enqueueAndForget(async () => {\n      this.started && (await this.di());\n    }));\n  }\n  di() {\n    return this.runTransaction(\"updateClientMetadataAndTryBecomePrimary\", \"readwrite\", e => __PRIVATE_clientMetadataStore(e).put({\n      clientId: this.clientId,\n      updateTimeMs: Date.now(),\n      networkEnabled: this.networkEnabled,\n      inForeground: this.inForeground\n    }).next(() => {\n      if (this.isPrimary) return this.fi(e).next(e2 => {\n        e2 || (this.isPrimary = false, this.si.enqueueRetryable(() => this.Pi(false)));\n      });\n    }).next(() => this.gi(e)).next(t => this.isPrimary && !t ? this.pi(e).next(() => false) : !!t && this.yi(e).next(() => true))).catch(e => {\n      if (__PRIVATE_isIndexedDbTransactionError(e)) return __PRIVATE_logDebug(\"IndexedDbPersistence\", \"Failed to extend owner lease: \", e), this.isPrimary;\n      if (!this.allowTabSynchronization) throw e;\n      return __PRIVATE_logDebug(\"IndexedDbPersistence\", \"Releasing owner lease after error during lease refresh\", e), false;\n    }).then(e => {\n      this.isPrimary !== e && this.si.enqueueRetryable(() => this.Pi(e)), this.isPrimary = e;\n    });\n  }\n  fi(e) {\n    return __PRIVATE_primaryClientStore(e).get(\"owner\").next(e2 => PersistencePromise.resolve(this.wi(e2)));\n  }\n  Si(e) {\n    return __PRIVATE_clientMetadataStore(e).delete(this.clientId);\n  }\n  async bi() {\n    if (this.isPrimary && !this.Di(this.hi, 18e5)) {\n      this.hi = Date.now();\n      const e = await this.runTransaction(\"maybeGarbageCollectMultiClientState\", \"readwrite-primary\", e2 => {\n        const t = __PRIVATE_getStore(e2, \"clientMetadata\");\n        return t.W().next(e3 => {\n          const n = this.Ci(e3, 18e5),\n            r = e3.filter(e4 => -1 === n.indexOf(e4));\n          return PersistencePromise.forEach(r, e4 => t.delete(e4.clientId)).next(() => r);\n        });\n      }).catch(() => []);\n      if (this.Ei) for (const t of e) this.Ei.removeItem(this.vi(t.clientId));\n    }\n  }\n  Vi() {\n    this.li = this.si.enqueueAfterDelay(\"client_metadata_refresh\", 4e3, () => this.di().then(() => this.bi()).then(() => this.Vi()));\n  }\n  wi(e) {\n    return !!e && e.ownerId === this.clientId;\n  }\n  gi(e) {\n    if (this._i) return PersistencePromise.resolve(true);\n    return __PRIVATE_primaryClientStore(e).get(\"owner\").next(t => {\n      if (null !== t && this.Di(t.leaseTimestampMs, 5e3) && !this.Fi(t.ownerId)) {\n        if (this.wi(t) && this.networkEnabled) return true;\n        if (!this.wi(t)) {\n          if (!t.allowTabSynchronization) throw new FirestoreError(C.FAILED_PRECONDITION, Ae);\n          return false;\n        }\n      }\n      return !(!this.networkEnabled || !this.inForeground) || __PRIVATE_clientMetadataStore(e).W().next(e2 => void 0 === this.Ci(e2, 5e3).find(e3 => {\n        if (this.clientId !== e3.clientId) {\n          const t2 = !this.networkEnabled && e3.networkEnabled,\n            n = !this.inForeground && e3.inForeground,\n            r = this.networkEnabled === e3.networkEnabled;\n          if (t2 || n && r) return true;\n        }\n        return false;\n      }));\n    }).next(e2 => (this.isPrimary !== e2 && __PRIVATE_logDebug(\"IndexedDbPersistence\", `Client ${e2 ? \"is\" : \"is not\"} eligible for a primary lease.`), e2));\n  }\n  async shutdown() {\n    this.kr = false, this.Mi(), this.li && (this.li.cancel(), this.li = null), this.xi(), this.Oi(), await this.Ti.runTransaction(\"shutdown\", \"readwrite\", [\"owner\", \"clientMetadata\"], e => {\n      const t = new __PRIVATE_IndexedDbTransaction(e, __PRIVATE_ListenSequence._e);\n      return this.pi(t).next(() => this.Si(t));\n    }), this.Ti.close(), this.Ni();\n  }\n  Ci(e, t) {\n    return e.filter(e2 => this.Di(e2.updateTimeMs, t) && !this.Fi(e2.clientId));\n  }\n  Bi() {\n    return this.runTransaction(\"getActiveClients\", \"readonly\", e => __PRIVATE_clientMetadataStore(e).W().next(e2 => this.Ci(e2, 18e5).map(e3 => e3.clientId)));\n  }\n  get started() {\n    return this.kr;\n  }\n  getMutationQueue(e, t) {\n    return __PRIVATE_IndexedDbMutationQueue.ct(e, this.serializer, t, this.referenceDelegate);\n  }\n  getTargetCache() {\n    return this.qr;\n  }\n  getRemoteDocumentCache() {\n    return this.remoteDocumentCache;\n  }\n  getIndexManager(e) {\n    return new __PRIVATE_IndexedDbIndexManager(e, this.serializer.ut.databaseId);\n  }\n  getDocumentOverlayCache(e) {\n    return __PRIVATE_IndexedDbDocumentOverlayCache.ct(this.serializer, e);\n  }\n  getBundleCache() {\n    return this.Kr;\n  }\n  runTransaction(e, t, n) {\n    __PRIVATE_logDebug(\"IndexedDbPersistence\", \"Starting transaction:\", e);\n    const r = \"readonly\" === t ? \"readonly\" : \"readwrite\",\n      i = function __PRIVATE_getObjectStores(e2) {\n        return 15 === e2 ? ee : 14 === e2 ? X : 13 === e2 ? Z : 12 === e2 ? Y : 11 === e2 ? J : void fail();\n      }(this.ai);\n    let s;\n    return this.Ti.runTransaction(e, r, i, r2 => (s = new __PRIVATE_IndexedDbTransaction(r2, this.Lr ? this.Lr.next() : __PRIVATE_ListenSequence._e), \"readwrite-primary\" === t ? this.fi(s).next(e2 => !!e2 || this.gi(s)).next(t2 => {\n      if (!t2) throw __PRIVATE_logError(`Failed to obtain primary lease for action '${e}'.`), this.isPrimary = false, this.si.enqueueRetryable(() => this.Pi(false)), new FirestoreError(C.FAILED_PRECONDITION, F);\n      return n(s);\n    }).next(e2 => this.yi(s).next(() => e2)) : this.Li(s).next(() => n(s)))).then(e2 => (s.raiseOnCommittedEvent(), e2));\n  }\n  Li(e) {\n    return __PRIVATE_primaryClientStore(e).get(\"owner\").next(e2 => {\n      if (null !== e2 && this.Di(e2.leaseTimestampMs, 5e3) && !this.Fi(e2.ownerId) && !this.wi(e2) && !(this._i || this.allowTabSynchronization && e2.allowTabSynchronization)) throw new FirestoreError(C.FAILED_PRECONDITION, Ae);\n    });\n  }\n  yi(e) {\n    const t = {\n      ownerId: this.clientId,\n      allowTabSynchronization: this.allowTabSynchronization,\n      leaseTimestampMs: Date.now()\n    };\n    return __PRIVATE_primaryClientStore(e).put(\"owner\", t);\n  }\n  static D() {\n    return __PRIVATE_SimpleDb.D();\n  }\n  pi(e) {\n    const t = __PRIVATE_primaryClientStore(e);\n    return t.get(\"owner\").next(e2 => this.wi(e2) ? (__PRIVATE_logDebug(\"IndexedDbPersistence\", \"Releasing primary lease.\"), t.delete(\"owner\")) : PersistencePromise.resolve());\n  }\n  Di(e, t) {\n    const n = Date.now();\n    return !(e < n - t) && (!(e > n) || (__PRIVATE_logError(`Detected an update time that is in the future: ${e} > ${n}`), false));\n  }\n  Ai() {\n    null !== this.document && \"function\" == typeof this.document.addEventListener && (this.ci = () => {\n      this.si.enqueueAndForget(() => (this.inForeground = \"visible\" === this.document.visibilityState, this.di()));\n    }, this.document.addEventListener(\"visibilitychange\", this.ci), this.inForeground = \"visible\" === this.document.visibilityState);\n  }\n  xi() {\n    this.ci && (this.document.removeEventListener(\"visibilitychange\", this.ci), this.ci = null);\n  }\n  Ri() {\n    var e;\n    \"function\" == typeof (null === (e = this.window) || void 0 === e ? void 0 : e.addEventListener) && (this.ui = () => {\n      this.Mi();\n      const e2 = /(?:Version|Mobile)\\/1[456]/;\n      (0, import_util.isSafari)() && (navigator.appVersion.match(e2) || navigator.userAgent.match(e2)) && this.si.enterRestrictedMode(true), this.si.enqueueAndForget(() => this.shutdown());\n    }, this.window.addEventListener(\"pagehide\", this.ui));\n  }\n  Oi() {\n    this.ui && (this.window.removeEventListener(\"pagehide\", this.ui), this.ui = null);\n  }\n  Fi(e) {\n    var t;\n    try {\n      const n = null !== (null === (t = this.Ei) || void 0 === t ? void 0 : t.getItem(this.vi(e)));\n      return __PRIVATE_logDebug(\"IndexedDbPersistence\", `Client '${e}' ${n ? \"is\" : \"is not\"} zombied in LocalStorage`), n;\n    } catch (e2) {\n      return __PRIVATE_logError(\"IndexedDbPersistence\", \"Failed to get zombied client id.\", e2), false;\n    }\n  }\n  Mi() {\n    if (this.Ei) try {\n      this.Ei.setItem(this.vi(this.clientId), String(Date.now()));\n    } catch (e) {\n      __PRIVATE_logError(\"Failed to set zombie client id.\", e);\n    }\n  }\n  Ni() {\n    if (this.Ei) try {\n      this.Ei.removeItem(this.vi(this.clientId));\n    } catch (e) {}\n  }\n  vi(e) {\n    return `firestore_zombie_${this.persistenceKey}_${e}`;\n  }\n};\nfunction __PRIVATE_primaryClientStore(e) {\n  return __PRIVATE_getStore(e, \"owner\");\n}\nfunction __PRIVATE_clientMetadataStore(e) {\n  return __PRIVATE_getStore(e, \"clientMetadata\");\n}\nfunction __PRIVATE_indexedDbStoragePrefix(e, t) {\n  let n = e.projectId;\n  return e.isDefaultDatabase || (n += \".\" + e.database), \"firestore/\" + t + \"/\" + n + \"/\";\n}\nvar __PRIVATE_LocalViewChanges = class {\n  constructor(e, t, n, r) {\n    this.targetId = e, this.fromCache = t, this.ki = n, this.qi = r;\n  }\n  static Qi(e, t) {\n    let n = __PRIVATE_documentKeySet(),\n      r = __PRIVATE_documentKeySet();\n    for (const e2 of t.docChanges) switch (e2.type) {\n      case 0:\n        n = n.add(e2.doc.key);\n        break;\n      case 1:\n        r = r.add(e2.doc.key);\n    }\n    return new __PRIVATE_LocalViewChanges(e, t.fromCache, n, r);\n  }\n};\nvar QueryContext = class {\n  constructor() {\n    this._documentReadCount = 0;\n  }\n  get documentReadCount() {\n    return this._documentReadCount;\n  }\n  incrementDocumentReadCount(e) {\n    this._documentReadCount += e;\n  }\n};\nvar __PRIVATE_QueryEngine = class {\n  constructor() {\n    this.Ki = false, this.$i = false, this.Ui = 100, this.Wi = 8;\n  }\n  initialize(e, t) {\n    this.Gi = e, this.indexManager = t, this.Ki = true;\n  }\n  getDocumentsMatchingQuery(e, t, n, r) {\n    const i = {\n      result: null\n    };\n    return this.zi(e, t).next(e2 => {\n      i.result = e2;\n    }).next(() => {\n      if (!i.result) return this.ji(e, t, r, n).next(e2 => {\n        i.result = e2;\n      });\n    }).next(() => {\n      if (i.result) return;\n      const n2 = new QueryContext();\n      return this.Hi(e, t, n2).next(r2 => {\n        if (i.result = r2, this.$i) return this.Ji(e, t, n2, r2.size);\n      });\n    }).next(() => i.result);\n  }\n  Ji(e, t, n, r) {\n    return n.documentReadCount < this.Ui ? (__PRIVATE_getLogLevel() <= import_logger.LogLevel.DEBUG && __PRIVATE_logDebug(\"QueryEngine\", \"SDK will not create cache indexes for query:\", __PRIVATE_stringifyQuery(t), \"since it only creates cache indexes for collection contains\", \"more than or equal to\", this.Ui, \"documents\"), PersistencePromise.resolve()) : (__PRIVATE_getLogLevel() <= import_logger.LogLevel.DEBUG && __PRIVATE_logDebug(\"QueryEngine\", \"Query:\", __PRIVATE_stringifyQuery(t), \"scans\", n.documentReadCount, \"local documents and returns\", r, \"documents as results.\"), n.documentReadCount > this.Wi * r ? (__PRIVATE_getLogLevel() <= import_logger.LogLevel.DEBUG && __PRIVATE_logDebug(\"QueryEngine\", \"The SDK decides to create cache indexes for query:\", __PRIVATE_stringifyQuery(t), \"as using cache indexes may help improve performance.\"), this.indexManager.createTargetIndexes(e, __PRIVATE_queryToTarget(t))) : PersistencePromise.resolve());\n  }\n  zi(e, t) {\n    if (__PRIVATE_queryMatchesAllDocuments(t)) return PersistencePromise.resolve(null);\n    let n = __PRIVATE_queryToTarget(t);\n    return this.indexManager.getIndexType(e, n).next(r => 0 === r ? null : (null !== t.limit && 1 === r && (t = __PRIVATE_queryWithLimit(t, null, \"F\"), n = __PRIVATE_queryToTarget(t)), this.indexManager.getDocumentsMatchingTarget(e, n).next(r2 => {\n      const i = __PRIVATE_documentKeySet(...r2);\n      return this.Gi.getDocuments(e, i).next(r3 => this.indexManager.getMinOffset(e, n).next(n2 => {\n        const s = this.Yi(t, r3);\n        return this.Zi(t, s, i, n2.readTime) ? this.zi(e, __PRIVATE_queryWithLimit(t, null, \"F\")) : this.Xi(e, s, t, n2);\n      }));\n    })));\n  }\n  ji(e, t, n, r) {\n    return __PRIVATE_queryMatchesAllDocuments(t) || r.isEqual(SnapshotVersion.min()) ? PersistencePromise.resolve(null) : this.Gi.getDocuments(e, n).next(i => {\n      const s = this.Yi(t, i);\n      return this.Zi(t, s, n, r) ? PersistencePromise.resolve(null) : (__PRIVATE_getLogLevel() <= import_logger.LogLevel.DEBUG && __PRIVATE_logDebug(\"QueryEngine\", \"Re-using previous result from %s to execute query: %s\", r.toString(), __PRIVATE_stringifyQuery(t)), this.Xi(e, s, t, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r, -1)).next(e2 => e2));\n    });\n  }\n  Yi(e, t) {\n    let n = new SortedSet(__PRIVATE_newQueryComparator(e));\n    return t.forEach((t2, r) => {\n      __PRIVATE_queryMatches(e, r) && (n = n.add(r));\n    }), n;\n  }\n  Zi(e, t, n, r) {\n    if (null === e.limit) return false;\n    if (n.size !== t.size) return true;\n    const i = \"F\" === e.limitType ? t.last() : t.first();\n    return !!i && (i.hasPendingWrites || i.version.compareTo(r) > 0);\n  }\n  Hi(e, t, n) {\n    return __PRIVATE_getLogLevel() <= import_logger.LogLevel.DEBUG && __PRIVATE_logDebug(\"QueryEngine\", \"Using full collection scan to execute query:\", __PRIVATE_stringifyQuery(t)), this.Gi.getDocumentsMatchingQuery(e, t, IndexOffset.min(), n);\n  }\n  Xi(e, t, n, r) {\n    return this.Gi.getDocumentsMatchingQuery(e, n, r).next(e2 => (t.forEach(t2 => {\n      e2 = e2.insert(t2.key, t2);\n    }), e2));\n  }\n};\nvar __PRIVATE_LocalStoreImpl = class {\n  constructor(e, t, n, r) {\n    this.persistence = e, this.es = t, this.serializer = r, this.ts = new SortedMap(__PRIVATE_primitiveComparator), this.ns = new ObjectMap(e2 => __PRIVATE_canonifyTarget(e2), __PRIVATE_targetEquals), this.rs = /* @__PURE__ */new Map(), this.ss = e.getRemoteDocumentCache(), this.qr = e.getTargetCache(), this.Kr = e.getBundleCache(), this.os(n);\n  }\n  os(e) {\n    this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new LocalDocumentsView(this.ss, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.ss.setIndexManager(this.indexManager), this.es.initialize(this.localDocuments, this.indexManager);\n  }\n  collectGarbage(e) {\n    return this.persistence.runTransaction(\"Collect garbage\", \"readwrite-primary\", t => e.collect(t, this.ts));\n  }\n};\nfunction __PRIVATE_newLocalStore(e, t, n, r) {\n  return new __PRIVATE_LocalStoreImpl(e, t, n, r);\n}\nasync function __PRIVATE_localStoreHandleUserChange(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  return await n.persistence.runTransaction(\"Handle user change\", \"readonly\", e2 => {\n    let r;\n    return n.mutationQueue.getAllMutationBatches(e2).next(i => (r = i, n.os(t), n.mutationQueue.getAllMutationBatches(e2))).next(t2 => {\n      const i = [],\n        s = [];\n      let o = __PRIVATE_documentKeySet();\n      for (const e3 of r) {\n        i.push(e3.batchId);\n        for (const t3 of e3.mutations) o = o.add(t3.key);\n      }\n      for (const e3 of t2) {\n        s.push(e3.batchId);\n        for (const t3 of e3.mutations) o = o.add(t3.key);\n      }\n      return n.localDocuments.getDocuments(e2, o).next(e3 => ({\n        _s: e3,\n        removedBatchIds: i,\n        addedBatchIds: s\n      }));\n    });\n  });\n}\nfunction __PRIVATE_localStoreAcknowledgeBatch(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  return n.persistence.runTransaction(\"Acknowledge batch\", \"readwrite-primary\", e2 => {\n    const r = t.batch.keys(),\n      i = n.ss.newChangeBuffer({\n        trackRemovals: true\n      });\n    return function __PRIVATE_applyWriteToRemoteDocuments(e3, t2, n2, r2) {\n      const i2 = n2.batch,\n        s = i2.keys();\n      let o = PersistencePromise.resolve();\n      return s.forEach(e4 => {\n        o = o.next(() => r2.getEntry(t2, e4)).next(t3 => {\n          const s2 = n2.docVersions.get(e4);\n          __PRIVATE_hardAssert(null !== s2), t3.version.compareTo(s2) < 0 && (i2.applyToRemoteDocument(t3, n2), t3.isValidDocument() && (t3.setReadTime(n2.commitVersion), r2.addEntry(t3)));\n        });\n      }), o.next(() => e3.mutationQueue.removeMutationBatch(t2, i2));\n    }(n, e2, t, i).next(() => i.apply(e2)).next(() => n.mutationQueue.performConsistencyCheck(e2)).next(() => n.documentOverlayCache.removeOverlaysForBatchId(e2, r, t.batch.batchId)).next(() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e2, function __PRIVATE_getKeysWithTransformResults(e3) {\n      let t2 = __PRIVATE_documentKeySet();\n      for (let n2 = 0; n2 < e3.mutationResults.length; ++n2) {\n        e3.mutationResults[n2].transformResults.length > 0 && (t2 = t2.add(e3.batch.mutations[n2].key));\n      }\n      return t2;\n    }(t))).next(() => n.localDocuments.getDocuments(e2, r));\n  });\n}\nfunction __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e) {\n  const t = __PRIVATE_debugCast(e);\n  return t.persistence.runTransaction(\"Get last remote snapshot version\", \"readonly\", e2 => t.qr.getLastRemoteSnapshotVersion(e2));\n}\nfunction __PRIVATE_localStoreApplyRemoteEventToLocalCache(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = t.snapshotVersion;\n  let i = n.ts;\n  return n.persistence.runTransaction(\"Apply remote event\", \"readwrite-primary\", e2 => {\n    const s = n.ss.newChangeBuffer({\n      trackRemovals: true\n    });\n    i = n.ts;\n    const o = [];\n    t.targetChanges.forEach((s2, _2) => {\n      const a2 = i.get(_2);\n      if (!a2) return;\n      o.push(n.qr.removeMatchingKeys(e2, s2.removedDocuments, _2).next(() => n.qr.addMatchingKeys(e2, s2.addedDocuments, _2)));\n      let u = a2.withSequenceNumber(e2.currentSequenceNumber);\n      null !== t.targetMismatches.get(_2) ? u = u.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min()) : s2.resumeToken.approximateByteSize() > 0 && (u = u.withResumeToken(s2.resumeToken, r)), i = i.insert(_2, u), function __PRIVATE_shouldPersistTargetData(e3, t2, n2) {\n        if (0 === e3.resumeToken.approximateByteSize()) return true;\n        if (t2.snapshotVersion.toMicroseconds() - e3.snapshotVersion.toMicroseconds() >= 3e8) return true;\n        return n2.addedDocuments.size + n2.modifiedDocuments.size + n2.removedDocuments.size > 0;\n      }(a2, u, s2) && o.push(n.qr.updateTargetData(e2, u));\n    });\n    let _ = __PRIVATE_mutableDocumentMap(),\n      a = __PRIVATE_documentKeySet();\n    if (t.documentUpdates.forEach(r2 => {\n      t.resolvedLimboDocuments.has(r2) && o.push(n.persistence.referenceDelegate.updateLimboDocument(e2, r2));\n    }), o.push(__PRIVATE_populateDocumentChangeBuffer(e2, s, t.documentUpdates).next(e3 => {\n      _ = e3.us, a = e3.cs;\n    })), !r.isEqual(SnapshotVersion.min())) {\n      const t2 = n.qr.getLastRemoteSnapshotVersion(e2).next(t3 => n.qr.setTargetsMetadata(e2, e2.currentSequenceNumber, r));\n      o.push(t2);\n    }\n    return PersistencePromise.waitFor(o).next(() => s.apply(e2)).next(() => n.localDocuments.getLocalViewOfDocuments(e2, _, a)).next(() => _);\n  }).then(e2 => (n.ts = i, e2));\n}\nfunction __PRIVATE_populateDocumentChangeBuffer(e, t, n) {\n  let r = __PRIVATE_documentKeySet(),\n    i = __PRIVATE_documentKeySet();\n  return n.forEach(e2 => r = r.add(e2)), t.getEntries(e, r).next(e2 => {\n    let r2 = __PRIVATE_mutableDocumentMap();\n    return n.forEach((n2, s) => {\n      const o = e2.get(n2);\n      s.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n2)), s.isNoDocument() && s.version.isEqual(SnapshotVersion.min()) ? (t.removeEntry(n2, s.readTime), r2 = r2.insert(n2, s)) : !o.isValidDocument() || s.version.compareTo(o.version) > 0 || 0 === s.version.compareTo(o.version) && o.hasPendingWrites ? (t.addEntry(s), r2 = r2.insert(n2, s)) : __PRIVATE_logDebug(\"LocalStore\", \"Ignoring outdated watch update for \", n2, \". Current version:\", o.version, \" Watch version:\", s.version);\n    }), {\n      us: r2,\n      cs: i\n    };\n  });\n}\nfunction __PRIVATE_localStoreGetNextMutationBatch(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  return n.persistence.runTransaction(\"Get next mutation batch\", \"readonly\", e2 => (void 0 === t && (t = -1), n.mutationQueue.getNextMutationBatchAfterBatchId(e2, t)));\n}\nfunction __PRIVATE_localStoreAllocateTarget(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  return n.persistence.runTransaction(\"Allocate target\", \"readwrite\", e2 => {\n    let r;\n    return n.qr.getTargetData(e2, t).next(i => i ? (r = i, PersistencePromise.resolve(r)) : n.qr.allocateTargetId(e2).next(i2 => (r = new TargetData(t, i2, \"TargetPurposeListen\", e2.currentSequenceNumber), n.qr.addTargetData(e2, r).next(() => r))));\n  }).then(e2 => {\n    const r = n.ts.get(e2.targetId);\n    return (null === r || e2.snapshotVersion.compareTo(r.snapshotVersion) > 0) && (n.ts = n.ts.insert(e2.targetId, e2), n.ns.set(t, e2.targetId)), e2;\n  });\n}\nasync function __PRIVATE_localStoreReleaseTarget(e, t, n) {\n  const r = __PRIVATE_debugCast(e),\n    i = r.ts.get(t),\n    s = n ? \"readwrite\" : \"readwrite-primary\";\n  try {\n    n || (await r.persistence.runTransaction(\"Release target\", s, e2 => r.persistence.referenceDelegate.removeTarget(e2, i)));\n  } catch (e2) {\n    if (!__PRIVATE_isIndexedDbTransactionError(e2)) throw e2;\n    __PRIVATE_logDebug(\"LocalStore\", `Failed to update sequence numbers for target ${t}: ${e2}`);\n  }\n  r.ts = r.ts.remove(t), r.ns.delete(i.target);\n}\nfunction __PRIVATE_localStoreExecuteQuery(e, t, n) {\n  const r = __PRIVATE_debugCast(e);\n  let i = SnapshotVersion.min(),\n    s = __PRIVATE_documentKeySet();\n  return r.persistence.runTransaction(\"Execute query\", \"readwrite\", e2 => function __PRIVATE_localStoreGetTargetData(e3, t2, n2) {\n    const r2 = __PRIVATE_debugCast(e3),\n      i2 = r2.ns.get(n2);\n    return void 0 !== i2 ? PersistencePromise.resolve(r2.ts.get(i2)) : r2.qr.getTargetData(t2, n2);\n  }(r, e2, __PRIVATE_queryToTarget(t)).next(t2 => {\n    if (t2) return i = t2.lastLimboFreeSnapshotVersion, r.qr.getMatchingKeysForTargetId(e2, t2.targetId).next(e3 => {\n      s = e3;\n    });\n  }).next(() => r.es.getDocumentsMatchingQuery(e2, t, n ? i : SnapshotVersion.min(), n ? s : __PRIVATE_documentKeySet())).next(e3 => (__PRIVATE_setMaxReadTime(r, __PRIVATE_queryCollectionGroup(t), e3), {\n    documents: e3,\n    ls: s\n  })));\n}\nfunction __PRIVATE_localStoreGetCachedTarget(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = __PRIVATE_debugCast(n.qr),\n    i = n.ts.get(t);\n  return i ? Promise.resolve(i.target) : n.persistence.runTransaction(\"Get target data\", \"readonly\", e2 => r._t(e2, t).next(e3 => e3 ? e3.target : null));\n}\nfunction __PRIVATE_localStoreGetNewDocumentChanges(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = n.rs.get(t) || SnapshotVersion.min();\n  return n.persistence.runTransaction(\"Get new document changes\", \"readonly\", e2 => n.ss.getAllFromCollectionGroup(e2, t, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r, -1), Number.MAX_SAFE_INTEGER)).then(e2 => (__PRIVATE_setMaxReadTime(n, t, e2), e2));\n}\nfunction __PRIVATE_setMaxReadTime(e, t, n) {\n  let r = e.rs.get(t) || SnapshotVersion.min();\n  n.forEach((e2, t2) => {\n    t2.readTime.compareTo(r) > 0 && (r = t2.readTime);\n  }), e.rs.set(t, r);\n}\nasync function __PRIVATE_localStoreApplyBundledDocuments(e, t, n, r) {\n  const i = __PRIVATE_debugCast(e);\n  let s = __PRIVATE_documentKeySet(),\n    o = __PRIVATE_mutableDocumentMap();\n  for (const e2 of n) {\n    const n2 = t.hs(e2.metadata.name);\n    e2.document && (s = s.add(n2));\n    const r2 = t.Ps(e2);\n    r2.setReadTime(t.Is(e2.metadata.readTime)), o = o.insert(n2, r2);\n  }\n  const _ = i.ss.newChangeBuffer({\n      trackRemovals: true\n    }),\n    a = await __PRIVATE_localStoreAllocateTarget(i, function __PRIVATE_umbrellaTarget(e2) {\n      return __PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(ResourcePath.fromString(`__bundle__/docs/${e2}`)));\n    }(r));\n  return i.persistence.runTransaction(\"Apply bundle documents\", \"readwrite\", e2 => __PRIVATE_populateDocumentChangeBuffer(e2, _, o).next(t2 => (_.apply(e2), t2)).next(t2 => i.qr.removeMatchingKeysForTargetId(e2, a.targetId).next(() => i.qr.addMatchingKeys(e2, s, a.targetId)).next(() => i.localDocuments.getLocalViewOfDocuments(e2, t2.us, t2.cs)).next(() => t2.us)));\n}\nasync function __PRIVATE_localStoreSaveNamedQuery(e, t, n = __PRIVATE_documentKeySet()) {\n  const r = await __PRIVATE_localStoreAllocateTarget(e, __PRIVATE_queryToTarget(__PRIVATE_fromBundledQuery(t.bundledQuery))),\n    i = __PRIVATE_debugCast(e);\n  return i.persistence.runTransaction(\"Save named query\", \"readwrite\", e2 => {\n    const s = __PRIVATE_fromVersion(t.readTime);\n    if (r.snapshotVersion.compareTo(s) >= 0) return i.Kr.saveNamedQuery(e2, t);\n    const o = r.withResumeToken(ByteString.EMPTY_BYTE_STRING, s);\n    return i.ts = i.ts.insert(o.targetId, o), i.qr.updateTargetData(e2, o).next(() => i.qr.removeMatchingKeysForTargetId(e2, r.targetId)).next(() => i.qr.addMatchingKeys(e2, n, r.targetId)).next(() => i.Kr.saveNamedQuery(e2, t));\n  });\n}\nfunction createWebStorageClientStateKey(e, t) {\n  return `firestore_clients_${e}_${t}`;\n}\nfunction createWebStorageMutationBatchKey(e, t, n) {\n  let r = `firestore_mutations_${e}_${n}`;\n  return t.isAuthenticated() && (r += `_${t.uid}`), r;\n}\nfunction createWebStorageQueryTargetMetadataKey(e, t) {\n  return `firestore_targets_${e}_${t}`;\n}\nvar __PRIVATE_MutationMetadata = class {\n  constructor(e, t, n, r) {\n    this.user = e, this.batchId = t, this.state = n, this.error = r;\n  }\n  static Ts(e, t, n) {\n    const r = JSON.parse(n);\n    let i,\n      s = \"object\" == typeof r && -1 !== [\"pending\", \"acknowledged\", \"rejected\"].indexOf(r.state) && (void 0 === r.error || \"object\" == typeof r.error);\n    return s && r.error && (s = \"string\" == typeof r.error.message && \"string\" == typeof r.error.code, s && (i = new FirestoreError(r.error.code, r.error.message))), s ? new __PRIVATE_MutationMetadata(e, t, r.state, i) : (__PRIVATE_logError(\"SharedClientState\", `Failed to parse mutation state for ID '${t}': ${n}`), null);\n  }\n  Es() {\n    const e = {\n      state: this.state,\n      updateTimeMs: Date.now()\n    };\n    return this.error && (e.error = {\n      code: this.error.code,\n      message: this.error.message\n    }), JSON.stringify(e);\n  }\n};\nvar __PRIVATE_QueryTargetMetadata = class {\n  constructor(e, t, n) {\n    this.targetId = e, this.state = t, this.error = n;\n  }\n  static Ts(e, t) {\n    const n = JSON.parse(t);\n    let r,\n      i = \"object\" == typeof n && -1 !== [\"not-current\", \"current\", \"rejected\"].indexOf(n.state) && (void 0 === n.error || \"object\" == typeof n.error);\n    return i && n.error && (i = \"string\" == typeof n.error.message && \"string\" == typeof n.error.code, i && (r = new FirestoreError(n.error.code, n.error.message))), i ? new __PRIVATE_QueryTargetMetadata(e, n.state, r) : (__PRIVATE_logError(\"SharedClientState\", `Failed to parse target state for ID '${e}': ${t}`), null);\n  }\n  Es() {\n    const e = {\n      state: this.state,\n      updateTimeMs: Date.now()\n    };\n    return this.error && (e.error = {\n      code: this.error.code,\n      message: this.error.message\n    }), JSON.stringify(e);\n  }\n};\nvar __PRIVATE_RemoteClientState = class {\n  constructor(e, t) {\n    this.clientId = e, this.activeTargetIds = t;\n  }\n  static Ts(e, t) {\n    const n = JSON.parse(t);\n    let r = \"object\" == typeof n && n.activeTargetIds instanceof Array,\n      i = __PRIVATE_targetIdSet();\n    for (let e2 = 0; r && e2 < n.activeTargetIds.length; ++e2) r = isSafeInteger(n.activeTargetIds[e2]), i = i.add(n.activeTargetIds[e2]);\n    return r ? new __PRIVATE_RemoteClientState(e, i) : (__PRIVATE_logError(\"SharedClientState\", `Failed to parse client data for instance '${e}': ${t}`), null);\n  }\n};\nvar __PRIVATE_SharedOnlineState = class {\n  constructor(e, t) {\n    this.clientId = e, this.onlineState = t;\n  }\n  static Ts(e) {\n    const t = JSON.parse(e);\n    return \"object\" == typeof t && -1 !== [\"Unknown\", \"Online\", \"Offline\"].indexOf(t.onlineState) && \"string\" == typeof t.clientId ? new __PRIVATE_SharedOnlineState(t.clientId, t.onlineState) : (__PRIVATE_logError(\"SharedClientState\", `Failed to parse online state: ${e}`), null);\n  }\n};\nvar __PRIVATE_LocalClientState = class {\n  constructor() {\n    this.activeTargetIds = __PRIVATE_targetIdSet();\n  }\n  ds(e) {\n    this.activeTargetIds = this.activeTargetIds.add(e);\n  }\n  As(e) {\n    this.activeTargetIds = this.activeTargetIds.delete(e);\n  }\n  Es() {\n    const e = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now()\n    };\n    return JSON.stringify(e);\n  }\n};\nvar __PRIVATE_WebStorageSharedClientState = class {\n  constructor(e, t, n, r, i) {\n    this.window = e, this.si = t, this.persistenceKey = n, this.Rs = r, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.Vs = this.fs.bind(this), this.gs = new SortedMap(__PRIVATE_primitiveComparator), this.started = false, this.ps = [];\n    const s = n.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    this.storage = this.window.localStorage, this.currentUser = i, this.ys = createWebStorageClientStateKey(this.persistenceKey, this.Rs), this.ws = function createWebStorageSequenceNumberKey(e2) {\n      return `firestore_sequence_number_${e2}`;\n    }(this.persistenceKey), this.gs = this.gs.insert(this.Rs, new __PRIVATE_LocalClientState()), this.Ss = new RegExp(`^firestore_clients_${s}_([^_]*)$`), this.bs = new RegExp(`^firestore_mutations_${s}_(\\\\d+)(?:_(.*))?$`), this.Ds = new RegExp(`^firestore_targets_${s}_(\\\\d+)$`), this.Cs = function createWebStorageOnlineStateKey(e2) {\n      return `firestore_online_state_${e2}`;\n    }(this.persistenceKey), this.vs = function createBundleLoadedKey(e2) {\n      return `firestore_bundle_loaded_v2_${e2}`;\n    }(this.persistenceKey), this.window.addEventListener(\"storage\", this.Vs);\n  }\n  static D(e) {\n    return !(!e || !e.localStorage);\n  }\n  async start() {\n    const e = await this.syncEngine.Bi();\n    for (const t2 of e) {\n      if (t2 === this.Rs) continue;\n      const e2 = this.getItem(createWebStorageClientStateKey(this.persistenceKey, t2));\n      if (e2) {\n        const n = __PRIVATE_RemoteClientState.Ts(t2, e2);\n        n && (this.gs = this.gs.insert(n.clientId, n));\n      }\n    }\n    this.Fs();\n    const t = this.storage.getItem(this.Cs);\n    if (t) {\n      const e2 = this.Ms(t);\n      e2 && this.xs(e2);\n    }\n    for (const e2 of this.ps) this.fs(e2);\n    this.ps = [], this.window.addEventListener(\"pagehide\", () => this.shutdown()), this.started = true;\n  }\n  writeSequenceNumber(e) {\n    this.setItem(this.ws, JSON.stringify(e));\n  }\n  getAllActiveQueryTargets() {\n    return this.Os(this.gs);\n  }\n  isActiveQueryTarget(e) {\n    let t = false;\n    return this.gs.forEach((n, r) => {\n      r.activeTargetIds.has(e) && (t = true);\n    }), t;\n  }\n  addPendingMutation(e) {\n    this.Ns(e, \"pending\");\n  }\n  updateMutationState(e, t, n) {\n    this.Ns(e, t, n), this.Bs(e);\n  }\n  addLocalQueryTarget(e) {\n    let t = \"not-current\";\n    if (this.isActiveQueryTarget(e)) {\n      const n = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, e));\n      if (n) {\n        const r = __PRIVATE_QueryTargetMetadata.Ts(e, n);\n        r && (t = r.state);\n      }\n    }\n    return this.Ls.ds(e), this.Fs(), t;\n  }\n  removeLocalQueryTarget(e) {\n    this.Ls.As(e), this.Fs();\n  }\n  isLocalQueryTarget(e) {\n    return this.Ls.activeTargetIds.has(e);\n  }\n  clearQueryState(e) {\n    this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, e));\n  }\n  updateQueryState(e, t, n) {\n    this.ks(e, t, n);\n  }\n  handleUserChange(e, t, n) {\n    t.forEach(e2 => {\n      this.Bs(e2);\n    }), this.currentUser = e, n.forEach(e2 => {\n      this.addPendingMutation(e2);\n    });\n  }\n  setOnlineState(e) {\n    this.qs(e);\n  }\n  notifyBundleLoaded(e) {\n    this.Qs(e);\n  }\n  shutdown() {\n    this.started && (this.window.removeEventListener(\"storage\", this.Vs), this.removeItem(this.ys), this.started = false);\n  }\n  getItem(e) {\n    const t = this.storage.getItem(e);\n    return __PRIVATE_logDebug(\"SharedClientState\", \"READ\", e, t), t;\n  }\n  setItem(e, t) {\n    __PRIVATE_logDebug(\"SharedClientState\", \"SET\", e, t), this.storage.setItem(e, t);\n  }\n  removeItem(e) {\n    __PRIVATE_logDebug(\"SharedClientState\", \"REMOVE\", e), this.storage.removeItem(e);\n  }\n  fs(e) {\n    const t = e;\n    if (t.storageArea === this.storage) {\n      if (__PRIVATE_logDebug(\"SharedClientState\", \"EVENT\", t.key, t.newValue), t.key === this.ys) return void __PRIVATE_logError(\"Received WebStorage notification for local change. Another client might have garbage-collected our state\");\n      this.si.enqueueRetryable(async () => {\n        if (this.started) {\n          if (null !== t.key) {\n            if (this.Ss.test(t.key)) {\n              if (null == t.newValue) {\n                const e2 = this.Ks(t.key);\n                return this.$s(e2, null);\n              }\n              {\n                const e2 = this.Us(t.key, t.newValue);\n                if (e2) return this.$s(e2.clientId, e2);\n              }\n            } else if (this.bs.test(t.key)) {\n              if (null !== t.newValue) {\n                const e2 = this.Ws(t.key, t.newValue);\n                if (e2) return this.Gs(e2);\n              }\n            } else if (this.Ds.test(t.key)) {\n              if (null !== t.newValue) {\n                const e2 = this.zs(t.key, t.newValue);\n                if (e2) return this.js(e2);\n              }\n            } else if (t.key === this.Cs) {\n              if (null !== t.newValue) {\n                const e2 = this.Ms(t.newValue);\n                if (e2) return this.xs(e2);\n              }\n            } else if (t.key === this.ws) {\n              const e2 = function __PRIVATE_fromWebStorageSequenceNumber(e3) {\n                let t2 = __PRIVATE_ListenSequence._e;\n                if (null != e3) try {\n                  const n = JSON.parse(e3);\n                  __PRIVATE_hardAssert(\"number\" == typeof n), t2 = n;\n                } catch (e4) {\n                  __PRIVATE_logError(\"SharedClientState\", \"Failed to read sequence number from WebStorage\", e4);\n                }\n                return t2;\n              }(t.newValue);\n              e2 !== __PRIVATE_ListenSequence._e && this.sequenceNumberHandler(e2);\n            } else if (t.key === this.vs) {\n              const e2 = this.Hs(t.newValue);\n              await Promise.all(e2.map(e3 => this.syncEngine.Js(e3)));\n            }\n          }\n        } else this.ps.push(t);\n      });\n    }\n  }\n  get Ls() {\n    return this.gs.get(this.Rs);\n  }\n  Fs() {\n    this.setItem(this.ys, this.Ls.Es());\n  }\n  Ns(e, t, n) {\n    const r = new __PRIVATE_MutationMetadata(this.currentUser, e, t, n),\n      i = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, e);\n    this.setItem(i, r.Es());\n  }\n  Bs(e) {\n    const t = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, e);\n    this.removeItem(t);\n  }\n  qs(e) {\n    const t = {\n      clientId: this.Rs,\n      onlineState: e\n    };\n    this.storage.setItem(this.Cs, JSON.stringify(t));\n  }\n  ks(e, t, n) {\n    const r = createWebStorageQueryTargetMetadataKey(this.persistenceKey, e),\n      i = new __PRIVATE_QueryTargetMetadata(e, t, n);\n    this.setItem(r, i.Es());\n  }\n  Qs(e) {\n    const t = JSON.stringify(Array.from(e));\n    this.setItem(this.vs, t);\n  }\n  Ks(e) {\n    const t = this.Ss.exec(e);\n    return t ? t[1] : null;\n  }\n  Us(e, t) {\n    const n = this.Ks(e);\n    return __PRIVATE_RemoteClientState.Ts(n, t);\n  }\n  Ws(e, t) {\n    const n = this.bs.exec(e),\n      r = Number(n[1]),\n      i = void 0 !== n[2] ? n[2] : null;\n    return __PRIVATE_MutationMetadata.Ts(new User(i), r, t);\n  }\n  zs(e, t) {\n    const n = this.Ds.exec(e),\n      r = Number(n[1]);\n    return __PRIVATE_QueryTargetMetadata.Ts(r, t);\n  }\n  Ms(e) {\n    return __PRIVATE_SharedOnlineState.Ts(e);\n  }\n  Hs(e) {\n    return JSON.parse(e);\n  }\n  async Gs(e) {\n    if (e.user.uid === this.currentUser.uid) return this.syncEngine.Ys(e.batchId, e.state, e.error);\n    __PRIVATE_logDebug(\"SharedClientState\", `Ignoring mutation for non-active user ${e.user.uid}`);\n  }\n  js(e) {\n    return this.syncEngine.Zs(e.targetId, e.state, e.error);\n  }\n  $s(e, t) {\n    const n = t ? this.gs.insert(e, t) : this.gs.remove(e),\n      r = this.Os(this.gs),\n      i = this.Os(n),\n      s = [],\n      o = [];\n    return i.forEach(e2 => {\n      r.has(e2) || s.push(e2);\n    }), r.forEach(e2 => {\n      i.has(e2) || o.push(e2);\n    }), this.syncEngine.Xs(s, o).then(() => {\n      this.gs = n;\n    });\n  }\n  xs(e) {\n    this.gs.get(e.clientId) && this.onlineStateHandler(e.onlineState);\n  }\n  Os(e) {\n    let t = __PRIVATE_targetIdSet();\n    return e.forEach((e2, n) => {\n      t = t.unionWith(n.activeTargetIds);\n    }), t;\n  }\n};\nvar __PRIVATE_MemorySharedClientState = class {\n  constructor() {\n    this.eo = new __PRIVATE_LocalClientState(), this.no = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;\n  }\n  addPendingMutation(e) {}\n  updateMutationState(e, t, n) {}\n  addLocalQueryTarget(e) {\n    return this.eo.ds(e), this.no[e] || \"not-current\";\n  }\n  updateQueryState(e, t, n) {\n    this.no[e] = t;\n  }\n  removeLocalQueryTarget(e) {\n    this.eo.As(e);\n  }\n  isLocalQueryTarget(e) {\n    return this.eo.activeTargetIds.has(e);\n  }\n  clearQueryState(e) {\n    delete this.no[e];\n  }\n  getAllActiveQueryTargets() {\n    return this.eo.activeTargetIds;\n  }\n  isActiveQueryTarget(e) {\n    return this.eo.activeTargetIds.has(e);\n  }\n  start() {\n    return this.eo = new __PRIVATE_LocalClientState(), Promise.resolve();\n  }\n  handleUserChange(e, t, n) {}\n  setOnlineState(e) {}\n  shutdown() {}\n  writeSequenceNumber(e) {}\n  notifyBundleLoaded(e) {}\n};\nvar __PRIVATE_NoopConnectivityMonitor = class {\n  ro(e) {}\n  shutdown() {}\n};\nvar __PRIVATE_BrowserConnectivityMonitor = class {\n  constructor() {\n    this.io = () => this.so(), this.oo = () => this._o(), this.ao = [], this.uo();\n  }\n  ro(e) {\n    this.ao.push(e);\n  }\n  shutdown() {\n    window.removeEventListener(\"online\", this.io), window.removeEventListener(\"offline\", this.oo);\n  }\n  uo() {\n    window.addEventListener(\"online\", this.io), window.addEventListener(\"offline\", this.oo);\n  }\n  so() {\n    __PRIVATE_logDebug(\"ConnectivityMonitor\", \"Network connectivity changed: AVAILABLE\");\n    for (const e of this.ao) e(0);\n  }\n  _o() {\n    __PRIVATE_logDebug(\"ConnectivityMonitor\", \"Network connectivity changed: UNAVAILABLE\");\n    for (const e of this.ao) e(1);\n  }\n  static D() {\n    return \"undefined\" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;\n  }\n};\nvar Re = null;\nfunction __PRIVATE_generateUniqueDebugId() {\n  return null === Re ? Re = function __PRIVATE_generateInitialUniqueDebugId() {\n    return 268435456 + Math.round(2147483648 * Math.random());\n  }() : Re++, \"0x\" + Re.toString(16);\n}\nvar Ve = {\n  BatchGetDocuments: \"batchGet\",\n  Commit: \"commit\",\n  RunQuery: \"runQuery\",\n  RunAggregationQuery: \"runAggregationQuery\"\n};\nvar __PRIVATE_StreamBridge = class {\n  constructor(e) {\n    this.co = e.co, this.lo = e.lo;\n  }\n  ho(e) {\n    this.Po = e;\n  }\n  Io(e) {\n    this.To = e;\n  }\n  onMessage(e) {\n    this.Eo = e;\n  }\n  close() {\n    this.lo();\n  }\n  send(e) {\n    this.co(e);\n  }\n  Ao() {\n    this.Po();\n  }\n  Ro(e) {\n    this.To(e);\n  }\n  Vo(e) {\n    this.Eo(e);\n  }\n};\nvar me = \"WebChannelConnection\";\nvar __PRIVATE_WebChannelConnection = class extends class __PRIVATE_RestConnection {\n  constructor(e) {\n    this.databaseInfo = e, this.databaseId = e.databaseId;\n    const t = e.ssl ? \"https\" : \"http\",\n      n = encodeURIComponent(this.databaseId.projectId),\n      r = encodeURIComponent(this.databaseId.database);\n    this.mo = t + \"://\" + e.host, this.fo = `projects/${n}/databases/${r}`, this.po = \"(default)\" === this.databaseId.database ? `project_id=${n}` : `project_id=${n}&database_id=${r}`;\n  }\n  get yo() {\n    return false;\n  }\n  wo(e, t, n, r, i) {\n    const s = __PRIVATE_generateUniqueDebugId(),\n      o = this.So(e, t);\n    __PRIVATE_logDebug(\"RestConnection\", `Sending RPC '${e}' ${s}:`, o, n);\n    const _ = {\n      \"google-cloud-resource-prefix\": this.fo,\n      \"x-goog-request-params\": this.po\n    };\n    return this.bo(_, r, i), this.Do(e, o, _, n).then(t2 => (__PRIVATE_logDebug(\"RestConnection\", `Received RPC '${e}' ${s}: `, t2), t2), t2 => {\n      throw __PRIVATE_logWarn(\"RestConnection\", `RPC '${e}' ${s} failed with error: `, t2, \"url: \", o, \"request:\", n), t2;\n    });\n  }\n  Co(e, t, n, r, i, s) {\n    return this.wo(e, t, n, r, i);\n  }\n  bo(e, t, n) {\n    e[\"X-Goog-Api-Client\"] = function __PRIVATE_getGoogApiClientValue() {\n      return \"gl-js/ fire/\" + b;\n    }(), e[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (e[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), t && t.headers.forEach((t2, n2) => e[n2] = t2), n && n.headers.forEach((t2, n2) => e[n2] = t2);\n  }\n  So(e, t) {\n    const n = Ve[e];\n    return `${this.mo}/v1/${t}:${n}`;\n  }\n} {\n  constructor(e) {\n    super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;\n  }\n  Do(e, t, n, r) {\n    const i = __PRIVATE_generateUniqueDebugId();\n    return new Promise((s, o) => {\n      const _ = new import_webchannel_wrapper.XhrIo();\n      _.setWithCredentials(true), _.listenOnce(import_webchannel_wrapper.EventType.COMPLETE, () => {\n        try {\n          switch (_.getLastErrorCode()) {\n            case import_webchannel_wrapper.ErrorCode.NO_ERROR:\n              const t2 = _.getResponseJson();\n              __PRIVATE_logDebug(me, `XHR for RPC '${e}' ${i} received:`, JSON.stringify(t2)), s(t2);\n              break;\n            case import_webchannel_wrapper.ErrorCode.TIMEOUT:\n              __PRIVATE_logDebug(me, `RPC '${e}' ${i} timed out`), o(new FirestoreError(C.DEADLINE_EXCEEDED, \"Request time out\"));\n              break;\n            case import_webchannel_wrapper.ErrorCode.HTTP_ERROR:\n              const n2 = _.getStatus();\n              if (__PRIVATE_logDebug(me, `RPC '${e}' ${i} failed with status:`, n2, \"response text:\", _.getResponseText()), n2 > 0) {\n                let e2 = _.getResponseJson();\n                Array.isArray(e2) && (e2 = e2[0]);\n                const t3 = null == e2 ? void 0 : e2.error;\n                if (t3 && t3.status && t3.message) {\n                  const e3 = function __PRIVATE_mapCodeFromHttpResponseErrorStatus(e4) {\n                    const t4 = e4.toLowerCase().replace(/_/g, \"-\");\n                    return Object.values(C).indexOf(t4) >= 0 ? t4 : C.UNKNOWN;\n                  }(t3.status);\n                  o(new FirestoreError(e3, t3.message));\n                } else o(new FirestoreError(C.UNKNOWN, \"Server responded with status \" + _.getStatus()));\n              } else o(new FirestoreError(C.UNAVAILABLE, \"Connection failed.\"));\n              break;\n            default:\n              fail();\n          }\n        } finally {\n          __PRIVATE_logDebug(me, `RPC '${e}' ${i} completed.`);\n        }\n      });\n      const a = JSON.stringify(r);\n      __PRIVATE_logDebug(me, `RPC '${e}' ${i} sending request:`, r), _.send(t, \"POST\", a, n, 15);\n    });\n  }\n  vo(e, t, n) {\n    const r = __PRIVATE_generateUniqueDebugId(),\n      i = [this.mo, \"/\", \"google.firestore.v1.Firestore\", \"/\", e, \"/channel\"],\n      s = (0, import_webchannel_wrapper.createWebChannelTransport)(),\n      o = (0, import_webchannel_wrapper.getStatEventTarget)(),\n      _ = {\n        httpSessionIdParam: \"gsessionid\",\n        initMessageHeaders: {},\n        messageUrlParams: {\n          database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`\n        },\n        sendRawJson: true,\n        supportsCrossDomainXhr: true,\n        internalChannelParams: {\n          forwardChannelRequestTimeoutMs: 6e5\n        },\n        forceLongPolling: this.forceLongPolling,\n        detectBufferingProxy: this.autoDetectLongPolling\n      },\n      a = this.longPollingOptions.timeoutSeconds;\n    void 0 !== a && (_.longPollingTimeout = Math.round(1e3 * a)), this.useFetchStreams && (_.xmlHttpFactory = new import_webchannel_wrapper.FetchXmlHttpFactory({})), this.bo(_.initMessageHeaders, t, n), _.encodeInitMessageHeaders = true;\n    const u = i.join(\"\");\n    __PRIVATE_logDebug(me, `Creating RPC '${e}' stream ${r}: ${u}`, _);\n    const c = s.createWebChannel(u, _);\n    let l = false,\n      h = false;\n    const P = new __PRIVATE_StreamBridge({\n        co: t2 => {\n          h ? __PRIVATE_logDebug(me, `Not sending because RPC '${e}' stream ${r} is closed:`, t2) : (l || (__PRIVATE_logDebug(me, `Opening RPC '${e}' stream ${r} transport.`), c.open(), l = true), __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} sending:`, t2), c.send(t2));\n        },\n        lo: () => c.close()\n      }),\n      __PRIVATE_unguardedEventListen = (e2, t2, n2) => {\n        e2.listen(t2, e3 => {\n          try {\n            n2(e3);\n          } catch (e4) {\n            setTimeout(() => {\n              throw e4;\n            }, 0);\n          }\n        });\n      };\n    return __PRIVATE_unguardedEventListen(c, import_webchannel_wrapper.WebChannel.EventType.OPEN, () => {\n      h || __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} transport opened.`);\n    }), __PRIVATE_unguardedEventListen(c, import_webchannel_wrapper.WebChannel.EventType.CLOSE, () => {\n      h || (h = true, __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} transport closed`), P.Ro());\n    }), __PRIVATE_unguardedEventListen(c, import_webchannel_wrapper.WebChannel.EventType.ERROR, t2 => {\n      h || (h = true, __PRIVATE_logWarn(me, `RPC '${e}' stream ${r} transport errored:`, t2), P.Ro(new FirestoreError(C.UNAVAILABLE, \"The operation could not be completed\")));\n    }), __PRIVATE_unguardedEventListen(c, import_webchannel_wrapper.WebChannel.EventType.MESSAGE, t2 => {\n      var n2;\n      if (!h) {\n        const i2 = t2.data[0];\n        __PRIVATE_hardAssert(!!i2);\n        const s2 = i2,\n          o2 = s2.error || (null === (n2 = s2[0]) || void 0 === n2 ? void 0 : n2.error);\n        if (o2) {\n          __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} received error:`, o2);\n          const t3 = o2.status;\n          let n3 = function __PRIVATE_mapCodeFromRpcStatus(e2) {\n              const t4 = ue[e2];\n              if (void 0 !== t4) return __PRIVATE_mapCodeFromRpcCode(t4);\n            }(t3),\n            i3 = o2.message;\n          void 0 === n3 && (n3 = C.INTERNAL, i3 = \"Unknown error status: \" + t3 + \" with message \" + o2.message), h = true, P.Ro(new FirestoreError(n3, i3)), c.close();\n        } else __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} received:`, i2), P.Vo(i2);\n      }\n    }), __PRIVATE_unguardedEventListen(o, import_webchannel_wrapper.Event.STAT_EVENT, t2 => {\n      t2.stat === import_webchannel_wrapper.Stat.PROXY ? __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} detected buffering proxy`) : t2.stat === import_webchannel_wrapper.Stat.NOPROXY && __PRIVATE_logDebug(me, `RPC '${e}' stream ${r} detected no buffering proxy`);\n    }), setTimeout(() => {\n      P.Ao();\n    }, 0), P;\n  }\n};\nfunction __PRIVATE_getWindow() {\n  return \"undefined\" != typeof window ? window : null;\n}\nfunction getDocument() {\n  return \"undefined\" != typeof document ? document : null;\n}\nfunction __PRIVATE_newSerializer(e) {\n  return new JsonProtoSerializer(e, true);\n}\nvar __PRIVATE_ExponentialBackoff = class {\n  constructor(e, t, n = 1e3, r = 1.5, i = 6e4) {\n    this.si = e, this.timerId = t, this.Fo = n, this.Mo = r, this.xo = i, this.Oo = 0, this.No = null, this.Bo = Date.now(), this.reset();\n  }\n  reset() {\n    this.Oo = 0;\n  }\n  Lo() {\n    this.Oo = this.xo;\n  }\n  ko(e) {\n    this.cancel();\n    const t = Math.floor(this.Oo + this.qo()),\n      n = Math.max(0, Date.now() - this.Bo),\n      r = Math.max(0, t - n);\n    r > 0 && __PRIVATE_logDebug(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.Oo} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`), this.No = this.si.enqueueAfterDelay(this.timerId, r, () => (this.Bo = Date.now(), e())), this.Oo *= this.Mo, this.Oo < this.Fo && (this.Oo = this.Fo), this.Oo > this.xo && (this.Oo = this.xo);\n  }\n  Qo() {\n    null !== this.No && (this.No.skipDelay(), this.No = null);\n  }\n  cancel() {\n    null !== this.No && (this.No.cancel(), this.No = null);\n  }\n  qo() {\n    return (Math.random() - 0.5) * this.Oo;\n  }\n};\nvar __PRIVATE_PersistentStream = class {\n  constructor(e, t, n, r, i, s, o, _) {\n    this.si = e, this.Ko = n, this.$o = r, this.connection = i, this.authCredentialsProvider = s, this.appCheckCredentialsProvider = o, this.listener = _, this.state = 0, this.Uo = 0, this.Wo = null, this.Go = null, this.stream = null, this.zo = new __PRIVATE_ExponentialBackoff(e, t);\n  }\n  jo() {\n    return 1 === this.state || 5 === this.state || this.Ho();\n  }\n  Ho() {\n    return 2 === this.state || 3 === this.state;\n  }\n  start() {\n    4 !== this.state ? this.auth() : this.Jo();\n  }\n  async stop() {\n    this.jo() && (await this.close(0));\n  }\n  Yo() {\n    this.state = 0, this.zo.reset();\n  }\n  Zo() {\n    this.Ho() && null === this.Wo && (this.Wo = this.si.enqueueAfterDelay(this.Ko, 6e4, () => this.Xo()));\n  }\n  e_(e) {\n    this.t_(), this.stream.send(e);\n  }\n  async Xo() {\n    if (this.Ho()) return this.close(0);\n  }\n  t_() {\n    this.Wo && (this.Wo.cancel(), this.Wo = null);\n  }\n  n_() {\n    this.Go && (this.Go.cancel(), this.Go = null);\n  }\n  async close(e, t) {\n    this.t_(), this.n_(), this.zo.cancel(), this.Uo++, 4 !== e ? this.zo.reset() : t && t.code === C.RESOURCE_EXHAUSTED ? (__PRIVATE_logError(t.toString()), __PRIVATE_logError(\"Using maximum backoff delay to prevent overloading the backend.\"), this.zo.Lo()) : t && t.code === C.UNAUTHENTICATED && 3 !== this.state && (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), null !== this.stream && (this.r_(), this.stream.close(), this.stream = null), this.state = e, await this.listener.Io(t);\n  }\n  r_() {}\n  auth() {\n    this.state = 1;\n    const e = this.i_(this.Uo),\n      t = this.Uo;\n    Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([e2, n]) => {\n      this.Uo === t && this.s_(e2, n);\n    }, t2 => {\n      e(() => {\n        const e2 = new FirestoreError(C.UNKNOWN, \"Fetching auth token failed: \" + t2.message);\n        return this.o_(e2);\n      });\n    });\n  }\n  s_(e, t) {\n    const n = this.i_(this.Uo);\n    this.stream = this.__(e, t), this.stream.ho(() => {\n      n(() => (this.state = 2, this.Go = this.si.enqueueAfterDelay(this.$o, 1e4, () => (this.Ho() && (this.state = 3), Promise.resolve())), this.listener.ho()));\n    }), this.stream.Io(e2 => {\n      n(() => this.o_(e2));\n    }), this.stream.onMessage(e2 => {\n      n(() => this.onMessage(e2));\n    });\n  }\n  Jo() {\n    this.state = 5, this.zo.ko(async () => {\n      this.state = 0, this.start();\n    });\n  }\n  o_(e) {\n    return __PRIVATE_logDebug(\"PersistentStream\", `close with error: ${e}`), this.stream = null, this.close(4, e);\n  }\n  i_(e) {\n    return t => {\n      this.si.enqueueAndForget(() => this.Uo === e ? t() : (__PRIVATE_logDebug(\"PersistentStream\", \"stream callback skipped by getCloseGuardedDispatcher.\"), Promise.resolve()));\n    };\n  }\n};\nvar __PRIVATE_PersistentListenStream = class extends __PRIVATE_PersistentStream {\n  constructor(e, t, n, r, i, s) {\n    super(e, \"listen_stream_connection_backoff\", \"listen_stream_idle\", \"health_check_timeout\", t, n, r, s), this.serializer = i;\n  }\n  __(e, t) {\n    return this.connection.vo(\"Listen\", e, t);\n  }\n  onMessage(e) {\n    this.zo.reset();\n    const t = __PRIVATE_fromWatchChange(this.serializer, e),\n      n = function __PRIVATE_versionFromListenResponse(e2) {\n        if (!(\"targetChange\" in e2)) return SnapshotVersion.min();\n        const t2 = e2.targetChange;\n        return t2.targetIds && t2.targetIds.length ? SnapshotVersion.min() : t2.readTime ? __PRIVATE_fromVersion(t2.readTime) : SnapshotVersion.min();\n      }(e);\n    return this.listener.a_(t, n);\n  }\n  u_(e) {\n    const t = {};\n    t.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t.addTarget = function __PRIVATE_toTarget(e2, t2) {\n      let n2;\n      const r = t2.target;\n      if (n2 = __PRIVATE_targetIsDocumentTarget(r) ? {\n        documents: __PRIVATE_toDocumentsTarget(e2, r)\n      } : {\n        query: __PRIVATE_toQueryTarget(e2, r)\n      }, n2.targetId = t2.targetId, t2.resumeToken.approximateByteSize() > 0) {\n        n2.resumeToken = __PRIVATE_toBytes(e2, t2.resumeToken);\n        const r2 = __PRIVATE_toInt32Proto(e2, t2.expectedCount);\n        null !== r2 && (n2.expectedCount = r2);\n      } else if (t2.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n        n2.readTime = toTimestamp(e2, t2.snapshotVersion.toTimestamp());\n        const r2 = __PRIVATE_toInt32Proto(e2, t2.expectedCount);\n        null !== r2 && (n2.expectedCount = r2);\n      }\n      return n2;\n    }(this.serializer, e);\n    const n = __PRIVATE_toListenRequestLabels(this.serializer, e);\n    n && (t.labels = n), this.e_(t);\n  }\n  c_(e) {\n    const t = {};\n    t.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t.removeTarget = e, this.e_(t);\n  }\n};\nvar __PRIVATE_PersistentWriteStream = class extends __PRIVATE_PersistentStream {\n  constructor(e, t, n, r, i, s) {\n    super(e, \"write_stream_connection_backoff\", \"write_stream_idle\", \"health_check_timeout\", t, n, r, s), this.serializer = i, this.l_ = false;\n  }\n  get h_() {\n    return this.l_;\n  }\n  start() {\n    this.l_ = false, this.lastStreamToken = void 0, super.start();\n  }\n  r_() {\n    this.l_ && this.P_([]);\n  }\n  __(e, t) {\n    return this.connection.vo(\"Write\", e, t);\n  }\n  onMessage(e) {\n    if (__PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, this.l_) {\n      this.zo.reset();\n      const t = __PRIVATE_fromWriteResults(e.writeResults, e.commitTime),\n        n = __PRIVATE_fromVersion(e.commitTime);\n      return this.listener.I_(n, t);\n    }\n    return __PRIVATE_hardAssert(!e.writeResults || 0 === e.writeResults.length), this.l_ = true, this.listener.T_();\n  }\n  E_() {\n    const e = {};\n    e.database = __PRIVATE_getEncodedDatabaseId(this.serializer), this.e_(e);\n  }\n  P_(e) {\n    const t = {\n      streamToken: this.lastStreamToken,\n      writes: e.map(e2 => toMutation(this.serializer, e2))\n    };\n    this.e_(t);\n  }\n};\nvar __PRIVATE_DatastoreImpl = class extends class Datastore {} {\n  constructor(e, t, n, r) {\n    super(), this.authCredentials = e, this.appCheckCredentials = t, this.connection = n, this.serializer = r, this.d_ = false;\n  }\n  A_() {\n    if (this.d_) throw new FirestoreError(C.FAILED_PRECONDITION, \"The client has already been terminated.\");\n  }\n  wo(e, t, n) {\n    return this.A_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([r, i]) => this.connection.wo(e, t, n, r, i)).catch(e2 => {\n      throw \"FirebaseError\" === e2.name ? (e2.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e2) : new FirestoreError(C.UNKNOWN, e2.toString());\n    });\n  }\n  Co(e, t, n, r) {\n    return this.A_(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i, s]) => this.connection.Co(e, t, n, i, s, r)).catch(e2 => {\n      throw \"FirebaseError\" === e2.name ? (e2.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), e2) : new FirestoreError(C.UNKNOWN, e2.toString());\n    });\n  }\n  terminate() {\n    this.d_ = true;\n  }\n};\nasync function __PRIVATE_invokeRunAggregationQueryRpc(e, t, n) {\n  var r;\n  const i = __PRIVATE_debugCast(e),\n    {\n      request: s,\n      R_: o\n    } = function __PRIVATE_toRunAggregationQueryRequest(e2, t2, n2) {\n      const r2 = __PRIVATE_toQueryTarget(e2, t2),\n        i2 = {},\n        s2 = [];\n      let o2 = 0;\n      return n2.forEach(e3 => {\n        const t3 = \"aggregate_\" + o2++;\n        i2[t3] = e3.alias, \"count\" === e3.aggregateType ? s2.push({\n          alias: t3,\n          count: {}\n        }) : \"avg\" === e3.aggregateType ? s2.push({\n          alias: t3,\n          avg: {\n            field: __PRIVATE_toFieldPathReference(e3.fieldPath)\n          }\n        }) : \"sum\" === e3.aggregateType && s2.push({\n          alias: t3,\n          sum: {\n            field: __PRIVATE_toFieldPathReference(e3.fieldPath)\n          }\n        });\n      }), {\n        request: {\n          structuredAggregationQuery: {\n            aggregations: s2,\n            structuredQuery: r2.structuredQuery\n          },\n          parent: r2.parent\n        },\n        R_: i2\n      };\n    }(i.serializer, function __PRIVATE_queryToAggregateTarget(e2) {\n      const t2 = __PRIVATE_debugCast(e2);\n      return t2.Pe || (t2.Pe = __PRIVATE__queryToTarget(t2, e2.explicitOrderBy)), t2.Pe;\n    }(t), n),\n    _ = s.parent;\n  i.connection.yo || delete s.parent;\n  const a = (await i.Co(\"RunAggregationQuery\", _, s, 1)).filter(e2 => !!e2.result);\n  __PRIVATE_hardAssert(1 === a.length);\n  const u = null === (r = a[0].result) || void 0 === r ? void 0 : r.aggregateFields;\n  return Object.keys(u).reduce((e2, t2) => (e2[o[t2]] = u[t2], e2), {});\n}\nvar __PRIVATE_OnlineStateTracker = class {\n  constructor(e, t) {\n    this.asyncQueue = e, this.onlineStateHandler = t, this.state = \"Unknown\", this.V_ = 0, this.m_ = null, this.f_ = true;\n  }\n  g_() {\n    0 === this.V_ && (this.p_(\"Unknown\"), this.m_ = this.asyncQueue.enqueueAfterDelay(\"online_state_timeout\", 1e4, () => (this.m_ = null, this.y_(\"Backend didn't respond within 10 seconds.\"), this.p_(\"Offline\"), Promise.resolve())));\n  }\n  w_(e) {\n    \"Online\" === this.state ? this.p_(\"Unknown\") : (this.V_++, this.V_ >= 1 && (this.S_(), this.y_(`Connection failed 1 times. Most recent error: ${e.toString()}`), this.p_(\"Offline\")));\n  }\n  set(e) {\n    this.S_(), this.V_ = 0, \"Online\" === e && (this.f_ = false), this.p_(e);\n  }\n  p_(e) {\n    e !== this.state && (this.state = e, this.onlineStateHandler(e));\n  }\n  y_(e) {\n    const t = `Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;\n    this.f_ ? (__PRIVATE_logError(t), this.f_ = false) : __PRIVATE_logDebug(\"OnlineStateTracker\", t);\n  }\n  S_() {\n    null !== this.m_ && (this.m_.cancel(), this.m_ = null);\n  }\n};\nvar __PRIVATE_RemoteStoreImpl = class {\n  constructor(e, t, n, r, i) {\n    this.localStore = e, this.datastore = t, this.asyncQueue = n, this.remoteSyncer = {}, this.b_ = [], this.D_ = /* @__PURE__ */new Map(), this.C_ = /* @__PURE__ */new Set(), this.v_ = [], this.F_ = i, this.F_.ro(e2 => {\n      n.enqueueAndForget(async () => {\n        __PRIVATE_canUseNetwork(this) && (__PRIVATE_logDebug(\"RemoteStore\", \"Restarting streams for network reachability change.\"), await async function __PRIVATE_restartNetwork(e3) {\n          const t2 = __PRIVATE_debugCast(e3);\n          t2.C_.add(4), await __PRIVATE_disableNetworkInternal(t2), t2.M_.set(\"Unknown\"), t2.C_.delete(4), await __PRIVATE_enableNetworkInternal(t2);\n        }(this));\n      });\n    }), this.M_ = new __PRIVATE_OnlineStateTracker(n, r);\n  }\n};\nasync function __PRIVATE_enableNetworkInternal(e) {\n  if (__PRIVATE_canUseNetwork(e)) for (const t of e.v_) await t(true);\n}\nasync function __PRIVATE_disableNetworkInternal(e) {\n  for (const t of e.v_) await t(false);\n}\nfunction __PRIVATE_remoteStoreListen(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  n.D_.has(t.targetId) || (n.D_.set(t.targetId, t), __PRIVATE_shouldStartWatchStream(n) ? __PRIVATE_startWatchStream(n) : __PRIVATE_ensureWatchStream(n).Ho() && __PRIVATE_sendWatchRequest(n, t));\n}\nfunction __PRIVATE_remoteStoreUnlisten(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = __PRIVATE_ensureWatchStream(n);\n  n.D_.delete(t), r.Ho() && __PRIVATE_sendUnwatchRequest(n, t), 0 === n.D_.size && (r.Ho() ? r.Zo() : __PRIVATE_canUseNetwork(n) && n.M_.set(\"Unknown\"));\n}\nfunction __PRIVATE_sendWatchRequest(e, t) {\n  if (e.x_.Oe(t.targetId), t.resumeToken.approximateByteSize() > 0 || t.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    const n = e.remoteSyncer.getRemoteKeysForTarget(t.targetId).size;\n    t = t.withExpectedCount(n);\n  }\n  __PRIVATE_ensureWatchStream(e).u_(t);\n}\nfunction __PRIVATE_sendUnwatchRequest(e, t) {\n  e.x_.Oe(t), __PRIVATE_ensureWatchStream(e).c_(t);\n}\nfunction __PRIVATE_startWatchStream(e) {\n  e.x_ = new __PRIVATE_WatchChangeAggregator({\n    getRemoteKeysForTarget: t => e.remoteSyncer.getRemoteKeysForTarget(t),\n    _t: t => e.D_.get(t) || null,\n    nt: () => e.datastore.serializer.databaseId\n  }), __PRIVATE_ensureWatchStream(e).start(), e.M_.g_();\n}\nfunction __PRIVATE_shouldStartWatchStream(e) {\n  return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWatchStream(e).jo() && e.D_.size > 0;\n}\nfunction __PRIVATE_canUseNetwork(e) {\n  return 0 === __PRIVATE_debugCast(e).C_.size;\n}\nfunction __PRIVATE_cleanUpWatchStreamState(e) {\n  e.x_ = void 0;\n}\nasync function __PRIVATE_onWatchStreamOpen(e) {\n  e.D_.forEach((t, n) => {\n    __PRIVATE_sendWatchRequest(e, t);\n  });\n}\nasync function __PRIVATE_onWatchStreamClose(e, t) {\n  __PRIVATE_cleanUpWatchStreamState(e), __PRIVATE_shouldStartWatchStream(e) ? (e.M_.w_(t), __PRIVATE_startWatchStream(e)) : e.M_.set(\"Unknown\");\n}\nasync function __PRIVATE_onWatchStreamChange(e, t, n) {\n  if (e.M_.set(\"Online\"), t instanceof __PRIVATE_WatchTargetChange && 2 === t.state && t.cause) try {\n    await async function __PRIVATE_handleTargetError(e2, t2) {\n      const n2 = t2.cause;\n      for (const r of t2.targetIds) e2.D_.has(r) && (await e2.remoteSyncer.rejectListen(r, n2), e2.D_.delete(r), e2.x_.removeTarget(r));\n    }(e, t);\n  } catch (n2) {\n    __PRIVATE_logDebug(\"RemoteStore\", \"Failed to remove targets %s: %s \", t.targetIds.join(\",\"), n2), await __PRIVATE_disableNetworkUntilRecovery(e, n2);\n  } else if (t instanceof __PRIVATE_DocumentWatchChange ? e.x_.$e(t) : t instanceof __PRIVATE_ExistenceFilterChange ? e.x_.Je(t) : e.x_.Ge(t), !n.isEqual(SnapshotVersion.min())) try {\n    const t2 = await __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore);\n    n.compareTo(t2) >= 0 && (await function __PRIVATE_raiseWatchSnapshot(e2, t3) {\n      const n2 = e2.x_.it(t3);\n      return n2.targetChanges.forEach((n3, r) => {\n        if (n3.resumeToken.approximateByteSize() > 0) {\n          const i = e2.D_.get(r);\n          i && e2.D_.set(r, i.withResumeToken(n3.resumeToken, t3));\n        }\n      }), n2.targetMismatches.forEach((t4, n3) => {\n        const r = e2.D_.get(t4);\n        if (!r) return;\n        e2.D_.set(t4, r.withResumeToken(ByteString.EMPTY_BYTE_STRING, r.snapshotVersion)), __PRIVATE_sendUnwatchRequest(e2, t4);\n        const i = new TargetData(r.target, t4, n3, r.sequenceNumber);\n        __PRIVATE_sendWatchRequest(e2, i);\n      }), e2.remoteSyncer.applyRemoteEvent(n2);\n    }(e, n));\n  } catch (t2) {\n    __PRIVATE_logDebug(\"RemoteStore\", \"Failed to raise snapshot:\", t2), await __PRIVATE_disableNetworkUntilRecovery(e, t2);\n  }\n}\nasync function __PRIVATE_disableNetworkUntilRecovery(e, t, n) {\n  if (!__PRIVATE_isIndexedDbTransactionError(t)) throw t;\n  e.C_.add(1), await __PRIVATE_disableNetworkInternal(e), e.M_.set(\"Offline\"), n || (n = () => __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore)), e.asyncQueue.enqueueRetryable(async () => {\n    __PRIVATE_logDebug(\"RemoteStore\", \"Retrying IndexedDB access\"), await n(), e.C_.delete(1), await __PRIVATE_enableNetworkInternal(e);\n  });\n}\nfunction __PRIVATE_executeWithRecovery(e, t) {\n  return t().catch(n => __PRIVATE_disableNetworkUntilRecovery(e, n, t));\n}\nasync function __PRIVATE_fillWritePipeline(e) {\n  const t = __PRIVATE_debugCast(e),\n    n = __PRIVATE_ensureWriteStream(t);\n  let r = t.b_.length > 0 ? t.b_[t.b_.length - 1].batchId : -1;\n  for (; __PRIVATE_canAddToWritePipeline(t);) try {\n    const e2 = await __PRIVATE_localStoreGetNextMutationBatch(t.localStore, r);\n    if (null === e2) {\n      0 === t.b_.length && n.Zo();\n      break;\n    }\n    r = e2.batchId, __PRIVATE_addToWritePipeline(t, e2);\n  } catch (e2) {\n    await __PRIVATE_disableNetworkUntilRecovery(t, e2);\n  }\n  __PRIVATE_shouldStartWriteStream(t) && __PRIVATE_startWriteStream(t);\n}\nfunction __PRIVATE_canAddToWritePipeline(e) {\n  return __PRIVATE_canUseNetwork(e) && e.b_.length < 10;\n}\nfunction __PRIVATE_addToWritePipeline(e, t) {\n  e.b_.push(t);\n  const n = __PRIVATE_ensureWriteStream(e);\n  n.Ho() && n.h_ && n.P_(t.mutations);\n}\nfunction __PRIVATE_shouldStartWriteStream(e) {\n  return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWriteStream(e).jo() && e.b_.length > 0;\n}\nfunction __PRIVATE_startWriteStream(e) {\n  __PRIVATE_ensureWriteStream(e).start();\n}\nasync function __PRIVATE_onWriteStreamOpen(e) {\n  __PRIVATE_ensureWriteStream(e).E_();\n}\nasync function __PRIVATE_onWriteHandshakeComplete(e) {\n  const t = __PRIVATE_ensureWriteStream(e);\n  for (const n of e.b_) t.P_(n.mutations);\n}\nasync function __PRIVATE_onMutationResult(e, t, n) {\n  const r = e.b_.shift(),\n    i = MutationBatchResult.from(r, t, n);\n  await __PRIVATE_executeWithRecovery(e, () => e.remoteSyncer.applySuccessfulWrite(i)), await __PRIVATE_fillWritePipeline(e);\n}\nasync function __PRIVATE_onWriteStreamClose(e, t) {\n  t && __PRIVATE_ensureWriteStream(e).h_ && (await async function __PRIVATE_handleWriteError(e2, t2) {\n    if (function __PRIVATE_isPermanentWriteError(e3) {\n      return __PRIVATE_isPermanentError(e3) && e3 !== C.ABORTED;\n    }(t2.code)) {\n      const n = e2.b_.shift();\n      __PRIVATE_ensureWriteStream(e2).Yo(), await __PRIVATE_executeWithRecovery(e2, () => e2.remoteSyncer.rejectFailedWrite(n.batchId, t2)), await __PRIVATE_fillWritePipeline(e2);\n    }\n  }(e, t)), __PRIVATE_shouldStartWriteStream(e) && __PRIVATE_startWriteStream(e);\n}\nasync function __PRIVATE_remoteStoreHandleCredentialChange(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  n.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(\"RemoteStore\", \"RemoteStore received new credentials\");\n  const r = __PRIVATE_canUseNetwork(n);\n  n.C_.add(3), await __PRIVATE_disableNetworkInternal(n), r && n.M_.set(\"Unknown\"), await n.remoteSyncer.handleCredentialChange(t), n.C_.delete(3), await __PRIVATE_enableNetworkInternal(n);\n}\nasync function __PRIVATE_remoteStoreApplyPrimaryState(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  t ? (n.C_.delete(2), await __PRIVATE_enableNetworkInternal(n)) : t || (n.C_.add(2), await __PRIVATE_disableNetworkInternal(n), n.M_.set(\"Unknown\"));\n}\nfunction __PRIVATE_ensureWatchStream(e) {\n  return e.O_ || (e.O_ = function __PRIVATE_newPersistentWatchStream(e2, t, n) {\n    const r = __PRIVATE_debugCast(e2);\n    return r.A_(), new __PRIVATE_PersistentListenStream(t, r.connection, r.authCredentials, r.appCheckCredentials, r.serializer, n);\n  }(e.datastore, e.asyncQueue, {\n    ho: __PRIVATE_onWatchStreamOpen.bind(null, e),\n    Io: __PRIVATE_onWatchStreamClose.bind(null, e),\n    a_: __PRIVATE_onWatchStreamChange.bind(null, e)\n  }), e.v_.push(async t => {\n    t ? (e.O_.Yo(), __PRIVATE_shouldStartWatchStream(e) ? __PRIVATE_startWatchStream(e) : e.M_.set(\"Unknown\")) : (await e.O_.stop(), __PRIVATE_cleanUpWatchStreamState(e));\n  })), e.O_;\n}\nfunction __PRIVATE_ensureWriteStream(e) {\n  return e.N_ || (e.N_ = function __PRIVATE_newPersistentWriteStream(e2, t, n) {\n    const r = __PRIVATE_debugCast(e2);\n    return r.A_(), new __PRIVATE_PersistentWriteStream(t, r.connection, r.authCredentials, r.appCheckCredentials, r.serializer, n);\n  }(e.datastore, e.asyncQueue, {\n    ho: __PRIVATE_onWriteStreamOpen.bind(null, e),\n    Io: __PRIVATE_onWriteStreamClose.bind(null, e),\n    T_: __PRIVATE_onWriteHandshakeComplete.bind(null, e),\n    I_: __PRIVATE_onMutationResult.bind(null, e)\n  }), e.v_.push(async t => {\n    t ? (e.N_.Yo(), await __PRIVATE_fillWritePipeline(e)) : (await e.N_.stop(), e.b_.length > 0 && (__PRIVATE_logDebug(\"RemoteStore\", `Stopping write stream with ${e.b_.length} pending writes`), e.b_ = []));\n  })), e.N_;\n}\nvar DelayedOperation = class {\n  constructor(e, t, n, r, i) {\n    this.asyncQueue = e, this.timerId = t, this.targetTimeMs = n, this.op = r, this.removalCallback = i, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise), this.deferred.promise.catch(e2 => {});\n  }\n  get promise() {\n    return this.deferred.promise;\n  }\n  static createAndSchedule(e, t, n, r, i) {\n    const s = Date.now() + n,\n      o = new DelayedOperation(e, t, s, r, i);\n    return o.start(n), o;\n  }\n  start(e) {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), e);\n  }\n  skipDelay() {\n    return this.handleDelayElapsed();\n  }\n  cancel(e) {\n    null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(C.CANCELLED, \"Operation cancelled\" + (e ? \": \" + e : \"\"))));\n  }\n  handleDelayElapsed() {\n    this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then(e => this.deferred.resolve(e))) : Promise.resolve());\n  }\n  clearTimeout() {\n    null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);\n  }\n};\nfunction __PRIVATE_wrapInUserErrorIfRecoverable(e, t) {\n  if (__PRIVATE_logError(\"AsyncQueue\", `${t}: ${e}`), __PRIVATE_isIndexedDbTransactionError(e)) return new FirestoreError(C.UNAVAILABLE, `${t}: ${e}`);\n  throw e;\n}\nvar DocumentSet = class {\n  constructor(e) {\n    this.comparator = e ? (t, n) => e(t, n) || DocumentKey.comparator(t.key, n.key) : (e2, t) => DocumentKey.comparator(e2.key, t.key), this.keyedMap = documentMap(), this.sortedSet = new SortedMap(this.comparator);\n  }\n  static emptySet(e) {\n    return new DocumentSet(e.comparator);\n  }\n  has(e) {\n    return null != this.keyedMap.get(e);\n  }\n  get(e) {\n    return this.keyedMap.get(e);\n  }\n  first() {\n    return this.sortedSet.minKey();\n  }\n  last() {\n    return this.sortedSet.maxKey();\n  }\n  isEmpty() {\n    return this.sortedSet.isEmpty();\n  }\n  indexOf(e) {\n    const t = this.keyedMap.get(e);\n    return t ? this.sortedSet.indexOf(t) : -1;\n  }\n  get size() {\n    return this.sortedSet.size;\n  }\n  forEach(e) {\n    this.sortedSet.inorderTraversal((t, n) => (e(t), false));\n  }\n  add(e) {\n    const t = this.delete(e.key);\n    return t.copy(t.keyedMap.insert(e.key, e), t.sortedSet.insert(e, null));\n  }\n  delete(e) {\n    const t = this.get(e);\n    return t ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(t)) : this;\n  }\n  isEqual(e) {\n    if (!(e instanceof DocumentSet)) return false;\n    if (this.size !== e.size) return false;\n    const t = this.sortedSet.getIterator(),\n      n = e.sortedSet.getIterator();\n    for (; t.hasNext();) {\n      const e2 = t.getNext().key,\n        r = n.getNext().key;\n      if (!e2.isEqual(r)) return false;\n    }\n    return true;\n  }\n  toString() {\n    const e = [];\n    return this.forEach(t => {\n      e.push(t.toString());\n    }), 0 === e.length ? \"DocumentSet ()\" : \"DocumentSet (\\n  \" + e.join(\"  \\n\") + \"\\n)\";\n  }\n  copy(e, t) {\n    const n = new DocumentSet();\n    return n.comparator = this.comparator, n.keyedMap = e, n.sortedSet = t, n;\n  }\n};\nvar __PRIVATE_DocumentChangeSet = class {\n  constructor() {\n    this.B_ = new SortedMap(DocumentKey.comparator);\n  }\n  track(e) {\n    const t = e.doc.key,\n      n = this.B_.get(t);\n    n ? 0 !== e.type && 3 === n.type ? this.B_ = this.B_.insert(t, e) : 3 === e.type && 1 !== n.type ? this.B_ = this.B_.insert(t, {\n      type: n.type,\n      doc: e.doc\n    }) : 2 === e.type && 2 === n.type ? this.B_ = this.B_.insert(t, {\n      type: 2,\n      doc: e.doc\n    }) : 2 === e.type && 0 === n.type ? this.B_ = this.B_.insert(t, {\n      type: 0,\n      doc: e.doc\n    }) : 1 === e.type && 0 === n.type ? this.B_ = this.B_.remove(t) : 1 === e.type && 2 === n.type ? this.B_ = this.B_.insert(t, {\n      type: 1,\n      doc: n.doc\n    }) : 0 === e.type && 1 === n.type ? this.B_ = this.B_.insert(t, {\n      type: 2,\n      doc: e.doc\n    }) : fail() : this.B_ = this.B_.insert(t, e);\n  }\n  L_() {\n    const e = [];\n    return this.B_.inorderTraversal((t, n) => {\n      e.push(n);\n    }), e;\n  }\n};\nvar ViewSnapshot = class {\n  constructor(e, t, n, r, i, s, o, _, a) {\n    this.query = e, this.docs = t, this.oldDocs = n, this.docChanges = r, this.mutatedKeys = i, this.fromCache = s, this.syncStateChanged = o, this.excludesMetadataChanges = _, this.hasCachedResults = a;\n  }\n  static fromInitialDocuments(e, t, n, r, i) {\n    const s = [];\n    return t.forEach(e2 => {\n      s.push({\n        type: 0,\n        doc: e2\n      });\n    }), new ViewSnapshot(e, t, DocumentSet.emptySet(t), s, n, r, true, false, i);\n  }\n  get hasPendingWrites() {\n    return !this.mutatedKeys.isEmpty();\n  }\n  isEqual(e) {\n    if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && __PRIVATE_queryEquals(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return false;\n    const t = this.docChanges,\n      n = e.docChanges;\n    if (t.length !== n.length) return false;\n    for (let e2 = 0; e2 < t.length; e2++) if (t[e2].type !== n[e2].type || !t[e2].doc.isEqual(n[e2].doc)) return false;\n    return true;\n  }\n};\nvar __PRIVATE_QueryListenersInfo = class {\n  constructor() {\n    this.k_ = void 0, this.listeners = [];\n  }\n};\nvar __PRIVATE_EventManagerImpl = class {\n  constructor() {\n    this.queries = new ObjectMap(e => __PRIVATE_canonifyQuery(e), __PRIVATE_queryEquals), this.onlineState = \"Unknown\", this.q_ = /* @__PURE__ */new Set();\n  }\n};\nasync function __PRIVATE_eventManagerListen(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = t.query;\n  let i = false,\n    s = n.queries.get(r);\n  if (s || (i = true, s = new __PRIVATE_QueryListenersInfo()), i) try {\n    s.k_ = await n.onListen(r);\n  } catch (e2) {\n    const n2 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, `Initialization of query '${__PRIVATE_stringifyQuery(t.query)}' failed`);\n    return void t.onError(n2);\n  }\n  if (n.queries.set(r, s), s.listeners.push(t), t.Q_(n.onlineState), s.k_) {\n    t.K_(s.k_) && __PRIVATE_raiseSnapshotsInSyncEvent(n);\n  }\n}\nasync function __PRIVATE_eventManagerUnlisten(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = t.query;\n  let i = false;\n  const s = n.queries.get(r);\n  if (s) {\n    const e2 = s.listeners.indexOf(t);\n    e2 >= 0 && (s.listeners.splice(e2, 1), i = 0 === s.listeners.length);\n  }\n  if (i) return n.queries.delete(r), n.onUnlisten(r);\n}\nfunction __PRIVATE_eventManagerOnWatchChange(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  let r = false;\n  for (const e2 of t) {\n    const t2 = e2.query,\n      i = n.queries.get(t2);\n    if (i) {\n      for (const t3 of i.listeners) t3.K_(e2) && (r = true);\n      i.k_ = e2;\n    }\n  }\n  r && __PRIVATE_raiseSnapshotsInSyncEvent(n);\n}\nfunction __PRIVATE_eventManagerOnWatchError(e, t, n) {\n  const r = __PRIVATE_debugCast(e),\n    i = r.queries.get(t);\n  if (i) for (const e2 of i.listeners) e2.onError(n);\n  r.queries.delete(t);\n}\nfunction __PRIVATE_raiseSnapshotsInSyncEvent(e) {\n  e.q_.forEach(e2 => {\n    e2.next();\n  });\n}\nvar __PRIVATE_QueryListener = class {\n  constructor(e, t, n) {\n    this.query = e, this.U_ = t, this.W_ = false, this.G_ = null, this.onlineState = \"Unknown\", this.options = n || {};\n  }\n  K_(e) {\n    if (!this.options.includeMetadataChanges) {\n      const t2 = [];\n      for (const n of e.docChanges) 3 !== n.type && t2.push(n);\n      e = new ViewSnapshot(e.query, e.docs, e.oldDocs, t2, e.mutatedKeys, e.fromCache, e.syncStateChanged, true, e.hasCachedResults);\n    }\n    let t = false;\n    return this.W_ ? this.z_(e) && (this.U_.next(e), t = true) : this.j_(e, this.onlineState) && (this.H_(e), t = true), this.G_ = e, t;\n  }\n  onError(e) {\n    this.U_.error(e);\n  }\n  Q_(e) {\n    this.onlineState = e;\n    let t = false;\n    return this.G_ && !this.W_ && this.j_(this.G_, e) && (this.H_(this.G_), t = true), t;\n  }\n  j_(e, t) {\n    if (!e.fromCache) return true;\n    const n = \"Offline\" !== t;\n    return (!this.options.J_ || !n) && (!e.docs.isEmpty() || e.hasCachedResults || \"Offline\" === t);\n  }\n  z_(e) {\n    if (e.docChanges.length > 0) return true;\n    const t = this.G_ && this.G_.hasPendingWrites !== e.hasPendingWrites;\n    return !(!e.syncStateChanged && !t) && true === this.options.includeMetadataChanges;\n  }\n  H_(e) {\n    e = ViewSnapshot.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), this.W_ = true, this.U_.next(e);\n  }\n};\nvar __PRIVATE_SizedBundleElement = class {\n  constructor(e, t) {\n    this.Y_ = e, this.byteLength = t;\n  }\n  Z_() {\n    return \"metadata\" in this.Y_;\n  }\n};\nvar __PRIVATE_BundleConverterImpl = class {\n  constructor(e) {\n    this.serializer = e;\n  }\n  hs(e) {\n    return fromName(this.serializer, e);\n  }\n  Ps(e) {\n    return e.metadata.exists ? __PRIVATE_fromDocument(this.serializer, e.document, false) : MutableDocument.newNoDocument(this.hs(e.metadata.name), this.Is(e.metadata.readTime));\n  }\n  Is(e) {\n    return __PRIVATE_fromVersion(e);\n  }\n};\nvar __PRIVATE_BundleLoader = class {\n  constructor(e, t, n) {\n    this.X_ = e, this.localStore = t, this.serializer = n, this.queries = [], this.documents = [], this.collectionGroups = /* @__PURE__ */new Set(), this.progress = __PRIVATE_bundleInitialProgress(e);\n  }\n  ea(e) {\n    this.progress.bytesLoaded += e.byteLength;\n    let t = this.progress.documentsLoaded;\n    if (e.Y_.namedQuery) this.queries.push(e.Y_.namedQuery);else if (e.Y_.documentMetadata) {\n      this.documents.push({\n        metadata: e.Y_.documentMetadata\n      }), e.Y_.documentMetadata.exists || ++t;\n      const n = ResourcePath.fromString(e.Y_.documentMetadata.name);\n      this.collectionGroups.add(n.get(n.length - 2));\n    } else e.Y_.document && (this.documents[this.documents.length - 1].document = e.Y_.document, ++t);\n    return t !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = t, Object.assign({}, this.progress)) : null;\n  }\n  ta(e) {\n    const t = /* @__PURE__ */new Map(),\n      n = new __PRIVATE_BundleConverterImpl(this.serializer);\n    for (const r of e) if (r.metadata.queries) {\n      const e2 = n.hs(r.metadata.name);\n      for (const n2 of r.metadata.queries) {\n        const r2 = (t.get(n2) || __PRIVATE_documentKeySet()).add(e2);\n        t.set(n2, r2);\n      }\n    }\n    return t;\n  }\n  async complete() {\n    const e = await __PRIVATE_localStoreApplyBundledDocuments(this.localStore, new __PRIVATE_BundleConverterImpl(this.serializer), this.documents, this.X_.id),\n      t = this.ta(this.documents);\n    for (const e2 of this.queries) await __PRIVATE_localStoreSaveNamedQuery(this.localStore, e2, t.get(e2.name));\n    return this.progress.taskState = \"Success\", {\n      progress: this.progress,\n      na: this.collectionGroups,\n      ra: e\n    };\n  }\n};\nfunction __PRIVATE_bundleInitialProgress(e) {\n  return {\n    taskState: \"Running\",\n    documentsLoaded: 0,\n    bytesLoaded: 0,\n    totalDocuments: e.totalDocuments,\n    totalBytes: e.totalBytes\n  };\n}\nvar __PRIVATE_AddedLimboDocument = class {\n  constructor(e) {\n    this.key = e;\n  }\n};\nvar __PRIVATE_RemovedLimboDocument = class {\n  constructor(e) {\n    this.key = e;\n  }\n};\nvar __PRIVATE_View = class {\n  constructor(e, t) {\n    this.query = e, this.ia = t, this.sa = null, this.hasCachedResults = false, this.current = false, this.oa = __PRIVATE_documentKeySet(), this.mutatedKeys = __PRIVATE_documentKeySet(), this._a = __PRIVATE_newQueryComparator(e), this.aa = new DocumentSet(this._a);\n  }\n  get ua() {\n    return this.ia;\n  }\n  ca(e, t) {\n    const n = t ? t.la : new __PRIVATE_DocumentChangeSet(),\n      r = t ? t.aa : this.aa;\n    let i = t ? t.mutatedKeys : this.mutatedKeys,\n      s = r,\n      o = false;\n    const _ = \"F\" === this.query.limitType && r.size === this.query.limit ? r.last() : null,\n      a = \"L\" === this.query.limitType && r.size === this.query.limit ? r.first() : null;\n    if (e.inorderTraversal((e2, t2) => {\n      const u = r.get(e2),\n        c = __PRIVATE_queryMatches(this.query, t2) ? t2 : null,\n        l = !!u && this.mutatedKeys.has(u.key),\n        h = !!c && (c.hasLocalMutations || this.mutatedKeys.has(c.key) && c.hasCommittedMutations);\n      let P = false;\n      if (u && c) {\n        u.data.isEqual(c.data) ? l !== h && (n.track({\n          type: 3,\n          doc: c\n        }), P = true) : this.ha(u, c) || (n.track({\n          type: 2,\n          doc: c\n        }), P = true, (_ && this._a(c, _) > 0 || a && this._a(c, a) < 0) && (o = true));\n      } else !u && c ? (n.track({\n        type: 0,\n        doc: c\n      }), P = true) : u && !c && (n.track({\n        type: 1,\n        doc: u\n      }), P = true, (_ || a) && (o = true));\n      P && (c ? (s = s.add(c), i = h ? i.add(e2) : i.delete(e2)) : (s = s.delete(e2), i = i.delete(e2)));\n    }), null !== this.query.limit) for (; s.size > this.query.limit;) {\n      const e2 = \"F\" === this.query.limitType ? s.last() : s.first();\n      s = s.delete(e2.key), i = i.delete(e2.key), n.track({\n        type: 1,\n        doc: e2\n      });\n    }\n    return {\n      aa: s,\n      la: n,\n      Zi: o,\n      mutatedKeys: i\n    };\n  }\n  ha(e, t) {\n    return e.hasLocalMutations && t.hasCommittedMutations && !t.hasLocalMutations;\n  }\n  applyChanges(e, t, n) {\n    const r = this.aa;\n    this.aa = e.aa, this.mutatedKeys = e.mutatedKeys;\n    const i = e.la.L_();\n    i.sort((e2, t2) => function __PRIVATE_compareChangeType(e3, t3) {\n      const order = e4 => {\n        switch (e4) {\n          case 0:\n            return 1;\n          case 2:\n          case 3:\n            return 2;\n          case 1:\n            return 0;\n          default:\n            return fail();\n        }\n      };\n      return order(e3) - order(t3);\n    }(e2.type, t2.type) || this._a(e2.doc, t2.doc)), this.Pa(n);\n    const s = t ? this.Ia() : [],\n      o = 0 === this.oa.size && this.current ? 1 : 0,\n      _ = o !== this.sa;\n    if (this.sa = o, 0 !== i.length || _) {\n      return {\n        snapshot: new ViewSnapshot(this.query, e.aa, r, i, e.mutatedKeys, 0 === o, _, false, !!n && n.resumeToken.approximateByteSize() > 0),\n        Ta: s\n      };\n    }\n    return {\n      Ta: s\n    };\n  }\n  Q_(e) {\n    return this.current && \"Offline\" === e ? (this.current = false, this.applyChanges({\n      aa: this.aa,\n      la: new __PRIVATE_DocumentChangeSet(),\n      mutatedKeys: this.mutatedKeys,\n      Zi: false\n    }, false)) : {\n      Ta: []\n    };\n  }\n  Ea(e) {\n    return !this.ia.has(e) && !!this.aa.has(e) && !this.aa.get(e).hasLocalMutations;\n  }\n  Pa(e) {\n    e && (e.addedDocuments.forEach(e2 => this.ia = this.ia.add(e2)), e.modifiedDocuments.forEach(e2 => {}), e.removedDocuments.forEach(e2 => this.ia = this.ia.delete(e2)), this.current = e.current);\n  }\n  Ia() {\n    if (!this.current) return [];\n    const e = this.oa;\n    this.oa = __PRIVATE_documentKeySet(), this.aa.forEach(e2 => {\n      this.Ea(e2.key) && (this.oa = this.oa.add(e2.key));\n    });\n    const t = [];\n    return e.forEach(e2 => {\n      this.oa.has(e2) || t.push(new __PRIVATE_RemovedLimboDocument(e2));\n    }), this.oa.forEach(n => {\n      e.has(n) || t.push(new __PRIVATE_AddedLimboDocument(n));\n    }), t;\n  }\n  da(e) {\n    this.ia = e.ls, this.oa = __PRIVATE_documentKeySet();\n    const t = this.ca(e.documents);\n    return this.applyChanges(t, true);\n  }\n  Aa() {\n    return ViewSnapshot.fromInitialDocuments(this.query, this.aa, this.mutatedKeys, 0 === this.sa, this.hasCachedResults);\n  }\n};\nvar __PRIVATE_QueryView = class {\n  constructor(e, t, n) {\n    this.query = e, this.targetId = t, this.view = n;\n  }\n};\nvar LimboResolution = class {\n  constructor(e) {\n    this.key = e, this.Ra = false;\n  }\n};\nvar __PRIVATE_SyncEngineImpl = class {\n  constructor(e, t, n, r, i, s) {\n    this.localStore = e, this.remoteStore = t, this.eventManager = n, this.sharedClientState = r, this.currentUser = i, this.maxConcurrentLimboResolutions = s, this.Va = {}, this.ma = new ObjectMap(e2 => __PRIVATE_canonifyQuery(e2), __PRIVATE_queryEquals), this.fa = /* @__PURE__ */new Map(), this.ga = /* @__PURE__ */new Set(), this.pa = new SortedMap(DocumentKey.comparator), this.ya = /* @__PURE__ */new Map(), this.wa = new __PRIVATE_ReferenceSet(), this.Sa = {}, this.ba = /* @__PURE__ */new Map(), this.Da = __PRIVATE_TargetIdGenerator.Nn(), this.onlineState = \"Unknown\", this.Ca = void 0;\n  }\n  get isPrimaryClient() {\n    return true === this.Ca;\n  }\n};\nasync function __PRIVATE_syncEngineListen(e, t) {\n  const n = __PRIVATE_ensureWatchCallbacks(e);\n  let r, i;\n  const s = n.ma.get(t);\n  if (s) r = s.targetId, n.sharedClientState.addLocalQueryTarget(r), i = s.view.Aa();else {\n    const e2 = await __PRIVATE_localStoreAllocateTarget(n.localStore, __PRIVATE_queryToTarget(t)),\n      s2 = n.sharedClientState.addLocalQueryTarget(e2.targetId);\n    r = e2.targetId, i = await __PRIVATE_initializeViewAndComputeSnapshot(n, t, r, \"current\" === s2, e2.resumeToken), n.isPrimaryClient && __PRIVATE_remoteStoreListen(n.remoteStore, e2);\n  }\n  return i;\n}\nasync function __PRIVATE_initializeViewAndComputeSnapshot(e, t, n, r, i) {\n  e.va = (t2, n2, r2) => async function __PRIVATE_applyDocChanges(e2, t3, n3, r3) {\n    let i2 = t3.view.ca(n3);\n    i2.Zi && (i2 = await __PRIVATE_localStoreExecuteQuery(e2.localStore, t3.query, false).then(({\n      documents: e3\n    }) => t3.view.ca(e3, i2)));\n    const s2 = r3 && r3.targetChanges.get(t3.targetId),\n      o2 = t3.view.applyChanges(i2, e2.isPrimaryClient, s2);\n    return __PRIVATE_updateTrackedLimbos(e2, t3.targetId, o2.Ta), o2.snapshot;\n  }(e, t2, n2, r2);\n  const s = await __PRIVATE_localStoreExecuteQuery(e.localStore, t, true),\n    o = new __PRIVATE_View(t, s.ls),\n    _ = o.ca(s.documents),\n    a = TargetChange.createSynthesizedTargetChangeForCurrentChange(n, r && \"Offline\" !== e.onlineState, i),\n    u = o.applyChanges(_, e.isPrimaryClient, a);\n  __PRIVATE_updateTrackedLimbos(e, n, u.Ta);\n  const c = new __PRIVATE_QueryView(t, n, o);\n  return e.ma.set(t, c), e.fa.has(n) ? e.fa.get(n).push(t) : e.fa.set(n, [t]), u.snapshot;\n}\nasync function __PRIVATE_syncEngineUnlisten(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = n.ma.get(t),\n    i = n.fa.get(r.targetId);\n  if (i.length > 1) return n.fa.set(r.targetId, i.filter(e2 => !__PRIVATE_queryEquals(e2, t))), void n.ma.delete(t);\n  if (n.isPrimaryClient) {\n    n.sharedClientState.removeLocalQueryTarget(r.targetId);\n    n.sharedClientState.isActiveQueryTarget(r.targetId) || (await __PRIVATE_localStoreReleaseTarget(n.localStore, r.targetId, false).then(() => {\n      n.sharedClientState.clearQueryState(r.targetId), __PRIVATE_remoteStoreUnlisten(n.remoteStore, r.targetId), __PRIVATE_removeAndCleanupTarget(n, r.targetId);\n    }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss));\n  } else __PRIVATE_removeAndCleanupTarget(n, r.targetId), await __PRIVATE_localStoreReleaseTarget(n.localStore, r.targetId, true);\n}\nasync function __PRIVATE_syncEngineWrite(e, t, n) {\n  const r = __PRIVATE_syncEngineEnsureWriteCallbacks(e);\n  try {\n    const e2 = await function __PRIVATE_localStoreWriteLocally(e3, t2) {\n      const n2 = __PRIVATE_debugCast(e3),\n        r2 = Timestamp.now(),\n        i = t2.reduce((e4, t3) => e4.add(t3.key), __PRIVATE_documentKeySet());\n      let s, o;\n      return n2.persistence.runTransaction(\"Locally write mutations\", \"readwrite\", e4 => {\n        let _ = __PRIVATE_mutableDocumentMap(),\n          a = __PRIVATE_documentKeySet();\n        return n2.ss.getEntries(e4, i).next(e5 => {\n          _ = e5, _.forEach((e6, t3) => {\n            t3.isValidDocument() || (a = a.add(e6));\n          });\n        }).next(() => n2.localDocuments.getOverlayedDocuments(e4, _)).next(i2 => {\n          s = i2;\n          const o2 = [];\n          for (const e5 of t2) {\n            const t3 = __PRIVATE_mutationExtractBaseValue(e5, s.get(e5.key).overlayedDocument);\n            null != t3 && o2.push(new __PRIVATE_PatchMutation(e5.key, t3, __PRIVATE_extractFieldMask(t3.value.mapValue), Precondition.exists(true)));\n          }\n          return n2.mutationQueue.addMutationBatch(e4, r2, o2, t2);\n        }).next(t3 => {\n          o = t3;\n          const r3 = t3.applyToLocalDocumentSet(s, a);\n          return n2.documentOverlayCache.saveOverlays(e4, t3.batchId, r3);\n        });\n      }).then(() => ({\n        batchId: o.batchId,\n        changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(s)\n      }));\n    }(r.localStore, t);\n    r.sharedClientState.addPendingMutation(e2.batchId), function __PRIVATE_addMutationCallback(e3, t2, n2) {\n      let r2 = e3.Sa[e3.currentUser.toKey()];\n      r2 || (r2 = new SortedMap(__PRIVATE_primitiveComparator));\n      r2 = r2.insert(t2, n2), e3.Sa[e3.currentUser.toKey()] = r2;\n    }(r, e2.batchId, n), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r, e2.changes), await __PRIVATE_fillWritePipeline(r.remoteStore);\n  } catch (e2) {\n    const t2 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, \"Failed to persist write\");\n    n.reject(t2);\n  }\n}\nasync function __PRIVATE_syncEngineApplyRemoteEvent(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  try {\n    const e2 = await __PRIVATE_localStoreApplyRemoteEventToLocalCache(n.localStore, t);\n    t.targetChanges.forEach((e3, t2) => {\n      const r = n.ya.get(t2);\n      r && (__PRIVATE_hardAssert(e3.addedDocuments.size + e3.modifiedDocuments.size + e3.removedDocuments.size <= 1), e3.addedDocuments.size > 0 ? r.Ra = true : e3.modifiedDocuments.size > 0 ? __PRIVATE_hardAssert(r.Ra) : e3.removedDocuments.size > 0 && (__PRIVATE_hardAssert(r.Ra), r.Ra = false));\n    }), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e2, t);\n  } catch (e2) {\n    await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);\n  }\n}\nfunction __PRIVATE_syncEngineApplyOnlineStateChange(e, t, n) {\n  const r = __PRIVATE_debugCast(e);\n  if (r.isPrimaryClient && 0 === n || !r.isPrimaryClient && 1 === n) {\n    const e2 = [];\n    r.ma.forEach((n2, r2) => {\n      const i = r2.view.Q_(t);\n      i.snapshot && e2.push(i.snapshot);\n    }), function __PRIVATE_eventManagerOnOnlineStateChange(e3, t2) {\n      const n2 = __PRIVATE_debugCast(e3);\n      n2.onlineState = t2;\n      let r2 = false;\n      n2.queries.forEach((e4, n3) => {\n        for (const e5 of n3.listeners) e5.Q_(t2) && (r2 = true);\n      }), r2 && __PRIVATE_raiseSnapshotsInSyncEvent(n2);\n    }(r.eventManager, t), e2.length && r.Va.a_(e2), r.onlineState = t, r.isPrimaryClient && r.sharedClientState.setOnlineState(t);\n  }\n}\nasync function __PRIVATE_syncEngineRejectListen(e, t, n) {\n  const r = __PRIVATE_debugCast(e);\n  r.sharedClientState.updateQueryState(t, \"rejected\", n);\n  const i = r.ya.get(t),\n    s = i && i.key;\n  if (s) {\n    let e2 = new SortedMap(DocumentKey.comparator);\n    e2 = e2.insert(s, MutableDocument.newNoDocument(s, SnapshotVersion.min()));\n    const n2 = __PRIVATE_documentKeySet().add(s),\n      i2 = new RemoteEvent(SnapshotVersion.min(), /* @__PURE__ */new Map(), new SortedMap(__PRIVATE_primitiveComparator), e2, n2);\n    await __PRIVATE_syncEngineApplyRemoteEvent(r, i2), r.pa = r.pa.remove(s), r.ya.delete(t), __PRIVATE_pumpEnqueuedLimboResolutions(r);\n  } else await __PRIVATE_localStoreReleaseTarget(r.localStore, t, false).then(() => __PRIVATE_removeAndCleanupTarget(r, t, n)).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);\n}\nasync function __PRIVATE_syncEngineApplySuccessfulWrite(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = t.batch.batchId;\n  try {\n    const e2 = await __PRIVATE_localStoreAcknowledgeBatch(n.localStore, t);\n    __PRIVATE_processUserCallback(n, r, null), __PRIVATE_triggerPendingWritesCallbacks(n, r), n.sharedClientState.updateMutationState(r, \"acknowledged\"), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e2);\n  } catch (e2) {\n    await __PRIVATE_ignoreIfPrimaryLeaseLoss(e2);\n  }\n}\nasync function __PRIVATE_syncEngineRejectFailedWrite(e, t, n) {\n  const r = __PRIVATE_debugCast(e);\n  try {\n    const e2 = await function __PRIVATE_localStoreRejectBatch(e3, t2) {\n      const n2 = __PRIVATE_debugCast(e3);\n      return n2.persistence.runTransaction(\"Reject batch\", \"readwrite-primary\", e4 => {\n        let r2;\n        return n2.mutationQueue.lookupMutationBatch(e4, t2).next(t3 => (__PRIVATE_hardAssert(null !== t3), r2 = t3.keys(), n2.mutationQueue.removeMutationBatch(e4, t3))).next(() => n2.mutationQueue.performConsistencyCheck(e4)).next(() => n2.documentOverlayCache.removeOverlaysForBatchId(e4, r2, t2)).next(() => n2.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e4, r2)).next(() => n2.localDocuments.getDocuments(e4, r2));\n      });\n    }(r.localStore, t);\n    __PRIVATE_processUserCallback(r, t, n), __PRIVATE_triggerPendingWritesCallbacks(r, t), r.sharedClientState.updateMutationState(t, \"rejected\", n), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r, e2);\n  } catch (n2) {\n    await __PRIVATE_ignoreIfPrimaryLeaseLoss(n2);\n  }\n}\nasync function __PRIVATE_syncEngineRegisterPendingWritesCallback(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  __PRIVATE_canUseNetwork(n.remoteStore) || __PRIVATE_logDebug(\"SyncEngine\", \"The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.\");\n  try {\n    const e2 = await function __PRIVATE_localStoreGetHighestUnacknowledgedBatchId(e3) {\n      const t2 = __PRIVATE_debugCast(e3);\n      return t2.persistence.runTransaction(\"Get highest unacknowledged batch id\", \"readonly\", e4 => t2.mutationQueue.getHighestUnacknowledgedBatchId(e4));\n    }(n.localStore);\n    if (-1 === e2) return void t.resolve();\n    const r = n.ba.get(e2) || [];\n    r.push(t), n.ba.set(e2, r);\n  } catch (e2) {\n    const n2 = __PRIVATE_wrapInUserErrorIfRecoverable(e2, \"Initialization of waitForPendingWrites() operation failed\");\n    t.reject(n2);\n  }\n}\nfunction __PRIVATE_triggerPendingWritesCallbacks(e, t) {\n  (e.ba.get(t) || []).forEach(e2 => {\n    e2.resolve();\n  }), e.ba.delete(t);\n}\nfunction __PRIVATE_processUserCallback(e, t, n) {\n  const r = __PRIVATE_debugCast(e);\n  let i = r.Sa[r.currentUser.toKey()];\n  if (i) {\n    const e2 = i.get(t);\n    e2 && (n ? e2.reject(n) : e2.resolve(), i = i.remove(t)), r.Sa[r.currentUser.toKey()] = i;\n  }\n}\nfunction __PRIVATE_removeAndCleanupTarget(e, t, n = null) {\n  e.sharedClientState.removeLocalQueryTarget(t);\n  for (const r of e.fa.get(t)) e.ma.delete(r), n && e.Va.Fa(r, n);\n  if (e.fa.delete(t), e.isPrimaryClient) {\n    e.wa.Rr(t).forEach(t2 => {\n      e.wa.containsKey(t2) || __PRIVATE_removeLimboTarget(e, t2);\n    });\n  }\n}\nfunction __PRIVATE_removeLimboTarget(e, t) {\n  e.ga.delete(t.path.canonicalString());\n  const n = e.pa.get(t);\n  null !== n && (__PRIVATE_remoteStoreUnlisten(e.remoteStore, n), e.pa = e.pa.remove(t), e.ya.delete(n), __PRIVATE_pumpEnqueuedLimboResolutions(e));\n}\nfunction __PRIVATE_updateTrackedLimbos(e, t, n) {\n  for (const r of n) if (r instanceof __PRIVATE_AddedLimboDocument) e.wa.addReference(r.key, t), __PRIVATE_trackLimboChange(e, r);else if (r instanceof __PRIVATE_RemovedLimboDocument) {\n    __PRIVATE_logDebug(\"SyncEngine\", \"Document no longer in limbo: \" + r.key), e.wa.removeReference(r.key, t);\n    e.wa.containsKey(r.key) || __PRIVATE_removeLimboTarget(e, r.key);\n  } else fail();\n}\nfunction __PRIVATE_trackLimboChange(e, t) {\n  const n = t.key,\n    r = n.path.canonicalString();\n  e.pa.get(n) || e.ga.has(r) || (__PRIVATE_logDebug(\"SyncEngine\", \"New document in limbo: \" + n), e.ga.add(r), __PRIVATE_pumpEnqueuedLimboResolutions(e));\n}\nfunction __PRIVATE_pumpEnqueuedLimboResolutions(e) {\n  for (; e.ga.size > 0 && e.pa.size < e.maxConcurrentLimboResolutions;) {\n    const t = e.ga.values().next().value;\n    e.ga.delete(t);\n    const n = new DocumentKey(ResourcePath.fromString(t)),\n      r = e.Da.next();\n    e.ya.set(r, new LimboResolution(n)), e.pa = e.pa.insert(n, r), __PRIVATE_remoteStoreListen(e.remoteStore, new TargetData(__PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(n.path)), r, \"TargetPurposeLimboResolution\", __PRIVATE_ListenSequence._e));\n  }\n}\nasync function __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e, t, n) {\n  const r = __PRIVATE_debugCast(e),\n    i = [],\n    s = [],\n    o = [];\n  r.ma.isEmpty() || (r.ma.forEach((e2, _) => {\n    o.push(r.va(_, t, n).then(e3 => {\n      if ((e3 || n) && r.isPrimaryClient && r.sharedClientState.updateQueryState(_.targetId, (null == e3 ? void 0 : e3.fromCache) ? \"not-current\" : \"current\"), e3) {\n        i.push(e3);\n        const t2 = __PRIVATE_LocalViewChanges.Qi(_.targetId, e3);\n        s.push(t2);\n      }\n    }));\n  }), await Promise.all(o), r.Va.a_(i), await async function __PRIVATE_localStoreNotifyLocalViewChanges(e2, t2) {\n    const n2 = __PRIVATE_debugCast(e2);\n    try {\n      await n2.persistence.runTransaction(\"notifyLocalViewChanges\", \"readwrite\", e3 => PersistencePromise.forEach(t2, t3 => PersistencePromise.forEach(t3.ki, r2 => n2.persistence.referenceDelegate.addReference(e3, t3.targetId, r2)).next(() => PersistencePromise.forEach(t3.qi, r2 => n2.persistence.referenceDelegate.removeReference(e3, t3.targetId, r2)))));\n    } catch (e3) {\n      if (!__PRIVATE_isIndexedDbTransactionError(e3)) throw e3;\n      __PRIVATE_logDebug(\"LocalStore\", \"Failed to update sequence numbers: \" + e3);\n    }\n    for (const e3 of t2) {\n      const t3 = e3.targetId;\n      if (!e3.fromCache) {\n        const e4 = n2.ts.get(t3),\n          r2 = e4.snapshotVersion,\n          i2 = e4.withLastLimboFreeSnapshotVersion(r2);\n        n2.ts = n2.ts.insert(t3, i2);\n      }\n    }\n  }(r.localStore, s));\n}\nasync function __PRIVATE_syncEngineHandleCredentialChange(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  if (!n.currentUser.isEqual(t)) {\n    __PRIVATE_logDebug(\"SyncEngine\", \"User change. New user:\", t.toKey());\n    const e2 = await __PRIVATE_localStoreHandleUserChange(n.localStore, t);\n    n.currentUser = t, function __PRIVATE_rejectOutstandingPendingWritesCallbacks(e3, t2) {\n      e3.ba.forEach(e4 => {\n        e4.forEach(e5 => {\n          e5.reject(new FirestoreError(C.CANCELLED, t2));\n        });\n      }), e3.ba.clear();\n    }(n, \"'waitForPendingWrites' promise is rejected due to a user change.\"), n.sharedClientState.handleUserChange(t, e2.removedBatchIds, e2.addedBatchIds), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e2._s);\n  }\n}\nfunction __PRIVATE_syncEngineGetRemoteKeysForTarget(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = n.ya.get(t);\n  if (r && r.Ra) return __PRIVATE_documentKeySet().add(r.key);\n  {\n    let e2 = __PRIVATE_documentKeySet();\n    const r2 = n.fa.get(t);\n    if (!r2) return e2;\n    for (const t2 of r2) {\n      const r3 = n.ma.get(t2);\n      e2 = e2.unionWith(r3.view.ua);\n    }\n    return e2;\n  }\n}\nasync function __PRIVATE_synchronizeViewAndComputeSnapshot(e, t) {\n  const n = __PRIVATE_debugCast(e),\n    r = await __PRIVATE_localStoreExecuteQuery(n.localStore, t.query, true),\n    i = t.view.da(r);\n  return n.isPrimaryClient && __PRIVATE_updateTrackedLimbos(n, t.targetId, i.Ta), i;\n}\nasync function __PRIVATE_syncEngineSynchronizeWithChangedDocuments(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  return __PRIVATE_localStoreGetNewDocumentChanges(n.localStore, t).then(e2 => __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e2));\n}\nasync function __PRIVATE_syncEngineApplyBatchState(e, t, n, r) {\n  const i = __PRIVATE_debugCast(e),\n    s = await function __PRIVATE_localStoreLookupMutationDocuments(e2, t2) {\n      const n2 = __PRIVATE_debugCast(e2),\n        r2 = __PRIVATE_debugCast(n2.mutationQueue);\n      return n2.persistence.runTransaction(\"Lookup mutation documents\", \"readonly\", e3 => r2.Cn(e3, t2).next(t3 => t3 ? n2.localDocuments.getDocuments(e3, t3) : PersistencePromise.resolve(null)));\n    }(i.localStore, t);\n  null !== s ? (\"pending\" === n ? await __PRIVATE_fillWritePipeline(i.remoteStore) : \"acknowledged\" === n || \"rejected\" === n ? (__PRIVATE_processUserCallback(i, t, r || null), __PRIVATE_triggerPendingWritesCallbacks(i, t), function __PRIVATE_localStoreRemoveCachedMutationBatchMetadata(e2, t2) {\n    __PRIVATE_debugCast(__PRIVATE_debugCast(e2).mutationQueue).Fn(t2);\n  }(i.localStore, t)) : fail(), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(i, s)) : __PRIVATE_logDebug(\"SyncEngine\", \"Cannot apply mutation batch with id: \" + t);\n}\nasync function __PRIVATE_syncEngineApplyPrimaryState(e, t) {\n  const n = __PRIVATE_debugCast(e);\n  if (__PRIVATE_ensureWatchCallbacks(n), __PRIVATE_syncEngineEnsureWriteCallbacks(n), true === t && true !== n.Ca) {\n    const e2 = n.sharedClientState.getAllActiveQueryTargets(),\n      t2 = await __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(n, e2.toArray());\n    n.Ca = true, await __PRIVATE_remoteStoreApplyPrimaryState(n.remoteStore, true);\n    for (const e3 of t2) __PRIVATE_remoteStoreListen(n.remoteStore, e3);\n  } else if (false === t && false !== n.Ca) {\n    const e2 = [];\n    let t2 = Promise.resolve();\n    n.fa.forEach((r, i) => {\n      n.sharedClientState.isLocalQueryTarget(i) ? e2.push(i) : t2 = t2.then(() => (__PRIVATE_removeAndCleanupTarget(n, i), __PRIVATE_localStoreReleaseTarget(n.localStore, i, true))), __PRIVATE_remoteStoreUnlisten(n.remoteStore, i);\n    }), await t2, await __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(n, e2), function __PRIVATE_resetLimboDocuments(e3) {\n      const t3 = __PRIVATE_debugCast(e3);\n      t3.ya.forEach((e4, n2) => {\n        __PRIVATE_remoteStoreUnlisten(t3.remoteStore, n2);\n      }), t3.wa.Vr(), t3.ya = /* @__PURE__ */new Map(), t3.pa = new SortedMap(DocumentKey.comparator);\n    }(n), n.Ca = false, await __PRIVATE_remoteStoreApplyPrimaryState(n.remoteStore, false);\n  }\n}\nasync function __PRIVATE_synchronizeQueryViewsAndRaiseSnapshots(e, t, n) {\n  const r = __PRIVATE_debugCast(e),\n    i = [],\n    s = [];\n  for (const e2 of t) {\n    let t2;\n    const n2 = r.fa.get(e2);\n    if (n2 && 0 !== n2.length) {\n      t2 = await __PRIVATE_localStoreAllocateTarget(r.localStore, __PRIVATE_queryToTarget(n2[0]));\n      for (const e3 of n2) {\n        const t3 = r.ma.get(e3),\n          n3 = await __PRIVATE_synchronizeViewAndComputeSnapshot(r, t3);\n        n3.snapshot && s.push(n3.snapshot);\n      }\n    } else {\n      const n3 = await __PRIVATE_localStoreGetCachedTarget(r.localStore, e2);\n      t2 = await __PRIVATE_localStoreAllocateTarget(r.localStore, n3), await __PRIVATE_initializeViewAndComputeSnapshot(r, __PRIVATE_synthesizeTargetToQuery(n3), e2, false, t2.resumeToken);\n    }\n    i.push(t2);\n  }\n  return r.Va.a_(s), i;\n}\nfunction __PRIVATE_synthesizeTargetToQuery(e) {\n  return __PRIVATE_newQuery(e.path, e.collectionGroup, e.orderBy, e.filters, e.limit, \"F\", e.startAt, e.endAt);\n}\nfunction __PRIVATE_syncEngineGetActiveClients(e) {\n  return function __PRIVATE_localStoreGetActiveClients(e2) {\n    return __PRIVATE_debugCast(__PRIVATE_debugCast(e2).persistence).Bi();\n  }(__PRIVATE_debugCast(e).localStore);\n}\nasync function __PRIVATE_syncEngineApplyTargetState(e, t, n, r) {\n  const i = __PRIVATE_debugCast(e);\n  if (i.Ca) return void __PRIVATE_logDebug(\"SyncEngine\", \"Ignoring unexpected query state notification.\");\n  const s = i.fa.get(t);\n  if (s && s.length > 0) switch (n) {\n    case \"current\":\n    case \"not-current\":\n      {\n        const e2 = await __PRIVATE_localStoreGetNewDocumentChanges(i.localStore, __PRIVATE_queryCollectionGroup(s[0])),\n          r2 = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(t, \"current\" === n, ByteString.EMPTY_BYTE_STRING);\n        await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(i, e2, r2);\n        break;\n      }\n    case \"rejected\":\n      await __PRIVATE_localStoreReleaseTarget(i.localStore, t, true), __PRIVATE_removeAndCleanupTarget(i, t, r);\n      break;\n    default:\n      fail();\n  }\n}\nasync function __PRIVATE_syncEngineApplyActiveTargetsChange(e, t, n) {\n  const r = __PRIVATE_ensureWatchCallbacks(e);\n  if (r.Ca) {\n    for (const e2 of t) {\n      if (r.fa.has(e2)) {\n        __PRIVATE_logDebug(\"SyncEngine\", \"Adding an already active target \" + e2);\n        continue;\n      }\n      const t2 = await __PRIVATE_localStoreGetCachedTarget(r.localStore, e2),\n        n2 = await __PRIVATE_localStoreAllocateTarget(r.localStore, t2);\n      await __PRIVATE_initializeViewAndComputeSnapshot(r, __PRIVATE_synthesizeTargetToQuery(t2), n2.targetId, false, n2.resumeToken), __PRIVATE_remoteStoreListen(r.remoteStore, n2);\n    }\n    for (const e2 of n) r.fa.has(e2) && (await __PRIVATE_localStoreReleaseTarget(r.localStore, e2, false).then(() => {\n      __PRIVATE_remoteStoreUnlisten(r.remoteStore, e2), __PRIVATE_removeAndCleanupTarget(r, e2);\n    }).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss));\n  }\n}\nfunction __PRIVATE_ensureWatchCallbacks(e) {\n  const t = __PRIVATE_debugCast(e);\n  return t.remoteStore.remoteSyncer.applyRemoteEvent = __PRIVATE_syncEngineApplyRemoteEvent.bind(null, t), t.remoteStore.remoteSyncer.getRemoteKeysForTarget = __PRIVATE_syncEngineGetRemoteKeysForTarget.bind(null, t), t.remoteStore.remoteSyncer.rejectListen = __PRIVATE_syncEngineRejectListen.bind(null, t), t.Va.a_ = __PRIVATE_eventManagerOnWatchChange.bind(null, t.eventManager), t.Va.Fa = __PRIVATE_eventManagerOnWatchError.bind(null, t.eventManager), t;\n}\nfunction __PRIVATE_syncEngineEnsureWriteCallbacks(e) {\n  const t = __PRIVATE_debugCast(e);\n  return t.remoteStore.remoteSyncer.applySuccessfulWrite = __PRIVATE_syncEngineApplySuccessfulWrite.bind(null, t), t.remoteStore.remoteSyncer.rejectFailedWrite = __PRIVATE_syncEngineRejectFailedWrite.bind(null, t), t;\n}\nfunction __PRIVATE_syncEngineLoadBundle(e, t, n) {\n  const r = __PRIVATE_debugCast(e);\n  (async function __PRIVATE_loadBundleImpl(e2, t2, n2) {\n    try {\n      const r2 = await t2.getMetadata();\n      if (await function __PRIVATE_localStoreHasNewerBundle(e3, t3) {\n        const n3 = __PRIVATE_debugCast(e3),\n          r3 = __PRIVATE_fromVersion(t3.createTime);\n        return n3.persistence.runTransaction(\"hasNewerBundle\", \"readonly\", e4 => n3.Kr.getBundleMetadata(e4, t3.id)).then(e4 => !!e4 && e4.createTime.compareTo(r3) >= 0);\n      }(e2.localStore, r2)) return await t2.close(), n2._completeWith(function __PRIVATE_bundleSuccessProgress(e3) {\n        return {\n          taskState: \"Success\",\n          documentsLoaded: e3.totalDocuments,\n          bytesLoaded: e3.totalBytes,\n          totalDocuments: e3.totalDocuments,\n          totalBytes: e3.totalBytes\n        };\n      }(r2)), Promise.resolve( /* @__PURE__ */new Set());\n      n2._updateProgress(__PRIVATE_bundleInitialProgress(r2));\n      const i = new __PRIVATE_BundleLoader(r2, e2.localStore, t2.serializer);\n      let s = await t2.Ma();\n      for (; s;) {\n        const e3 = await i.ea(s);\n        e3 && n2._updateProgress(e3), s = await t2.Ma();\n      }\n      const o = await i.complete();\n      return await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e2, o.ra, void 0), await function __PRIVATE_localStoreSaveBundle(e3, t3) {\n        const n3 = __PRIVATE_debugCast(e3);\n        return n3.persistence.runTransaction(\"Save bundle\", \"readwrite\", e4 => n3.Kr.saveBundleMetadata(e4, t3));\n      }(e2.localStore, r2), n2._completeWith(o.progress), Promise.resolve(o.na);\n    } catch (e3) {\n      return __PRIVATE_logWarn(\"SyncEngine\", `Loading bundle failed with ${e3}`), n2._failWith(e3), Promise.resolve( /* @__PURE__ */new Set());\n    }\n  })(r, t, n).then(e2 => {\n    r.sharedClientState.notifyBundleLoaded(e2);\n  });\n}\nvar MemoryOfflineComponentProvider = class {\n  constructor() {\n    this.synchronizeTabs = false;\n  }\n  async initialize(e) {\n    this.serializer = __PRIVATE_newSerializer(e.databaseInfo.databaseId), this.sharedClientState = this.createSharedClientState(e), this.persistence = this.createPersistence(e), await this.persistence.start(), this.localStore = this.createLocalStore(e), this.gcScheduler = this.createGarbageCollectionScheduler(e, this.localStore), this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(e, this.localStore);\n  }\n  createGarbageCollectionScheduler(e, t) {\n    return null;\n  }\n  createIndexBackfillerScheduler(e, t) {\n    return null;\n  }\n  createLocalStore(e) {\n    return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);\n  }\n  createPersistence(e) {\n    return new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.jr, this.serializer);\n  }\n  createSharedClientState(e) {\n    return new __PRIVATE_MemorySharedClientState();\n  }\n  async terminate() {\n    this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), await this.persistence.shutdown();\n  }\n};\nvar __PRIVATE_LruGcMemoryOfflineComponentProvider = class extends MemoryOfflineComponentProvider {\n  constructor(e) {\n    super(), this.cacheSizeBytes = e;\n  }\n  createGarbageCollectionScheduler(e, t) {\n    __PRIVATE_hardAssert(this.persistence.referenceDelegate instanceof __PRIVATE_MemoryLruDelegate);\n    const n = this.persistence.referenceDelegate.garbageCollector;\n    return new __PRIVATE_LruScheduler(n, e.asyncQueue, t);\n  }\n  createPersistence(e) {\n    const t = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new __PRIVATE_MemoryPersistence(e2 => __PRIVATE_MemoryLruDelegate.jr(e2, t), this.serializer);\n  }\n};\nvar __PRIVATE_IndexedDbOfflineComponentProvider = class extends MemoryOfflineComponentProvider {\n  constructor(e, t, n) {\n    super(), this.xa = e, this.cacheSizeBytes = t, this.forceOwnership = n, this.synchronizeTabs = false;\n  }\n  async initialize(e) {\n    await super.initialize(e), await this.xa.initialize(this, e), await __PRIVATE_syncEngineEnsureWriteCallbacks(this.xa.syncEngine), await __PRIVATE_fillWritePipeline(this.xa.remoteStore), await this.persistence.mi(() => (this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(), this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started && this.indexBackfillerScheduler.start(), Promise.resolve()));\n  }\n  createLocalStore(e) {\n    return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine(), e.initialUser, this.serializer);\n  }\n  createGarbageCollectionScheduler(e, t) {\n    const n = this.persistence.referenceDelegate.garbageCollector;\n    return new __PRIVATE_LruScheduler(n, e.asyncQueue, t);\n  }\n  createIndexBackfillerScheduler(e, t) {\n    const n = new __PRIVATE_IndexBackfiller(t, this.persistence);\n    return new __PRIVATE_IndexBackfillerScheduler(e.asyncQueue, n);\n  }\n  createPersistence(e) {\n    const t = __PRIVATE_indexedDbStoragePrefix(e.databaseInfo.databaseId, e.databaseInfo.persistenceKey),\n      n = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new __PRIVATE_IndexedDbPersistence(this.synchronizeTabs, t, e.clientId, n, e.asyncQueue, __PRIVATE_getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);\n  }\n  createSharedClientState(e) {\n    return new __PRIVATE_MemorySharedClientState();\n  }\n};\nvar __PRIVATE_MultiTabOfflineComponentProvider = class extends __PRIVATE_IndexedDbOfflineComponentProvider {\n  constructor(e, t) {\n    super(e, t, false), this.xa = e, this.cacheSizeBytes = t, this.synchronizeTabs = true;\n  }\n  async initialize(e) {\n    await super.initialize(e);\n    const t = this.xa.syncEngine;\n    this.sharedClientState instanceof __PRIVATE_WebStorageSharedClientState && (this.sharedClientState.syncEngine = {\n      Ys: __PRIVATE_syncEngineApplyBatchState.bind(null, t),\n      Zs: __PRIVATE_syncEngineApplyTargetState.bind(null, t),\n      Xs: __PRIVATE_syncEngineApplyActiveTargetsChange.bind(null, t),\n      Bi: __PRIVATE_syncEngineGetActiveClients.bind(null, t),\n      Js: __PRIVATE_syncEngineSynchronizeWithChangedDocuments.bind(null, t)\n    }, await this.sharedClientState.start()), await this.persistence.mi(async e2 => {\n      await __PRIVATE_syncEngineApplyPrimaryState(this.xa.syncEngine, e2), this.gcScheduler && (e2 && !this.gcScheduler.started ? this.gcScheduler.start() : e2 || this.gcScheduler.stop()), this.indexBackfillerScheduler && (e2 && !this.indexBackfillerScheduler.started ? this.indexBackfillerScheduler.start() : e2 || this.indexBackfillerScheduler.stop());\n    });\n  }\n  createSharedClientState(e) {\n    const t = __PRIVATE_getWindow();\n    if (!__PRIVATE_WebStorageSharedClientState.D(t)) throw new FirestoreError(C.UNIMPLEMENTED, \"IndexedDB persistence is only available on platforms that support LocalStorage.\");\n    const n = __PRIVATE_indexedDbStoragePrefix(e.databaseInfo.databaseId, e.databaseInfo.persistenceKey);\n    return new __PRIVATE_WebStorageSharedClientState(t, e.asyncQueue, n, e.clientId, e.initialUser);\n  }\n};\nvar OnlineComponentProvider = class {\n  async initialize(e, t) {\n    this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, this.datastore = this.createDatastore(t), this.remoteStore = this.createRemoteStore(t), this.eventManager = this.createEventManager(t), this.syncEngine = this.createSyncEngine(t, !e.synchronizeTabs), this.sharedClientState.onlineStateHandler = e2 => __PRIVATE_syncEngineApplyOnlineStateChange(this.syncEngine, e2, 1), this.remoteStore.remoteSyncer.handleCredentialChange = __PRIVATE_syncEngineHandleCredentialChange.bind(null, this.syncEngine), await __PRIVATE_remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient));\n  }\n  createEventManager(e) {\n    return function __PRIVATE_newEventManager() {\n      return new __PRIVATE_EventManagerImpl();\n    }();\n  }\n  createDatastore(e) {\n    const t = __PRIVATE_newSerializer(e.databaseInfo.databaseId),\n      n = function __PRIVATE_newConnection(e2) {\n        return new __PRIVATE_WebChannelConnection(e2);\n      }(e.databaseInfo);\n    return function __PRIVATE_newDatastore(e2, t2, n2, r) {\n      return new __PRIVATE_DatastoreImpl(e2, t2, n2, r);\n    }(e.authCredentials, e.appCheckCredentials, n, t);\n  }\n  createRemoteStore(e) {\n    return function __PRIVATE_newRemoteStore(e2, t, n, r, i) {\n      return new __PRIVATE_RemoteStoreImpl(e2, t, n, r, i);\n    }(this.localStore, this.datastore, e.asyncQueue, e2 => __PRIVATE_syncEngineApplyOnlineStateChange(this.syncEngine, e2, 0), function __PRIVATE_newConnectivityMonitor() {\n      return __PRIVATE_BrowserConnectivityMonitor.D() ? new __PRIVATE_BrowserConnectivityMonitor() : new __PRIVATE_NoopConnectivityMonitor();\n    }());\n  }\n  createSyncEngine(e, t) {\n    return function __PRIVATE_newSyncEngine(e2, t2, n, r, i, s, o) {\n      const _ = new __PRIVATE_SyncEngineImpl(e2, t2, n, r, i, s);\n      return o && (_.Ca = true), _;\n    }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, t);\n  }\n  terminate() {\n    return async function __PRIVATE_remoteStoreShutdown(e) {\n      const t = __PRIVATE_debugCast(e);\n      __PRIVATE_logDebug(\"RemoteStore\", \"RemoteStore shutting down.\"), t.C_.add(5), await __PRIVATE_disableNetworkInternal(t), t.F_.shutdown(), t.M_.set(\"Unknown\");\n    }(this.remoteStore);\n  }\n};\nfunction __PRIVATE_toByteStreamReaderHelper(e, t = 10240) {\n  let n = 0;\n  return {\n    async read() {\n      if (n < e.byteLength) {\n        const r = {\n          value: e.slice(n, n + t),\n          done: false\n        };\n        return n += t, r;\n      }\n      return {\n        done: true\n      };\n    },\n    async cancel() {},\n    releaseLock() {},\n    closed: Promise.resolve()\n  };\n}\nvar __PRIVATE_AsyncObserver = class {\n  constructor(e) {\n    this.observer = e, this.muted = false;\n  }\n  next(e) {\n    this.observer.next && this.Oa(this.observer.next, e);\n  }\n  error(e) {\n    this.observer.error ? this.Oa(this.observer.error, e) : __PRIVATE_logError(\"Uncaught Error in snapshot listener:\", e.toString());\n  }\n  Na() {\n    this.muted = true;\n  }\n  Oa(e, t) {\n    this.muted || setTimeout(() => {\n      this.muted || e(t);\n    }, 0);\n  }\n};\nvar __PRIVATE_BundleReaderImpl = class {\n  constructor(e, t) {\n    this.Ba = e, this.serializer = t, this.metadata = new __PRIVATE_Deferred(), this.buffer = new Uint8Array(), this.La = function __PRIVATE_newTextDecoder() {\n      return new TextDecoder(\"utf-8\");\n    }(), this.ka().then(e2 => {\n      e2 && e2.Z_() ? this.metadata.resolve(e2.Y_.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null == e2 ? void 0 : e2.Y_)}`));\n    }, e2 => this.metadata.reject(e2));\n  }\n  close() {\n    return this.Ba.cancel();\n  }\n  async getMetadata() {\n    return this.metadata.promise;\n  }\n  async Ma() {\n    return await this.getMetadata(), this.ka();\n  }\n  async ka() {\n    const e = await this.qa();\n    if (null === e) return null;\n    const t = this.La.decode(e),\n      n = Number(t);\n    isNaN(n) && this.Qa(`length string (${t}) is not valid number`);\n    const r = await this.Ka(n);\n    return new __PRIVATE_SizedBundleElement(JSON.parse(r), e.length + n);\n  }\n  $a() {\n    return this.buffer.findIndex(e => e === \"{\".charCodeAt(0));\n  }\n  async qa() {\n    for (; this.$a() < 0;) {\n      if (await this.Ua()) break;\n    }\n    if (0 === this.buffer.length) return null;\n    const e = this.$a();\n    e < 0 && this.Qa(\"Reached the end of bundle when a length string is expected.\");\n    const t = this.buffer.slice(0, e);\n    return this.buffer = this.buffer.slice(e), t;\n  }\n  async Ka(e) {\n    for (; this.buffer.length < e;) {\n      (await this.Ua()) && this.Qa(\"Reached the end of bundle when more is expected.\");\n    }\n    const t = this.La.decode(this.buffer.slice(0, e));\n    return this.buffer = this.buffer.slice(e), t;\n  }\n  Qa(e) {\n    throw this.Ba.cancel(), new Error(`Invalid bundle format: ${e}`);\n  }\n  async Ua() {\n    const e = await this.Ba.read();\n    if (!e.done) {\n      const t = new Uint8Array(this.buffer.length + e.value.length);\n      t.set(this.buffer), t.set(e.value, this.buffer.length), this.buffer = t;\n    }\n    return e.done;\n  }\n};\nvar Transaction$2 = class {\n  constructor(e) {\n    this.datastore = e, this.readVersions = /* @__PURE__ */new Map(), this.mutations = [], this.committed = false, this.lastWriteError = null, this.writtenDocs = /* @__PURE__ */new Set();\n  }\n  async lookup(e) {\n    if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new FirestoreError(C.INVALID_ARGUMENT, \"Firestore transactions require all reads to be executed before all writes.\");\n    const t = await async function __PRIVATE_invokeBatchGetDocumentsRpc(e2, t2) {\n      const n = __PRIVATE_debugCast(e2),\n        r = __PRIVATE_getEncodedDatabaseId(n.serializer) + \"/documents\",\n        i = {\n          documents: t2.map(e3 => __PRIVATE_toName(n.serializer, e3))\n        },\n        s = await n.Co(\"BatchGetDocuments\", r, i, t2.length),\n        o = /* @__PURE__ */new Map();\n      s.forEach(e3 => {\n        const t3 = __PRIVATE_fromBatchGetDocumentsResponse(n.serializer, e3);\n        o.set(t3.key.toString(), t3);\n      });\n      const _ = [];\n      return t2.forEach(e3 => {\n        const t3 = o.get(e3.toString());\n        __PRIVATE_hardAssert(!!t3), _.push(t3);\n      }), _;\n    }(this.datastore, e);\n    return t.forEach(e2 => this.recordVersion(e2)), t;\n  }\n  set(e, t) {\n    this.write(t.toMutation(e, this.precondition(e))), this.writtenDocs.add(e.toString());\n  }\n  update(e, t) {\n    try {\n      this.write(t.toMutation(e, this.preconditionForUpdate(e)));\n    } catch (e2) {\n      this.lastWriteError = e2;\n    }\n    this.writtenDocs.add(e.toString());\n  }\n  delete(e) {\n    this.write(new __PRIVATE_DeleteMutation(e, this.precondition(e))), this.writtenDocs.add(e.toString());\n  }\n  async commit() {\n    if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n    const e = this.readVersions;\n    this.mutations.forEach(t => {\n      e.delete(t.key.toString());\n    }), e.forEach((e2, t) => {\n      const n = DocumentKey.fromPath(t);\n      this.mutations.push(new __PRIVATE_VerifyMutation(n, this.precondition(n)));\n    }), await async function __PRIVATE_invokeCommitRpc(e2, t) {\n      const n = __PRIVATE_debugCast(e2),\n        r = __PRIVATE_getEncodedDatabaseId(n.serializer) + \"/documents\",\n        i = {\n          writes: t.map(e3 => toMutation(n.serializer, e3))\n        };\n      await n.wo(\"Commit\", r, i);\n    }(this.datastore, this.mutations), this.committed = true;\n  }\n  recordVersion(e) {\n    let t;\n    if (e.isFoundDocument()) t = e.version;else {\n      if (!e.isNoDocument()) throw fail();\n      t = SnapshotVersion.min();\n    }\n    const n = this.readVersions.get(e.key.toString());\n    if (n) {\n      if (!t.isEqual(n)) throw new FirestoreError(C.ABORTED, \"Document version changed between two reads.\");\n    } else this.readVersions.set(e.key.toString(), t);\n  }\n  precondition(e) {\n    const t = this.readVersions.get(e.toString());\n    return !this.writtenDocs.has(e.toString()) && t ? t.isEqual(SnapshotVersion.min()) ? Precondition.exists(false) : Precondition.updateTime(t) : Precondition.none();\n  }\n  preconditionForUpdate(e) {\n    const t = this.readVersions.get(e.toString());\n    if (!this.writtenDocs.has(e.toString()) && t) {\n      if (t.isEqual(SnapshotVersion.min())) throw new FirestoreError(C.INVALID_ARGUMENT, \"Can't update a document that doesn't exist.\");\n      return Precondition.updateTime(t);\n    }\n    return Precondition.exists(true);\n  }\n  write(e) {\n    this.ensureCommitNotCalled(), this.mutations.push(e);\n  }\n  ensureCommitNotCalled() {}\n};\nvar __PRIVATE_TransactionRunner = class {\n  constructor(e, t, n, r, i) {\n    this.asyncQueue = e, this.datastore = t, this.options = n, this.updateFunction = r, this.deferred = i, this.Wa = n.maxAttempts, this.zo = new __PRIVATE_ExponentialBackoff(this.asyncQueue, \"transaction_retry\");\n  }\n  run() {\n    this.Wa -= 1, this.Ga();\n  }\n  Ga() {\n    this.zo.ko(async () => {\n      const e = new Transaction$2(this.datastore),\n        t = this.za(e);\n      t && t.then(t2 => {\n        this.asyncQueue.enqueueAndForget(() => e.commit().then(() => {\n          this.deferred.resolve(t2);\n        }).catch(e2 => {\n          this.ja(e2);\n        }));\n      }).catch(e2 => {\n        this.ja(e2);\n      });\n    });\n  }\n  za(e) {\n    try {\n      const t = this.updateFunction(e);\n      return !__PRIVATE_isNullOrUndefined(t) && t.catch && t.then ? t : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), null);\n    } catch (e2) {\n      return this.deferred.reject(e2), null;\n    }\n  }\n  ja(e) {\n    this.Wa > 0 && this.Ha(e) ? (this.Wa -= 1, this.asyncQueue.enqueueAndForget(() => (this.Ga(), Promise.resolve()))) : this.deferred.reject(e);\n  }\n  Ha(e) {\n    if (\"FirebaseError\" === e.name) {\n      const t = e.code;\n      return \"aborted\" === t || \"failed-precondition\" === t || \"already-exists\" === t || !__PRIVATE_isPermanentError(t);\n    }\n    return false;\n  }\n};\nvar FirestoreClient = class {\n  constructor(e, t, n, r) {\n    this.authCredentials = e, this.appCheckCredentials = t, this.asyncQueue = n, this.databaseInfo = r, this.user = User.UNAUTHENTICATED, this.clientId = __PRIVATE_AutoId.newId(), this.authCredentialListener = () => Promise.resolve(), this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(n, async e2 => {\n      __PRIVATE_logDebug(\"FirestoreClient\", \"Received user=\", e2.uid), await this.authCredentialListener(e2), this.user = e2;\n    }), this.appCheckCredentials.start(n, e2 => (__PRIVATE_logDebug(\"FirestoreClient\", \"Received new app check token=\", e2), this.appCheckCredentialListener(e2, this.user)));\n  }\n  async getConfiguration() {\n    return {\n      asyncQueue: this.asyncQueue,\n      databaseInfo: this.databaseInfo,\n      clientId: this.clientId,\n      authCredentials: this.authCredentials,\n      appCheckCredentials: this.appCheckCredentials,\n      initialUser: this.user,\n      maxConcurrentLimboResolutions: 100\n    };\n  }\n  setCredentialChangeListener(e) {\n    this.authCredentialListener = e;\n  }\n  setAppCheckTokenChangeListener(e) {\n    this.appCheckCredentialListener = e;\n  }\n  verifyNotTerminated() {\n    if (this.asyncQueue.isShuttingDown) throw new FirestoreError(C.FAILED_PRECONDITION, \"The client has already been terminated.\");\n  }\n  terminate() {\n    this.asyncQueue.enterRestrictedMode();\n    const e = new __PRIVATE_Deferred();\n    return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {\n      try {\n        this._onlineComponents && (await this._onlineComponents.terminate()), this._offlineComponents && (await this._offlineComponents.terminate()), this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();\n      } catch (t) {\n        const n = __PRIVATE_wrapInUserErrorIfRecoverable(t, \"Failed to shutdown persistence\");\n        e.reject(n);\n      }\n    }), e.promise;\n  }\n};\nasync function __PRIVATE_setOfflineComponentProvider(e, t) {\n  e.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(\"FirestoreClient\", \"Initializing OfflineComponentProvider\");\n  const n = await e.getConfiguration();\n  await t.initialize(n);\n  let r = n.initialUser;\n  e.setCredentialChangeListener(async e2 => {\n    r.isEqual(e2) || (await __PRIVATE_localStoreHandleUserChange(t.localStore, e2), r = e2);\n  }), t.persistence.setDatabaseDeletedListener(() => e.terminate()), e._offlineComponents = t;\n}\nasync function __PRIVATE_setOnlineComponentProvider(e, t) {\n  e.asyncQueue.verifyOperationInProgress();\n  const n = await __PRIVATE_ensureOfflineComponents(e);\n  __PRIVATE_logDebug(\"FirestoreClient\", \"Initializing OnlineComponentProvider\");\n  const r = await e.getConfiguration();\n  await t.initialize(n, r), e.setCredentialChangeListener(e2 => __PRIVATE_remoteStoreHandleCredentialChange(t.remoteStore, e2)), e.setAppCheckTokenChangeListener((e2, n2) => __PRIVATE_remoteStoreHandleCredentialChange(t.remoteStore, n2)), e._onlineComponents = t;\n}\nfunction __PRIVATE_canFallbackFromIndexedDbError(e) {\n  return \"FirebaseError\" === e.name ? e.code === C.FAILED_PRECONDITION || e.code === C.UNIMPLEMENTED : !(\"undefined\" != typeof DOMException && e instanceof DOMException) || 22 === e.code || 20 === e.code || 11 === e.code;\n}\nasync function __PRIVATE_ensureOfflineComponents(e) {\n  if (!e._offlineComponents) if (e._uninitializedComponentsProvider) {\n    __PRIVATE_logDebug(\"FirestoreClient\", \"Using user provided OfflineComponentProvider\");\n    try {\n      await __PRIVATE_setOfflineComponentProvider(e, e._uninitializedComponentsProvider._offline);\n    } catch (t) {\n      const n = t;\n      if (!__PRIVATE_canFallbackFromIndexedDbError(n)) throw n;\n      __PRIVATE_logWarn(\"Error using user provided cache. Falling back to memory cache: \" + n), await __PRIVATE_setOfflineComponentProvider(e, new MemoryOfflineComponentProvider());\n    }\n  } else __PRIVATE_logDebug(\"FirestoreClient\", \"Using default OfflineComponentProvider\"), await __PRIVATE_setOfflineComponentProvider(e, new MemoryOfflineComponentProvider());\n  return e._offlineComponents;\n}\nasync function __PRIVATE_ensureOnlineComponents(e) {\n  return e._onlineComponents || (e._uninitializedComponentsProvider ? (__PRIVATE_logDebug(\"FirestoreClient\", \"Using user provided OnlineComponentProvider\"), await __PRIVATE_setOnlineComponentProvider(e, e._uninitializedComponentsProvider._online)) : (__PRIVATE_logDebug(\"FirestoreClient\", \"Using default OnlineComponentProvider\"), await __PRIVATE_setOnlineComponentProvider(e, new OnlineComponentProvider()))), e._onlineComponents;\n}\nfunction __PRIVATE_getPersistence(e) {\n  return __PRIVATE_ensureOfflineComponents(e).then(e2 => e2.persistence);\n}\nfunction __PRIVATE_getLocalStore(e) {\n  return __PRIVATE_ensureOfflineComponents(e).then(e2 => e2.localStore);\n}\nfunction __PRIVATE_getRemoteStore(e) {\n  return __PRIVATE_ensureOnlineComponents(e).then(e2 => e2.remoteStore);\n}\nfunction __PRIVATE_getSyncEngine(e) {\n  return __PRIVATE_ensureOnlineComponents(e).then(e2 => e2.syncEngine);\n}\nfunction __PRIVATE_getDatastore(e) {\n  return __PRIVATE_ensureOnlineComponents(e).then(e2 => e2.datastore);\n}\nasync function __PRIVATE_getEventManager(e) {\n  const t = await __PRIVATE_ensureOnlineComponents(e),\n    n = t.eventManager;\n  return n.onListen = __PRIVATE_syncEngineListen.bind(null, t.syncEngine), n.onUnlisten = __PRIVATE_syncEngineUnlisten.bind(null, t.syncEngine), n;\n}\nfunction __PRIVATE_firestoreClientEnableNetwork(e) {\n  return e.asyncQueue.enqueue(async () => {\n    const t = await __PRIVATE_getPersistence(e),\n      n = await __PRIVATE_getRemoteStore(e);\n    return t.setNetworkEnabled(true), function __PRIVATE_remoteStoreEnableNetwork(e2) {\n      const t2 = __PRIVATE_debugCast(e2);\n      return t2.C_.delete(0), __PRIVATE_enableNetworkInternal(t2);\n    }(n);\n  });\n}\nfunction __PRIVATE_firestoreClientDisableNetwork(e) {\n  return e.asyncQueue.enqueue(async () => {\n    const t = await __PRIVATE_getPersistence(e),\n      n = await __PRIVATE_getRemoteStore(e);\n    return t.setNetworkEnabled(false), async function __PRIVATE_remoteStoreDisableNetwork(e2) {\n      const t2 = __PRIVATE_debugCast(e2);\n      t2.C_.add(0), await __PRIVATE_disableNetworkInternal(t2), t2.M_.set(\"Offline\");\n    }(n);\n  });\n}\nfunction __PRIVATE_firestoreClientGetDocumentFromLocalCache(e, t) {\n  const n = new __PRIVATE_Deferred();\n  return e.asyncQueue.enqueueAndForget(async () => async function __PRIVATE_readDocumentFromCache(e2, t2, n2) {\n    try {\n      const r = await function __PRIVATE_localStoreReadDocument(e3, t3) {\n        const n3 = __PRIVATE_debugCast(e3);\n        return n3.persistence.runTransaction(\"read document\", \"readonly\", e4 => n3.localDocuments.getDocument(e4, t3));\n      }(e2, t2);\n      r.isFoundDocument() ? n2.resolve(r) : r.isNoDocument() ? n2.resolve(null) : n2.reject(new FirestoreError(C.UNAVAILABLE, \"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)\"));\n    } catch (e3) {\n      const r = __PRIVATE_wrapInUserErrorIfRecoverable(e3, `Failed to get document '${t2} from cache`);\n      n2.reject(r);\n    }\n  }(await __PRIVATE_getLocalStore(e), t, n)), n.promise;\n}\nfunction __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(e, t, n = {}) {\n  const r = new __PRIVATE_Deferred();\n  return e.asyncQueue.enqueueAndForget(async () => function __PRIVATE_readDocumentViaSnapshotListener(e2, t2, n2, r2, i) {\n    const s = new __PRIVATE_AsyncObserver({\n        next: s2 => {\n          t2.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e2, o));\n          const _ = s2.docs.has(n2);\n          !_ && s2.fromCache ? i.reject(new FirestoreError(C.UNAVAILABLE, \"Failed to get document because the client is offline.\")) : _ && s2.fromCache && r2 && \"server\" === r2.source ? i.reject(new FirestoreError(C.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to \"server\" to retrieve the cached document.)')) : i.resolve(s2);\n        },\n        error: e3 => i.reject(e3)\n      }),\n      o = new __PRIVATE_QueryListener(__PRIVATE_newQueryForPath(n2.path), s, {\n        includeMetadataChanges: true,\n        J_: true\n      });\n    return __PRIVATE_eventManagerListen(e2, o);\n  }(await __PRIVATE_getEventManager(e), e.asyncQueue, t, n, r)), r.promise;\n}\nfunction __PRIVATE_firestoreClientGetDocumentsFromLocalCache(e, t) {\n  const n = new __PRIVATE_Deferred();\n  return e.asyncQueue.enqueueAndForget(async () => async function __PRIVATE_executeQueryFromCache(e2, t2, n2) {\n    try {\n      const r = await __PRIVATE_localStoreExecuteQuery(e2, t2, true),\n        i = new __PRIVATE_View(t2, r.ls),\n        s = i.ca(r.documents),\n        o = i.applyChanges(s, false);\n      n2.resolve(o.snapshot);\n    } catch (e3) {\n      const r = __PRIVATE_wrapInUserErrorIfRecoverable(e3, `Failed to execute query '${t2} against cache`);\n      n2.reject(r);\n    }\n  }(await __PRIVATE_getLocalStore(e), t, n)), n.promise;\n}\nfunction __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(e, t, n = {}) {\n  const r = new __PRIVATE_Deferred();\n  return e.asyncQueue.enqueueAndForget(async () => function __PRIVATE_executeQueryViaSnapshotListener(e2, t2, n2, r2, i) {\n    const s = new __PRIVATE_AsyncObserver({\n        next: n3 => {\n          t2.enqueueAndForget(() => __PRIVATE_eventManagerUnlisten(e2, o)), n3.fromCache && \"server\" === r2.source ? i.reject(new FirestoreError(C.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to \"server\" to retrieve the cached documents.)')) : i.resolve(n3);\n        },\n        error: e3 => i.reject(e3)\n      }),\n      o = new __PRIVATE_QueryListener(n2, s, {\n        includeMetadataChanges: true,\n        J_: true\n      });\n    return __PRIVATE_eventManagerListen(e2, o);\n  }(await __PRIVATE_getEventManager(e), e.asyncQueue, t, n, r)), r.promise;\n}\nfunction __PRIVATE_firestoreClientAddSnapshotsInSyncListener(e, t) {\n  const n = new __PRIVATE_AsyncObserver(t);\n  return e.asyncQueue.enqueueAndForget(async () => function __PRIVATE_addSnapshotsInSyncListener(e2, t2) {\n    __PRIVATE_debugCast(e2).q_.add(t2), t2.next();\n  }(await __PRIVATE_getEventManager(e), n)), () => {\n    n.Na(), e.asyncQueue.enqueueAndForget(async () => function __PRIVATE_removeSnapshotsInSyncListener(e2, t2) {\n      __PRIVATE_debugCast(e2).q_.delete(t2);\n    }(await __PRIVATE_getEventManager(e), n));\n  };\n}\nfunction __PRIVATE_firestoreClientLoadBundle(e, t, n, r) {\n  const i = function __PRIVATE_createBundleReader(e2, t2) {\n    let n2;\n    n2 = \"string\" == typeof e2 ? __PRIVATE_newTextEncoder().encode(e2) : e2;\n    return function __PRIVATE_newBundleReader(e3, t3) {\n      return new __PRIVATE_BundleReaderImpl(e3, t3);\n    }(function __PRIVATE_toByteStreamReader(e3, t3) {\n      if (e3 instanceof Uint8Array) return __PRIVATE_toByteStreamReaderHelper(e3, t3);\n      if (e3 instanceof ArrayBuffer) return __PRIVATE_toByteStreamReaderHelper(new Uint8Array(e3), t3);\n      if (e3 instanceof ReadableStream) return e3.getReader();\n      throw new Error(\"Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream\");\n    }(n2), t2);\n  }(n, __PRIVATE_newSerializer(t));\n  e.asyncQueue.enqueueAndForget(async () => {\n    __PRIVATE_syncEngineLoadBundle(await __PRIVATE_getSyncEngine(e), i, r);\n  });\n}\nfunction __PRIVATE_firestoreClientGetNamedQuery(e, t) {\n  return e.asyncQueue.enqueue(async () => function __PRIVATE_localStoreGetNamedQuery(e2, t2) {\n    const n = __PRIVATE_debugCast(e2);\n    return n.persistence.runTransaction(\"Get named query\", \"readonly\", e3 => n.Kr.getNamedQuery(e3, t2));\n  }(await __PRIVATE_getLocalStore(e), t));\n}\nfunction __PRIVATE_firestoreClientSetIndexConfiguration(e, t) {\n  return e.asyncQueue.enqueue(async () => async function __PRIVATE_localStoreConfigureFieldIndexes(e2, t2) {\n    const n = __PRIVATE_debugCast(e2),\n      r = n.indexManager,\n      i = [];\n    return n.persistence.runTransaction(\"Configure indexes\", \"readwrite\", e3 => r.getFieldIndexes(e3).next(n2 => function __PRIVATE_diffArrays(e4, t3, n3, r2, i2) {\n      e4 = [...e4], t3 = [...t3], e4.sort(n3), t3.sort(n3);\n      const s = e4.length,\n        o = t3.length;\n      let _ = 0,\n        a = 0;\n      for (; _ < o && a < s;) {\n        const s2 = n3(e4[a], t3[_]);\n        s2 < 0 ? i2(e4[a++]) : s2 > 0 ? r2(t3[_++]) : (_++, a++);\n      }\n      for (; _ < o;) r2(t3[_++]);\n      for (; a < s;) i2(e4[a++]);\n    }(n2, t2, __PRIVATE_fieldIndexSemanticComparator, t3 => {\n      i.push(r.addFieldIndex(e3, t3));\n    }, t3 => {\n      i.push(r.deleteFieldIndex(e3, t3));\n    })).next(() => PersistencePromise.waitFor(i)));\n  }(await __PRIVATE_getLocalStore(e), t));\n}\nfunction __PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled(e, t) {\n  return e.asyncQueue.enqueue(async () => function __PRIVATE_localStoreSetIndexAutoCreationEnabled(e2, t2) {\n    __PRIVATE_debugCast(e2).es.$i = t2;\n  }(await __PRIVATE_getLocalStore(e), t));\n}\nfunction __PRIVATE_firestoreClientDeleteAllFieldIndexes(e) {\n  return e.asyncQueue.enqueue(async () => function __PRIVATE_localStoreDeleteAllFieldIndexes(e2) {\n    const t = __PRIVATE_debugCast(e2),\n      n = t.indexManager;\n    return t.persistence.runTransaction(\"Delete All Indexes\", \"readwrite\", e3 => n.deleteAllFieldIndexes(e3));\n  }(await __PRIVATE_getLocalStore(e)));\n}\nfunction __PRIVATE_cloneLongPollingOptions(e) {\n  const t = {};\n  return void 0 !== e.timeoutSeconds && (t.timeoutSeconds = e.timeoutSeconds), t;\n}\nvar fe = /* @__PURE__ */new Map();\nfunction __PRIVATE_validateNonEmptyArgument(e, t, n) {\n  if (!n) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() cannot be called with an empty ${t}.`);\n}\nfunction __PRIVATE_validateIsNotUsedTogether(e, t, n, r) {\n  if (true === t && true === r) throw new FirestoreError(C.INVALID_ARGUMENT, `${e} and ${n} cannot be used together.`);\n}\nfunction __PRIVATE_validateDocumentPath(e) {\n  if (!DocumentKey.isDocumentKey(e)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`);\n}\nfunction __PRIVATE_validateCollectionPath(e) {\n  if (DocumentKey.isDocumentKey(e)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`);\n}\nfunction __PRIVATE_valueDescription(e) {\n  if (void 0 === e) return \"undefined\";\n  if (null === e) return \"null\";\n  if (\"string\" == typeof e) return e.length > 20 && (e = `${e.substring(0, 20)}...`), JSON.stringify(e);\n  if (\"number\" == typeof e || \"boolean\" == typeof e) return \"\" + e;\n  if (\"object\" == typeof e) {\n    if (e instanceof Array) return \"an array\";\n    {\n      const t = function __PRIVATE_tryGetCustomObjectType(e2) {\n        if (e2.constructor) return e2.constructor.name;\n        return null;\n      }(e);\n      return t ? `a custom ${t} object` : \"an object\";\n    }\n  }\n  return \"function\" == typeof e ? \"a function\" : fail();\n}\nfunction __PRIVATE_cast(e, t) {\n  if (\"_delegate\" in e && (e = e._delegate), !(e instanceof t)) {\n    if (t.name === e.constructor.name) throw new FirestoreError(C.INVALID_ARGUMENT, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n    {\n      const n = __PRIVATE_valueDescription(e);\n      throw new FirestoreError(C.INVALID_ARGUMENT, `Expected type '${t.name}', but it was: ${n}`);\n    }\n  }\n  return e;\n}\nfunction __PRIVATE_validatePositiveNumber(e, t) {\n  if (t <= 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() requires a positive number, but it was: ${t}.`);\n}\nvar FirestoreSettingsImpl = class {\n  constructor(e) {\n    var t, n;\n    if (void 0 === e.host) {\n      if (void 0 !== e.ssl) throw new FirestoreError(C.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n      this.host = \"firestore.googleapis.com\", this.ssl = true;\n    } else this.host = e.host, this.ssl = null === (t = e.ssl) || void 0 === t || t;\n    if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, this.localCache = e.localCache, void 0 === e.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {\n      if (-1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576) throw new FirestoreError(C.INVALID_ARGUMENT, \"cacheSizeBytes must be at least 1048576\");\n      this.cacheSizeBytes = e.cacheSizeBytes;\n    }\n    __PRIVATE_validateIsNotUsedTogether(\"experimentalForceLongPolling\", e.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", e.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = false : void 0 === e.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling, this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (n = e.experimentalLongPollingOptions) && void 0 !== n ? n : {}), function __PRIVATE_validateLongPollingOptions(e2) {\n      if (void 0 !== e2.timeoutSeconds) {\n        if (isNaN(e2.timeoutSeconds)) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (must not be NaN)`);\n        if (e2.timeoutSeconds < 5) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (minimum allowed value is 5)`);\n        if (e2.timeoutSeconds > 30) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e2.timeoutSeconds} (maximum allowed value is 30)`);\n      }\n    }(this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;\n  }\n  isEqual(e) {\n    return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(e2, t) {\n      return e2.timeoutSeconds === t.timeoutSeconds;\n    }(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;\n  }\n};\nvar Firestore$1 = class {\n  constructor(e, t, n, r) {\n    this._authCredentials = e, this._appCheckCredentials = t, this._databaseId = n, this._app = r, this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = false;\n  }\n  get app() {\n    if (!this._app) throw new FirestoreError(C.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n    return this._app;\n  }\n  get _initialized() {\n    return this._settingsFrozen;\n  }\n  get _terminated() {\n    return void 0 !== this._terminateTask;\n  }\n  _setSettings(e) {\n    if (this._settingsFrozen) throw new FirestoreError(C.FAILED_PRECONDITION, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n    this._settings = new FirestoreSettingsImpl(e), void 0 !== e.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(e2) {\n      if (!e2) return new __PRIVATE_EmptyAuthCredentialsProvider();\n      switch (e2.type) {\n        case \"firstParty\":\n          return new __PRIVATE_FirstPartyAuthCredentialsProvider(e2.sessionIndex || \"0\", e2.iamToken || null, e2.authTokenFactory || null);\n        case \"provider\":\n          return e2.client;\n        default:\n          throw new FirestoreError(C.INVALID_ARGUMENT, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n      }\n    }(e.credentials));\n  }\n  _getSettings() {\n    return this._settings;\n  }\n  _freezeSettings() {\n    return this._settingsFrozen = true, this._settings;\n  }\n  _delete() {\n    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n  }\n  toJSON() {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n  _terminate() {\n    return function __PRIVATE_removeComponents(e) {\n      const t = fe.get(e);\n      t && (__PRIVATE_logDebug(\"ComponentProvider\", \"Removing Datastore\"), fe.delete(e), t.terminate());\n    }(this), Promise.resolve();\n  }\n};\nfunction connectFirestoreEmulator(e, t, n, r = {}) {\n  var i;\n  const s = (e = __PRIVATE_cast(e, Firestore$1))._getSettings(),\n    o = `${t}:${n}`;\n  if (\"firestore.googleapis.com\" !== s.host && s.host !== o && __PRIVATE_logWarn(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), e._setSettings(Object.assign(Object.assign({}, s), {\n    host: o,\n    ssl: false\n  })), r.mockUserToken) {\n    let t2, n2;\n    if (\"string\" == typeof r.mockUserToken) t2 = r.mockUserToken, n2 = User.MOCK_USER;else {\n      t2 = (0, import_util.createMockUserToken)(r.mockUserToken, null === (i = e._app) || void 0 === i ? void 0 : i.options.projectId);\n      const s2 = r.mockUserToken.sub || r.mockUserToken.user_id;\n      if (!s2) throw new FirestoreError(C.INVALID_ARGUMENT, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      n2 = new User(s2);\n    }\n    e._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(t2, n2));\n  }\n}\nvar Query = class {\n  constructor(e, t, n) {\n    this.converter = t, this._query = n, this.type = \"query\", this.firestore = e;\n  }\n  withConverter(e) {\n    return new Query(this.firestore, e, this._query);\n  }\n};\nvar DocumentReference = class {\n  constructor(e, t, n) {\n    this.converter = t, this._key = n, this.type = \"document\", this.firestore = e;\n  }\n  get _path() {\n    return this._key.path;\n  }\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  get path() {\n    return this._key.path.canonicalString();\n  }\n  get parent() {\n    return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n  }\n  withConverter(e) {\n    return new DocumentReference(this.firestore, e, this._key);\n  }\n};\nvar CollectionReference = class extends Query {\n  constructor(e, t, n) {\n    super(e, t, __PRIVATE_newQueryForPath(n)), this._path = n, this.type = \"collection\";\n  }\n  get id() {\n    return this._query.path.lastSegment();\n  }\n  get path() {\n    return this._query.path.canonicalString();\n  }\n  get parent() {\n    const e = this._path.popLast();\n    return e.isEmpty() ? null : new DocumentReference(this.firestore, null, new DocumentKey(e));\n  }\n  withConverter(e) {\n    return new CollectionReference(this.firestore, e, this._path);\n  }\n};\nfunction collection(e, t, ...n) {\n  if (e = (0, import_util.getModularInstance)(e), __PRIVATE_validateNonEmptyArgument(\"collection\", \"path\", t), e instanceof Firestore$1) {\n    const r = ResourcePath.fromString(t, ...n);\n    return __PRIVATE_validateCollectionPath(r), new CollectionReference(e, null, r);\n  }\n  {\n    if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(C.INVALID_ARGUMENT, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    const r = e._path.child(ResourcePath.fromString(t, ...n));\n    return __PRIVATE_validateCollectionPath(r), new CollectionReference(e.firestore, null, r);\n  }\n}\nfunction collectionGroup(e, t) {\n  if (e = __PRIVATE_cast(e, Firestore$1), __PRIVATE_validateNonEmptyArgument(\"collectionGroup\", \"collection id\", t), t.indexOf(\"/\") >= 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid collection ID '${t}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n  return new Query(e, null, function __PRIVATE_newQueryForCollectionGroup(e2) {\n    return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), e2);\n  }(t));\n}\nfunction doc(e, t, ...n) {\n  if (e = (0, import_util.getModularInstance)(e), 1 === arguments.length && (t = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument(\"doc\", \"path\", t), e instanceof Firestore$1) {\n    const r = ResourcePath.fromString(t, ...n);\n    return __PRIVATE_validateDocumentPath(r), new DocumentReference(e, null, new DocumentKey(r));\n  }\n  {\n    if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(C.INVALID_ARGUMENT, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    const r = e._path.child(ResourcePath.fromString(t, ...n));\n    return __PRIVATE_validateDocumentPath(r), new DocumentReference(e.firestore, e instanceof CollectionReference ? e.converter : null, new DocumentKey(r));\n  }\n}\nfunction refEqual(e, t) {\n  return e = (0, import_util.getModularInstance)(e), t = (0, import_util.getModularInstance)(t), (e instanceof DocumentReference || e instanceof CollectionReference) && (t instanceof DocumentReference || t instanceof CollectionReference) && e.firestore === t.firestore && e.path === t.path && e.converter === t.converter;\n}\nfunction queryEqual(e, t) {\n  return e = (0, import_util.getModularInstance)(e), t = (0, import_util.getModularInstance)(t), e instanceof Query && t instanceof Query && e.firestore === t.firestore && __PRIVATE_queryEquals(e._query, t._query) && e.converter === t.converter;\n}\nvar __PRIVATE_AsyncQueueImpl = class {\n  constructor() {\n    this.Ja = Promise.resolve(), this.Ya = [], this.Za = false, this.Xa = [], this.eu = null, this.tu = false, this.nu = false, this.ru = [], this.zo = new __PRIVATE_ExponentialBackoff(this, \"async_queue_retry\"), this.iu = () => {\n      const e2 = getDocument();\n      e2 && __PRIVATE_logDebug(\"AsyncQueue\", \"Visibility state changed to \" + e2.visibilityState), this.zo.Qo();\n    };\n    const e = getDocument();\n    e && \"function\" == typeof e.addEventListener && e.addEventListener(\"visibilitychange\", this.iu);\n  }\n  get isShuttingDown() {\n    return this.Za;\n  }\n  enqueueAndForget(e) {\n    this.enqueue(e);\n  }\n  enqueueAndForgetEvenWhileRestricted(e) {\n    this.su(), this.ou(e);\n  }\n  enterRestrictedMode(e) {\n    if (!this.Za) {\n      this.Za = true, this.nu = e || false;\n      const t = getDocument();\n      t && \"function\" == typeof t.removeEventListener && t.removeEventListener(\"visibilitychange\", this.iu);\n    }\n  }\n  enqueue(e) {\n    if (this.su(), this.Za) return new Promise(() => {});\n    const t = new __PRIVATE_Deferred();\n    return this.ou(() => this.Za && this.nu ? Promise.resolve() : (e().then(t.resolve, t.reject), t.promise)).then(() => t.promise);\n  }\n  enqueueRetryable(e) {\n    this.enqueueAndForget(() => (this.Ya.push(e), this._u()));\n  }\n  async _u() {\n    if (0 !== this.Ya.length) {\n      try {\n        await this.Ya[0](), this.Ya.shift(), this.zo.reset();\n      } catch (e) {\n        if (!__PRIVATE_isIndexedDbTransactionError(e)) throw e;\n        __PRIVATE_logDebug(\"AsyncQueue\", \"Operation failed with retryable error: \" + e);\n      }\n      this.Ya.length > 0 && this.zo.ko(() => this._u());\n    }\n  }\n  ou(e) {\n    const t = this.Ja.then(() => (this.tu = true, e().catch(e2 => {\n      this.eu = e2, this.tu = false;\n      const t2 = function __PRIVATE_getMessageOrStack(e3) {\n        let t3 = e3.message || \"\";\n        e3.stack && (t3 = e3.stack.includes(e3.message) ? e3.stack : e3.message + \"\\n\" + e3.stack);\n        return t3;\n      }(e2);\n      throw __PRIVATE_logError(\"INTERNAL UNHANDLED ERROR: \", t2), e2;\n    }).then(e2 => (this.tu = false, e2))));\n    return this.Ja = t, t;\n  }\n  enqueueAfterDelay(e, t, n) {\n    this.su(), this.ru.indexOf(e) > -1 && (t = 0);\n    const r = DelayedOperation.createAndSchedule(this, e, t, n, e2 => this.au(e2));\n    return this.Xa.push(r), r;\n  }\n  su() {\n    this.eu && fail();\n  }\n  verifyOperationInProgress() {}\n  async uu() {\n    let e;\n    do {\n      e = this.Ja, await e;\n    } while (e !== this.Ja);\n  }\n  cu(e) {\n    for (const t of this.Xa) if (t.timerId === e) return true;\n    return false;\n  }\n  lu(e) {\n    return this.uu().then(() => {\n      this.Xa.sort((e2, t) => e2.targetTimeMs - t.targetTimeMs);\n      for (const t of this.Xa) if (t.skipDelay(), \"all\" !== e && t.timerId === e) break;\n      return this.uu();\n    });\n  }\n  hu(e) {\n    this.ru.push(e);\n  }\n  au(e) {\n    const t = this.Xa.indexOf(e);\n    this.Xa.splice(t, 1);\n  }\n};\nfunction __PRIVATE_isPartialObserver(e) {\n  return function __PRIVATE_implementsAnyMethods(e2, t) {\n    if (\"object\" != typeof e2 || null === e2) return false;\n    const n = e2;\n    for (const e3 of t) if (e3 in n && \"function\" == typeof n[e3]) return true;\n    return false;\n  }(e, [\"next\", \"error\", \"complete\"]);\n}\nvar LoadBundleTask = class {\n  constructor() {\n    this._progressObserver = {}, this._taskCompletionResolver = new __PRIVATE_Deferred(), this._lastProgress = {\n      taskState: \"Running\",\n      totalBytes: 0,\n      totalDocuments: 0,\n      bytesLoaded: 0,\n      documentsLoaded: 0\n    };\n  }\n  onProgress(e, t, n) {\n    this._progressObserver = {\n      next: e,\n      error: t,\n      complete: n\n    };\n  }\n  catch(e) {\n    return this._taskCompletionResolver.promise.catch(e);\n  }\n  then(e, t) {\n    return this._taskCompletionResolver.promise.then(e, t);\n  }\n  _completeWith(e) {\n    this._updateProgress(e), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(e);\n  }\n  _failWith(e) {\n    this._lastProgress.taskState = \"Error\", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(e), this._taskCompletionResolver.reject(e);\n  }\n  _updateProgress(e) {\n    this._lastProgress = e, this._progressObserver.next && this._progressObserver.next(e);\n  }\n};\nvar ge = -1;\nvar Firestore = class extends Firestore$1 {\n  constructor(e, t, n, r) {\n    super(e, t, n, r), this.type = \"firestore\", this._queue = function __PRIVATE_newAsyncQueue() {\n      return new __PRIVATE_AsyncQueueImpl();\n    }(), this._persistenceKey = (null == r ? void 0 : r.name) || \"[DEFAULT]\";\n  }\n  _terminate() {\n    return this._firestoreClient || __PRIVATE_configureFirestore(this), this._firestoreClient.terminate();\n  }\n};\nfunction initializeFirestore(e, t, n) {\n  n || (n = \"(default)\");\n  const r = (0, import_app._getProvider)(e, \"firestore\");\n  if (r.isInitialized(n)) {\n    const e2 = r.getImmediate({\n        identifier: n\n      }),\n      i = r.getOptions(n);\n    if ((0, import_util.deepEqual)(i, t)) return e2;\n    throw new FirestoreError(C.FAILED_PRECONDITION, \"initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.\");\n  }\n  if (void 0 !== t.cacheSizeBytes && void 0 !== t.localCache) throw new FirestoreError(C.INVALID_ARGUMENT, \"cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes willbe deprecated. Instead, specify the cache size in the cache object\");\n  if (void 0 !== t.cacheSizeBytes && -1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(C.INVALID_ARGUMENT, \"cacheSizeBytes must be at least 1048576\");\n  return r.initialize({\n    options: t,\n    instanceIdentifier: n\n  });\n}\nfunction getFirestore(t, n) {\n  const r = \"object\" == typeof t ? t : (0, import_app.getApp)(),\n    i = \"string\" == typeof t ? t : n || \"(default)\",\n    s = (0, import_app._getProvider)(r, \"firestore\").getImmediate({\n      identifier: i\n    });\n  if (!s._initialized) {\n    const e = (0, import_util.getDefaultEmulatorHostnameAndPort)(\"firestore\");\n    e && connectFirestoreEmulator(s, ...e);\n  }\n  return s;\n}\nfunction ensureFirestoreConfigured(e) {\n  return e._firestoreClient || __PRIVATE_configureFirestore(e), e._firestoreClient.verifyNotTerminated(), e._firestoreClient;\n}\nfunction __PRIVATE_configureFirestore(e) {\n  var t, n, r;\n  const i = e._freezeSettings(),\n    s = function __PRIVATE_makeDatabaseInfo(e2, t2, n2, r2) {\n      return new DatabaseInfo(e2, t2, n2, r2.host, r2.ssl, r2.experimentalForceLongPolling, r2.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(r2.experimentalLongPollingOptions), r2.useFetchStreams);\n    }(e._databaseId, (null === (t = e._app) || void 0 === t ? void 0 : t.options.appId) || \"\", e._persistenceKey, i);\n  e._firestoreClient = new FirestoreClient(e._authCredentials, e._appCheckCredentials, e._queue, s), (null === (n = i.localCache) || void 0 === n ? void 0 : n._offlineComponentProvider) && (null === (r = i.localCache) || void 0 === r ? void 0 : r._onlineComponentProvider) && (e._firestoreClient._uninitializedComponentsProvider = {\n    _offlineKind: i.localCache.kind,\n    _offline: i.localCache._offlineComponentProvider,\n    _online: i.localCache._onlineComponentProvider\n  });\n}\nfunction enableIndexedDbPersistence(e, t) {\n  __PRIVATE_verifyNotInitialized(e = __PRIVATE_cast(e, Firestore));\n  const n = ensureFirestoreConfigured(e);\n  if (n._uninitializedComponentsProvider) throw new FirestoreError(C.FAILED_PRECONDITION, \"SDK cache is already specified.\");\n  __PRIVATE_logWarn(\"enableIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.\");\n  const r = e._freezeSettings(),\n    i = new OnlineComponentProvider();\n  return __PRIVATE_setPersistenceProviders(n, i, new __PRIVATE_IndexedDbOfflineComponentProvider(i, r.cacheSizeBytes, null == t ? void 0 : t.forceOwnership));\n}\nfunction enableMultiTabIndexedDbPersistence(e) {\n  __PRIVATE_verifyNotInitialized(e = __PRIVATE_cast(e, Firestore));\n  const t = ensureFirestoreConfigured(e);\n  if (t._uninitializedComponentsProvider) throw new FirestoreError(C.FAILED_PRECONDITION, \"SDK cache is already specified.\");\n  __PRIVATE_logWarn(\"enableMultiTabIndexedDbPersistence() will be deprecated in the future, you can use `FirestoreSettings.cache` instead.\");\n  const n = e._freezeSettings(),\n    r = new OnlineComponentProvider();\n  return __PRIVATE_setPersistenceProviders(t, r, new __PRIVATE_MultiTabOfflineComponentProvider(r, n.cacheSizeBytes));\n}\nfunction __PRIVATE_setPersistenceProviders(e, t, n) {\n  const r = new __PRIVATE_Deferred();\n  return e.asyncQueue.enqueue(async () => {\n    try {\n      await __PRIVATE_setOfflineComponentProvider(e, n), await __PRIVATE_setOnlineComponentProvider(e, t), r.resolve();\n    } catch (e2) {\n      const t2 = e2;\n      if (!__PRIVATE_canFallbackFromIndexedDbError(t2)) throw t2;\n      __PRIVATE_logWarn(\"Error enabling indexeddb cache. Falling back to memory cache: \" + t2), r.reject(t2);\n    }\n  }).then(() => r.promise);\n}\nfunction clearIndexedDbPersistence(e) {\n  if (e._initialized && !e._terminated) throw new FirestoreError(C.FAILED_PRECONDITION, \"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.\");\n  const t = new __PRIVATE_Deferred();\n  return e._queue.enqueueAndForgetEvenWhileRestricted(async () => {\n    try {\n      await async function __PRIVATE_indexedDbClearPersistence(e2) {\n        if (!__PRIVATE_SimpleDb.D()) return Promise.resolve();\n        const t2 = e2 + \"main\";\n        await __PRIVATE_SimpleDb.delete(t2);\n      }(__PRIVATE_indexedDbStoragePrefix(e._databaseId, e._persistenceKey)), t.resolve();\n    } catch (e2) {\n      t.reject(e2);\n    }\n  }), t.promise;\n}\nfunction waitForPendingWrites(e) {\n  return function __PRIVATE_firestoreClientWaitForPendingWrites(e2) {\n    const t = new __PRIVATE_Deferred();\n    return e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_syncEngineRegisterPendingWritesCallback(await __PRIVATE_getSyncEngine(e2), t)), t.promise;\n  }(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));\n}\nfunction enableNetwork(e) {\n  return __PRIVATE_firestoreClientEnableNetwork(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));\n}\nfunction disableNetwork(e) {\n  return __PRIVATE_firestoreClientDisableNetwork(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)));\n}\nfunction terminate(e) {\n  return (0, import_app._removeServiceInstance)(e.app, \"firestore\", e._databaseId.database), e._delete();\n}\nfunction loadBundle(e, t) {\n  const n = ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)),\n    r = new LoadBundleTask();\n  return __PRIVATE_firestoreClientLoadBundle(n, e._databaseId, t, r), r;\n}\nfunction namedQuery(e, t) {\n  return __PRIVATE_firestoreClientGetNamedQuery(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), t).then(t2 => t2 ? new Query(e, null, t2.query) : null);\n}\nfunction __PRIVATE_verifyNotInitialized(e) {\n  if (e._initialized || e._terminated) throw new FirestoreError(C.FAILED_PRECONDITION, \"Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.\");\n}\nvar AggregateField = class {\n  constructor(e = \"count\", t) {\n    this._internalFieldPath = t, this.type = \"AggregateField\", this.aggregateType = e;\n  }\n};\nvar AggregateQuerySnapshot = class {\n  constructor(e, t, n) {\n    this._userDataWriter = t, this._data = n, this.type = \"AggregateQuerySnapshot\", this.query = e;\n  }\n  data() {\n    return this._userDataWriter.convertObjectMap(this._data);\n  }\n};\nvar Bytes = class {\n  constructor(e) {\n    this._byteString = e;\n  }\n  static fromBase64String(e) {\n    try {\n      return new Bytes(ByteString.fromBase64String(e));\n    } catch (e2) {\n      throw new FirestoreError(C.INVALID_ARGUMENT, \"Failed to construct data from Base64 string: \" + e2);\n    }\n  }\n  static fromUint8Array(e) {\n    return new Bytes(ByteString.fromUint8Array(e));\n  }\n  toBase64() {\n    return this._byteString.toBase64();\n  }\n  toUint8Array() {\n    return this._byteString.toUint8Array();\n  }\n  toString() {\n    return \"Bytes(base64: \" + this.toBase64() + \")\";\n  }\n  isEqual(e) {\n    return this._byteString.isEqual(e._byteString);\n  }\n};\nvar FieldPath = class {\n  constructor(...e) {\n    for (let t = 0; t < e.length; ++t) if (0 === e[t].length) throw new FirestoreError(C.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n    this._internalPath = new FieldPath$1(e);\n  }\n  isEqual(e) {\n    return this._internalPath.isEqual(e._internalPath);\n  }\n};\nfunction documentId() {\n  return new FieldPath(\"__name__\");\n}\nvar FieldValue = class {\n  constructor(e) {\n    this._methodName = e;\n  }\n};\nvar GeoPoint = class {\n  constructor(e, t) {\n    if (!isFinite(e) || e < -90 || e > 90) throw new FirestoreError(C.INVALID_ARGUMENT, \"Latitude must be a number between -90 and 90, but was: \" + e);\n    if (!isFinite(t) || t < -180 || t > 180) throw new FirestoreError(C.INVALID_ARGUMENT, \"Longitude must be a number between -180 and 180, but was: \" + t);\n    this._lat = e, this._long = t;\n  }\n  get latitude() {\n    return this._lat;\n  }\n  get longitude() {\n    return this._long;\n  }\n  isEqual(e) {\n    return this._lat === e._lat && this._long === e._long;\n  }\n  toJSON() {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  }\n  _compareTo(e) {\n    return __PRIVATE_primitiveComparator(this._lat, e._lat) || __PRIVATE_primitiveComparator(this._long, e._long);\n  }\n};\nvar pe = /^__.*__$/;\nvar ParsedSetData = class {\n  constructor(e, t, n) {\n    this.data = e, this.fieldMask = t, this.fieldTransforms = n;\n  }\n  toMutation(e, t) {\n    return null !== this.fieldMask ? new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t, this.fieldTransforms) : new __PRIVATE_SetMutation(e, this.data, t, this.fieldTransforms);\n  }\n};\nvar ParsedUpdateData = class {\n  constructor(e, t, n) {\n    this.data = e, this.fieldMask = t, this.fieldTransforms = n;\n  }\n  toMutation(e, t) {\n    return new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t, this.fieldTransforms);\n  }\n};\nfunction __PRIVATE_isWrite(e) {\n  switch (e) {\n    case 0:\n    case 2:\n    case 1:\n      return true;\n    case 3:\n    case 4:\n      return false;\n    default:\n      throw fail();\n  }\n}\nvar __PRIVATE_ParseContextImpl = class {\n  constructor(e, t, n, r, i, s) {\n    this.settings = e, this.databaseId = t, this.serializer = n, this.ignoreUndefinedProperties = r, void 0 === i && this.Pu(), this.fieldTransforms = i || [], this.fieldMask = s || [];\n  }\n  get path() {\n    return this.settings.path;\n  }\n  get Iu() {\n    return this.settings.Iu;\n  }\n  Tu(e) {\n    return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  }\n  Eu(e) {\n    var t;\n    const n = null === (t = this.path) || void 0 === t ? void 0 : t.child(e),\n      r = this.Tu({\n        path: n,\n        du: false\n      });\n    return r.Au(e), r;\n  }\n  Ru(e) {\n    var t;\n    const n = null === (t = this.path) || void 0 === t ? void 0 : t.child(e),\n      r = this.Tu({\n        path: n,\n        du: false\n      });\n    return r.Pu(), r;\n  }\n  Vu(e) {\n    return this.Tu({\n      path: void 0,\n      du: true\n    });\n  }\n  mu(e) {\n    return __PRIVATE_createError(e, this.settings.methodName, this.settings.fu || false, this.path, this.settings.gu);\n  }\n  contains(e) {\n    return void 0 !== this.fieldMask.find(t => e.isPrefixOf(t)) || void 0 !== this.fieldTransforms.find(t => e.isPrefixOf(t.field));\n  }\n  Pu() {\n    if (this.path) for (let e = 0; e < this.path.length; e++) this.Au(this.path.get(e));\n  }\n  Au(e) {\n    if (0 === e.length) throw this.mu(\"Document fields must not be empty\");\n    if (__PRIVATE_isWrite(this.Iu) && pe.test(e)) throw this.mu('Document fields cannot begin and end with \"__\"');\n  }\n};\nvar __PRIVATE_UserDataReader = class {\n  constructor(e, t, n) {\n    this.databaseId = e, this.ignoreUndefinedProperties = t, this.serializer = n || __PRIVATE_newSerializer(e);\n  }\n  pu(e, t, n, r = false) {\n    return new __PRIVATE_ParseContextImpl({\n      Iu: e,\n      methodName: t,\n      gu: n,\n      path: FieldPath$1.emptyPath(),\n      du: false,\n      fu: r\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  }\n};\nfunction __PRIVATE_newUserDataReader(e) {\n  const t = e._freezeSettings(),\n    n = __PRIVATE_newSerializer(e._databaseId);\n  return new __PRIVATE_UserDataReader(e._databaseId, !!t.ignoreUndefinedProperties, n);\n}\nfunction __PRIVATE_parseSetData(e, t, n, r, i, s = {}) {\n  const o = e.pu(s.merge || s.mergeFields ? 2 : 0, t, n, i);\n  __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", o, r);\n  const _ = __PRIVATE_parseObject(r, o);\n  let a, u;\n  if (s.merge) a = new FieldMask(o.fieldMask), u = o.fieldTransforms;else if (s.mergeFields) {\n    const e2 = [];\n    for (const r2 of s.mergeFields) {\n      const i2 = __PRIVATE_fieldPathFromArgument$1(t, r2, n);\n      if (!o.contains(i2)) throw new FirestoreError(C.INVALID_ARGUMENT, `Field '${i2}' is specified in your field mask but missing from your input data.`);\n      __PRIVATE_fieldMaskContains(e2, i2) || e2.push(i2);\n    }\n    a = new FieldMask(e2), u = o.fieldTransforms.filter(e3 => a.covers(e3.field));\n  } else a = null, u = o.fieldTransforms;\n  return new ParsedSetData(new ObjectValue(_), a, u);\n}\nvar __PRIVATE_DeleteFieldValueImpl = class extends FieldValue {\n  _toFieldTransform(e) {\n    if (2 !== e.Iu) throw 1 === e.Iu ? e.mu(`${this._methodName}() can only appear at the top level of your update data`) : e.mu(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n    return e.fieldMask.push(e.path), null;\n  }\n  isEqual(e) {\n    return e instanceof __PRIVATE_DeleteFieldValueImpl;\n  }\n};\nfunction __PRIVATE_createSentinelChildContext(e, t, n) {\n  return new __PRIVATE_ParseContextImpl({\n    Iu: 3,\n    gu: t.settings.gu,\n    methodName: e._methodName,\n    du: n\n  }, t.databaseId, t.serializer, t.ignoreUndefinedProperties);\n}\nvar __PRIVATE_ServerTimestampFieldValueImpl = class extends FieldValue {\n  _toFieldTransform(e) {\n    return new FieldTransform(e.path, new __PRIVATE_ServerTimestampTransform());\n  }\n  isEqual(e) {\n    return e instanceof __PRIVATE_ServerTimestampFieldValueImpl;\n  }\n};\nvar __PRIVATE_ArrayUnionFieldValueImpl = class extends FieldValue {\n  constructor(e, t) {\n    super(e), this.yu = t;\n  }\n  _toFieldTransform(e) {\n    const t = __PRIVATE_createSentinelChildContext(this, e, true),\n      n = this.yu.map(e2 => __PRIVATE_parseData(e2, t)),\n      r = new __PRIVATE_ArrayUnionTransformOperation(n);\n    return new FieldTransform(e.path, r);\n  }\n  isEqual(e) {\n    return this === e;\n  }\n};\nvar __PRIVATE_ArrayRemoveFieldValueImpl = class extends FieldValue {\n  constructor(e, t) {\n    super(e), this.yu = t;\n  }\n  _toFieldTransform(e) {\n    const t = __PRIVATE_createSentinelChildContext(this, e, true),\n      n = this.yu.map(e2 => __PRIVATE_parseData(e2, t)),\n      r = new __PRIVATE_ArrayRemoveTransformOperation(n);\n    return new FieldTransform(e.path, r);\n  }\n  isEqual(e) {\n    return this === e;\n  }\n};\nvar __PRIVATE_NumericIncrementFieldValueImpl = class extends FieldValue {\n  constructor(e, t) {\n    super(e), this.wu = t;\n  }\n  _toFieldTransform(e) {\n    const t = new __PRIVATE_NumericIncrementTransformOperation(e.serializer, toNumber(e.serializer, this.wu));\n    return new FieldTransform(e.path, t);\n  }\n  isEqual(e) {\n    return this === e;\n  }\n};\nfunction __PRIVATE_parseUpdateData(e, t, n, r) {\n  const i = e.pu(1, t, n);\n  __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", i, r);\n  const s = [],\n    o = ObjectValue.empty();\n  forEach(r, (e2, r2) => {\n    const _2 = __PRIVATE_fieldPathFromDotSeparatedString(t, e2, n);\n    r2 = (0, import_util.getModularInstance)(r2);\n    const a = i.Ru(_2);\n    if (r2 instanceof __PRIVATE_DeleteFieldValueImpl) s.push(_2);else {\n      const e3 = __PRIVATE_parseData(r2, a);\n      null != e3 && (s.push(_2), o.set(_2, e3));\n    }\n  });\n  const _ = new FieldMask(s);\n  return new ParsedUpdateData(o, _, i.fieldTransforms);\n}\nfunction __PRIVATE_parseUpdateVarargs(e, t, n, r, i, s) {\n  const o = e.pu(1, t, n),\n    _ = [__PRIVATE_fieldPathFromArgument$1(t, r, n)],\n    a = [i];\n  if (s.length % 2 != 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);\n  for (let e2 = 0; e2 < s.length; e2 += 2) _.push(__PRIVATE_fieldPathFromArgument$1(t, s[e2])), a.push(s[e2 + 1]);\n  const u = [],\n    c = ObjectValue.empty();\n  for (let e2 = _.length - 1; e2 >= 0; --e2) if (!__PRIVATE_fieldMaskContains(u, _[e2])) {\n    const t2 = _[e2];\n    let n2 = a[e2];\n    n2 = (0, import_util.getModularInstance)(n2);\n    const r2 = o.Ru(t2);\n    if (n2 instanceof __PRIVATE_DeleteFieldValueImpl) u.push(t2);else {\n      const e3 = __PRIVATE_parseData(n2, r2);\n      null != e3 && (u.push(t2), c.set(t2, e3));\n    }\n  }\n  const l = new FieldMask(u);\n  return new ParsedUpdateData(c, l, o.fieldTransforms);\n}\nfunction __PRIVATE_parseQueryValue(e, t, n, r = false) {\n  return __PRIVATE_parseData(n, e.pu(r ? 4 : 3, t));\n}\nfunction __PRIVATE_parseData(e, t) {\n  if (__PRIVATE_looksLikeJsonObject(e = (0, import_util.getModularInstance)(e))) return __PRIVATE_validatePlainObject(\"Unsupported field value:\", t, e), __PRIVATE_parseObject(e, t);\n  if (e instanceof FieldValue) return function __PRIVATE_parseSentinelFieldValue(e2, t2) {\n    if (!__PRIVATE_isWrite(t2.Iu)) throw t2.mu(`${e2._methodName}() can only be used with update() and set()`);\n    if (!t2.path) throw t2.mu(`${e2._methodName}() is not currently supported inside arrays`);\n    const n = e2._toFieldTransform(t2);\n    n && t2.fieldTransforms.push(n);\n  }(e, t), null;\n  if (void 0 === e && t.ignoreUndefinedProperties) return null;\n  if (t.path && t.fieldMask.push(t.path), e instanceof Array) {\n    if (t.settings.du && 4 !== t.Iu) throw t.mu(\"Nested arrays are not supported\");\n    return function __PRIVATE_parseArray(e2, t2) {\n      const n = [];\n      let r = 0;\n      for (const i of e2) {\n        let e3 = __PRIVATE_parseData(i, t2.Vu(r));\n        null == e3 && (e3 = {\n          nullValue: \"NULL_VALUE\"\n        }), n.push(e3), r++;\n      }\n      return {\n        arrayValue: {\n          values: n\n        }\n      };\n    }(e, t);\n  }\n  return function __PRIVATE_parseScalarValue(e2, t2) {\n    if (null === (e2 = (0, import_util.getModularInstance)(e2))) return {\n      nullValue: \"NULL_VALUE\"\n    };\n    if (\"number\" == typeof e2) return toNumber(t2.serializer, e2);\n    if (\"boolean\" == typeof e2) return {\n      booleanValue: e2\n    };\n    if (\"string\" == typeof e2) return {\n      stringValue: e2\n    };\n    if (e2 instanceof Date) {\n      const n = Timestamp.fromDate(e2);\n      return {\n        timestampValue: toTimestamp(t2.serializer, n)\n      };\n    }\n    if (e2 instanceof Timestamp) {\n      const n = new Timestamp(e2.seconds, 1e3 * Math.floor(e2.nanoseconds / 1e3));\n      return {\n        timestampValue: toTimestamp(t2.serializer, n)\n      };\n    }\n    if (e2 instanceof GeoPoint) return {\n      geoPointValue: {\n        latitude: e2.latitude,\n        longitude: e2.longitude\n      }\n    };\n    if (e2 instanceof Bytes) return {\n      bytesValue: __PRIVATE_toBytes(t2.serializer, e2._byteString)\n    };\n    if (e2 instanceof DocumentReference) {\n      const n = t2.databaseId,\n        r = e2.firestore._databaseId;\n      if (!r.isEqual(n)) throw t2.mu(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n      return {\n        referenceValue: __PRIVATE_toResourceName(e2.firestore._databaseId || t2.databaseId, e2._key.path)\n      };\n    }\n    throw t2.mu(`Unsupported field value: ${__PRIVATE_valueDescription(e2)}`);\n  }(e, t);\n}\nfunction __PRIVATE_parseObject(e, t) {\n  const n = {};\n  return isEmpty(e) ? t.path && t.path.length > 0 && t.fieldMask.push(t.path) : forEach(e, (e2, r) => {\n    const i = __PRIVATE_parseData(r, t.Eu(e2));\n    null != i && (n[e2] = i);\n  }), {\n    mapValue: {\n      fields: n\n    }\n  };\n}\nfunction __PRIVATE_looksLikeJsonObject(e) {\n  return !(\"object\" != typeof e || null === e || e instanceof Array || e instanceof Date || e instanceof Timestamp || e instanceof GeoPoint || e instanceof Bytes || e instanceof DocumentReference || e instanceof FieldValue);\n}\nfunction __PRIVATE_validatePlainObject(e, t, n) {\n  if (!__PRIVATE_looksLikeJsonObject(n) || !function __PRIVATE_isPlainObject(e2) {\n    return \"object\" == typeof e2 && null !== e2 && (Object.getPrototypeOf(e2) === Object.prototype || null === Object.getPrototypeOf(e2));\n  }(n)) {\n    const r = __PRIVATE_valueDescription(n);\n    throw \"an object\" === r ? t.mu(e + \" a custom object\") : t.mu(e + \" \" + r);\n  }\n}\nfunction __PRIVATE_fieldPathFromArgument$1(e, t, n) {\n  if ((t = (0, import_util.getModularInstance)(t)) instanceof FieldPath) return t._internalPath;\n  if (\"string\" == typeof t) return __PRIVATE_fieldPathFromDotSeparatedString(e, t);\n  throw __PRIVATE_createError(\"Field path arguments must be of type string or \", e, false, void 0, n);\n}\nvar ye = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\nfunction __PRIVATE_fieldPathFromDotSeparatedString(e, t, n) {\n  if (t.search(ye) >= 0) throw __PRIVATE_createError(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`, e, false, void 0, n);\n  try {\n    return new FieldPath(...t.split(\".\"))._internalPath;\n  } catch (r) {\n    throw __PRIVATE_createError(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, e, false, void 0, n);\n  }\n}\nfunction __PRIVATE_createError(e, t, n, r, i) {\n  const s = r && !r.isEmpty(),\n    o = void 0 !== i;\n  let _ = `Function ${t}() called with invalid data`;\n  n && (_ += \" (via `toFirestore()`)\"), _ += \". \";\n  let a = \"\";\n  return (s || o) && (a += \" (found\", s && (a += ` in field ${r}`), o && (a += ` in document ${i}`), a += \")\"), new FirestoreError(C.INVALID_ARGUMENT, _ + e + a);\n}\nfunction __PRIVATE_fieldMaskContains(e, t) {\n  return e.some(e2 => e2.isEqual(t));\n}\nvar DocumentSnapshot$1 = class {\n  constructor(e, t, n, r, i) {\n    this._firestore = e, this._userDataWriter = t, this._key = n, this._document = r, this._converter = i;\n  }\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  get ref() {\n    return new DocumentReference(this._firestore, this._converter, this._key);\n  }\n  exists() {\n    return null !== this._document;\n  }\n  data() {\n    if (this._document) {\n      if (this._converter) {\n        const e = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, null);\n        return this._converter.fromFirestore(e);\n      }\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  }\n  get(e) {\n    if (this._document) {\n      const t = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", e));\n      if (null !== t) return this._userDataWriter.convertValue(t);\n    }\n  }\n};\nvar QueryDocumentSnapshot$1 = class extends DocumentSnapshot$1 {\n  data() {\n    return super.data();\n  }\n};\nfunction __PRIVATE_fieldPathFromArgument(e, t) {\n  return \"string\" == typeof t ? __PRIVATE_fieldPathFromDotSeparatedString(e, t) : t instanceof FieldPath ? t._internalPath : t._delegate._internalPath;\n}\nfunction __PRIVATE_validateHasExplicitOrderByForLimitToLast(e) {\n  if (\"L\" === e.limitType && 0 === e.explicitOrderBy.length) throw new FirestoreError(C.UNIMPLEMENTED, \"limitToLast() queries require specifying at least one orderBy() clause\");\n}\nvar AppliableConstraint = class {};\nvar QueryConstraint = class extends AppliableConstraint {};\nfunction query(e, t, ...n) {\n  let r = [];\n  t instanceof AppliableConstraint && r.push(t), r = r.concat(n), function __PRIVATE_validateQueryConstraintArray(e2) {\n    const t2 = e2.filter(e3 => e3 instanceof QueryCompositeFilterConstraint).length,\n      n2 = e2.filter(e3 => e3 instanceof QueryFieldFilterConstraint).length;\n    if (t2 > 1 || t2 > 0 && n2 > 0) throw new FirestoreError(C.INVALID_ARGUMENT, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n  }(r);\n  for (const t2 of r) e = t2._apply(e);\n  return e;\n}\nvar QueryFieldFilterConstraint = class extends QueryConstraint {\n  constructor(e, t, n) {\n    super(), this._field = e, this._op = t, this._value = n, this.type = \"where\";\n  }\n  static _create(e, t, n) {\n    return new QueryFieldFilterConstraint(e, t, n);\n  }\n  _apply(e) {\n    const t = this._parse(e);\n    return __PRIVATE_validateNewFieldFilter(e._query, t), new Query(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t));\n  }\n  _parse(e) {\n    const t = __PRIVATE_newUserDataReader(e.firestore),\n      n = function __PRIVATE_newQueryFilter(e2, t2, n2, r, i, s, o) {\n        let _;\n        if (i.isKeyField()) {\n          if (\"array-contains\" === s || \"array-contains-any\" === s) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid Query. You can't perform '${s}' queries on documentId().`);\n          if (\"in\" === s || \"not-in\" === s) {\n            __PRIVATE_validateDisjunctiveFilterElements(o, s);\n            const t3 = [];\n            for (const n3 of o) t3.push(__PRIVATE_parseDocumentIdValue(r, e2, n3));\n            _ = {\n              arrayValue: {\n                values: t3\n              }\n            };\n          } else _ = __PRIVATE_parseDocumentIdValue(r, e2, o);\n        } else \"in\" !== s && \"not-in\" !== s && \"array-contains-any\" !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), _ = __PRIVATE_parseQueryValue(n2, t2, o, \"in\" === s || \"not-in\" === s);\n        return FieldFilter.create(i, s, _);\n      }(e._query, \"where\", t, e.firestore._databaseId, this._field, this._op, this._value);\n    return n;\n  }\n};\nfunction where(e, t, n) {\n  const r = t,\n    i = __PRIVATE_fieldPathFromArgument(\"where\", e);\n  return QueryFieldFilterConstraint._create(i, r, n);\n}\nvar QueryCompositeFilterConstraint = class extends AppliableConstraint {\n  constructor(e, t) {\n    super(), this.type = e, this._queryConstraints = t;\n  }\n  static _create(e, t) {\n    return new QueryCompositeFilterConstraint(e, t);\n  }\n  _parse(e) {\n    const t = this._queryConstraints.map(t2 => t2._parse(e)).filter(e2 => e2.getFilters().length > 0);\n    return 1 === t.length ? t[0] : CompositeFilter.create(t, this._getOperator());\n  }\n  _apply(e) {\n    const t = this._parse(e);\n    return 0 === t.getFilters().length ? e : (function __PRIVATE_validateNewFilter(e2, t2) {\n      let n = e2;\n      const r = t2.getFlattenedFilters();\n      for (const e3 of r) __PRIVATE_validateNewFieldFilter(n, e3), n = __PRIVATE_queryWithAddedFilter(n, e3);\n    }(e._query, t), new Query(e.firestore, e.converter, __PRIVATE_queryWithAddedFilter(e._query, t)));\n  }\n  _getQueryConstraints() {\n    return this._queryConstraints;\n  }\n  _getOperator() {\n    return \"and\" === this.type ? \"and\" : \"or\";\n  }\n};\nfunction or(...e) {\n  return e.forEach(e2 => __PRIVATE_validateQueryFilterConstraint(\"or\", e2)), QueryCompositeFilterConstraint._create(\"or\", e);\n}\nfunction and(...e) {\n  return e.forEach(e2 => __PRIVATE_validateQueryFilterConstraint(\"and\", e2)), QueryCompositeFilterConstraint._create(\"and\", e);\n}\nvar QueryOrderByConstraint = class extends QueryConstraint {\n  constructor(e, t) {\n    super(), this._field = e, this._direction = t, this.type = \"orderBy\";\n  }\n  static _create(e, t) {\n    return new QueryOrderByConstraint(e, t);\n  }\n  _apply(e) {\n    const t = function __PRIVATE_newQueryOrderBy(e2, t2, n) {\n      if (null !== e2.startAt) throw new FirestoreError(C.INVALID_ARGUMENT, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n      if (null !== e2.endAt) throw new FirestoreError(C.INVALID_ARGUMENT, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n      return new OrderBy(t2, n);\n    }(e._query, this._field, this._direction);\n    return new Query(e.firestore, e.converter, function __PRIVATE_queryWithAddedOrderBy(e2, t2) {\n      const n = e2.explicitOrderBy.concat([t2]);\n      return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, n, e2.filters.slice(), e2.limit, e2.limitType, e2.startAt, e2.endAt);\n    }(e._query, t));\n  }\n};\nfunction orderBy(e, t = \"asc\") {\n  const n = t,\n    r = __PRIVATE_fieldPathFromArgument(\"orderBy\", e);\n  return QueryOrderByConstraint._create(r, n);\n}\nvar QueryLimitConstraint = class extends QueryConstraint {\n  constructor(e, t, n) {\n    super(), this.type = e, this._limit = t, this._limitType = n;\n  }\n  static _create(e, t, n) {\n    return new QueryLimitConstraint(e, t, n);\n  }\n  _apply(e) {\n    return new Query(e.firestore, e.converter, __PRIVATE_queryWithLimit(e._query, this._limit, this._limitType));\n  }\n};\nfunction limit(e) {\n  return __PRIVATE_validatePositiveNumber(\"limit\", e), QueryLimitConstraint._create(\"limit\", e, \"F\");\n}\nfunction limitToLast(e) {\n  return __PRIVATE_validatePositiveNumber(\"limitToLast\", e), QueryLimitConstraint._create(\"limitToLast\", e, \"L\");\n}\nvar QueryStartAtConstraint = class extends QueryConstraint {\n  constructor(e, t, n) {\n    super(), this.type = e, this._docOrFields = t, this._inclusive = n;\n  }\n  static _create(e, t, n) {\n    return new QueryStartAtConstraint(e, t, n);\n  }\n  _apply(e) {\n    const t = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);\n    return new Query(e.firestore, e.converter, function __PRIVATE_queryWithStartAt(e2, t2) {\n      return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, e2.explicitOrderBy.slice(), e2.filters.slice(), e2.limit, e2.limitType, t2, e2.endAt);\n    }(e._query, t));\n  }\n};\nfunction startAt(...e) {\n  return QueryStartAtConstraint._create(\"startAt\", e, true);\n}\nfunction startAfter(...e) {\n  return QueryStartAtConstraint._create(\"startAfter\", e, false);\n}\nvar QueryEndAtConstraint = class extends QueryConstraint {\n  constructor(e, t, n) {\n    super(), this.type = e, this._docOrFields = t, this._inclusive = n;\n  }\n  static _create(e, t, n) {\n    return new QueryEndAtConstraint(e, t, n);\n  }\n  _apply(e) {\n    const t = __PRIVATE_newQueryBoundFromDocOrFields(e, this.type, this._docOrFields, this._inclusive);\n    return new Query(e.firestore, e.converter, function __PRIVATE_queryWithEndAt(e2, t2) {\n      return new __PRIVATE_QueryImpl(e2.path, e2.collectionGroup, e2.explicitOrderBy.slice(), e2.filters.slice(), e2.limit, e2.limitType, e2.startAt, t2);\n    }(e._query, t));\n  }\n};\nfunction endBefore(...e) {\n  return QueryEndAtConstraint._create(\"endBefore\", e, false);\n}\nfunction endAt(...e) {\n  return QueryEndAtConstraint._create(\"endAt\", e, true);\n}\nfunction __PRIVATE_newQueryBoundFromDocOrFields(e, t, n, r) {\n  if (n[0] = (0, import_util.getModularInstance)(n[0]), n[0] instanceof DocumentSnapshot$1) return function __PRIVATE_newQueryBoundFromDocument(e2, t2, n2, r2, i) {\n    if (!r2) throw new FirestoreError(C.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n2}().`);\n    const s = [];\n    for (const n3 of __PRIVATE_queryNormalizedOrderBy(e2)) if (n3.field.isKeyField()) s.push(__PRIVATE_refValue(t2, r2.key));else {\n      const e3 = r2.data.field(n3.field);\n      if (__PRIVATE_isServerTimestamp(e3)) throw new FirestoreError(C.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n3.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n      if (null === e3) {\n        const e4 = n3.field.canonicalString();\n        throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${e4}' (used as the orderBy) does not exist.`);\n      }\n      s.push(e3);\n    }\n    return new Bound(s, i);\n  }(e._query, e.firestore._databaseId, t, n[0]._document, r);\n  {\n    const i = __PRIVATE_newUserDataReader(e.firestore);\n    return function __PRIVATE_newQueryBoundFromFields(e2, t2, n2, r2, i2, s) {\n      const o = e2.explicitOrderBy;\n      if (i2.length > o.length) throw new FirestoreError(C.INVALID_ARGUMENT, `Too many arguments provided to ${r2}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n      const _ = [];\n      for (let s2 = 0; s2 < i2.length; s2++) {\n        const a = i2[s2];\n        if (o[s2].field.isKeyField()) {\n          if (\"string\" != typeof a) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${r2}(), but got a ${typeof a}`);\n          if (!__PRIVATE_isCollectionGroupQuery(e2) && -1 !== a.indexOf(\"/\")) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r2}() must be a plain document ID, but '${a}' contains a slash.`);\n          const n3 = e2.path.child(ResourcePath.fromString(a));\n          if (!DocumentKey.isDocumentKey(n3)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r2}() must result in a valid document path, but '${n3}' is not because it contains an odd number of segments.`);\n          const i3 = new DocumentKey(n3);\n          _.push(__PRIVATE_refValue(t2, i3));\n        } else {\n          const e3 = __PRIVATE_parseQueryValue(n2, r2, a);\n          _.push(e3);\n        }\n      }\n      return new Bound(_, s);\n    }(e._query, e.firestore._databaseId, i, t, n, r);\n  }\n}\nfunction __PRIVATE_parseDocumentIdValue(e, t, n) {\n  if (\"string\" == typeof (n = (0, import_util.getModularInstance)(n))) {\n    if (\"\" === n) throw new FirestoreError(C.INVALID_ARGUMENT, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n    if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== n.indexOf(\"/\")) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n    const r = t.path.child(ResourcePath.fromString(n));\n    if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n    return __PRIVATE_refValue(e, new DocumentKey(r));\n  }\n  if (n instanceof DocumentReference) return __PRIVATE_refValue(e, n._key);\n  throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(n)}.`);\n}\nfunction __PRIVATE_validateDisjunctiveFilterElements(e, t) {\n  if (!Array.isArray(e) || 0 === e.length) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${t.toString()}' filters.`);\n}\nfunction __PRIVATE_validateNewFieldFilter(e, t) {\n  const n = function __PRIVATE_findOpInsideFilters(e2, t2) {\n    for (const n2 of e2) for (const e3 of n2.getFlattenedFilters()) if (t2.indexOf(e3.op) >= 0) return e3.op;\n    return null;\n  }(e.filters, function __PRIVATE_conflictingOps(e2) {\n    switch (e2) {\n      case \"!=\":\n        return [\"!=\", \"not-in\"];\n      case \"array-contains-any\":\n      case \"in\":\n        return [\"not-in\"];\n      case \"not-in\":\n        return [\"array-contains-any\", \"in\", \"not-in\", \"!=\"];\n      default:\n        return [];\n    }\n  }(t.op));\n  if (null !== n) throw n === t.op ? new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${t.op.toString()}' filter.`) : new FirestoreError(C.INVALID_ARGUMENT, `Invalid query. You cannot use '${t.op.toString()}' filters with '${n.toString()}' filters.`);\n}\nfunction __PRIVATE_validateQueryFilterConstraint(e, t) {\n  if (!(t instanceof QueryFieldFilterConstraint || t instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\nvar AbstractUserDataWriter = class {\n  convertValue(e, t = \"none\") {\n    switch (__PRIVATE_typeOrder(e)) {\n      case 0:\n        return null;\n      case 1:\n        return e.booleanValue;\n      case 2:\n        return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n      case 3:\n        return this.convertTimestamp(e.timestampValue);\n      case 4:\n        return this.convertServerTimestamp(e, t);\n      case 5:\n        return e.stringValue;\n      case 6:\n        return this.convertBytes(__PRIVATE_normalizeByteString(e.bytesValue));\n      case 7:\n        return this.convertReference(e.referenceValue);\n      case 8:\n        return this.convertGeoPoint(e.geoPointValue);\n      case 9:\n        return this.convertArray(e.arrayValue, t);\n      case 10:\n        return this.convertObject(e.mapValue, t);\n      default:\n        throw fail();\n    }\n  }\n  convertObject(e, t) {\n    return this.convertObjectMap(e.fields, t);\n  }\n  convertObjectMap(e, t = \"none\") {\n    const n = {};\n    return forEach(e, (e2, r) => {\n      n[e2] = this.convertValue(r, t);\n    }), n;\n  }\n  convertGeoPoint(e) {\n    return new GeoPoint(__PRIVATE_normalizeNumber(e.latitude), __PRIVATE_normalizeNumber(e.longitude));\n  }\n  convertArray(e, t) {\n    return (e.values || []).map(e2 => this.convertValue(e2, t));\n  }\n  convertServerTimestamp(e, t) {\n    switch (t) {\n      case \"previous\":\n        const n = __PRIVATE_getPreviousValue(e);\n        return null == n ? null : this.convertValue(n, t);\n      case \"estimate\":\n        return this.convertTimestamp(__PRIVATE_getLocalWriteTime(e));\n      default:\n        return null;\n    }\n  }\n  convertTimestamp(e) {\n    const t = __PRIVATE_normalizeTimestamp(e);\n    return new Timestamp(t.seconds, t.nanos);\n  }\n  convertDocumentKey(e, t) {\n    const n = ResourcePath.fromString(e);\n    __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(n));\n    const r = new DatabaseId(n.get(1), n.get(3)),\n      i = new DocumentKey(n.popFirst(5));\n    return r.isEqual(t) || __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`), i;\n  }\n};\nfunction __PRIVATE_applyFirestoreDataConverter(e, t, n) {\n  let r;\n  return r = e ? n && (n.merge || n.mergeFields) ? e.toFirestore(t, n) : e.toFirestore(t) : t, r;\n}\nvar __PRIVATE_LiteUserDataWriter = class extends AbstractUserDataWriter {\n  constructor(e) {\n    super(), this.firestore = e;\n  }\n  convertBytes(e) {\n    return new Bytes(e);\n  }\n  convertReference(e) {\n    const t = this.convertDocumentKey(e, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, null, t);\n  }\n};\nfunction sum(e) {\n  return new AggregateField(\"sum\", __PRIVATE_fieldPathFromArgument$1(\"sum\", e));\n}\nfunction average(e) {\n  return new AggregateField(\"avg\", __PRIVATE_fieldPathFromArgument$1(\"average\", e));\n}\nfunction count() {\n  return new AggregateField(\"count\");\n}\nfunction aggregateFieldEqual(e, t) {\n  var n, r;\n  return e instanceof AggregateField && t instanceof AggregateField && e.aggregateType === t.aggregateType && (null === (n = e._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString()) === (null === (r = t._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString());\n}\nfunction aggregateQuerySnapshotEqual(e, t) {\n  return queryEqual(e.query, t.query) && (0, import_util.deepEqual)(e.data(), t.data());\n}\nvar SnapshotMetadata = class {\n  constructor(e, t) {\n    this.hasPendingWrites = e, this.fromCache = t;\n  }\n  isEqual(e) {\n    return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;\n  }\n};\nvar DocumentSnapshot = class extends DocumentSnapshot$1 {\n  constructor(e, t, n, r, i, s) {\n    super(e, t, n, r, s), this._firestore = e, this._firestoreImpl = e, this.metadata = i;\n  }\n  exists() {\n    return super.exists();\n  }\n  data(e = {}) {\n    if (this._document) {\n      if (this._converter) {\n        const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, null);\n        return this._converter.fromFirestore(t, e);\n      }\n      return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);\n    }\n  }\n  get(e, t = {}) {\n    if (this._document) {\n      const n = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", e));\n      if (null !== n) return this._userDataWriter.convertValue(n, t.serverTimestamps);\n    }\n  }\n};\nvar QueryDocumentSnapshot = class extends DocumentSnapshot {\n  data(e = {}) {\n    return super.data(e);\n  }\n};\nvar QuerySnapshot = class {\n  constructor(e, t, n, r) {\n    this._firestore = e, this._userDataWriter = t, this._snapshot = r, this.metadata = new SnapshotMetadata(r.hasPendingWrites, r.fromCache), this.query = n;\n  }\n  get docs() {\n    const e = [];\n    return this.forEach(t => e.push(t)), e;\n  }\n  get size() {\n    return this._snapshot.docs.size;\n  }\n  get empty() {\n    return 0 === this.size;\n  }\n  forEach(e, t) {\n    this._snapshot.docs.forEach(n => {\n      e.call(t, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, n.key, n, new SnapshotMetadata(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));\n    });\n  }\n  docChanges(e = {}) {\n    const t = !!e.includeMetadataChanges;\n    if (t && this._snapshot.excludesMetadataChanges) throw new FirestoreError(C.INVALID_ARGUMENT, \"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().\");\n    return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === t || (this._cachedChanges = function __PRIVATE_changesFromSnapshot(e2, t2) {\n      if (e2._snapshot.oldDocs.isEmpty()) {\n        let t3 = 0;\n        return e2._snapshot.docChanges.map(n => {\n          const r = new QueryDocumentSnapshot(e2._firestore, e2._userDataWriter, n.doc.key, n.doc, new SnapshotMetadata(e2._snapshot.mutatedKeys.has(n.doc.key), e2._snapshot.fromCache), e2.query.converter);\n          return n.doc, {\n            type: \"added\",\n            doc: r,\n            oldIndex: -1,\n            newIndex: t3++\n          };\n        });\n      }\n      {\n        let n = e2._snapshot.oldDocs;\n        return e2._snapshot.docChanges.filter(e3 => t2 || 3 !== e3.type).map(t3 => {\n          const r = new QueryDocumentSnapshot(e2._firestore, e2._userDataWriter, t3.doc.key, t3.doc, new SnapshotMetadata(e2._snapshot.mutatedKeys.has(t3.doc.key), e2._snapshot.fromCache), e2.query.converter);\n          let i = -1,\n            s = -1;\n          return 0 !== t3.type && (i = n.indexOf(t3.doc.key), n = n.delete(t3.doc.key)), 1 !== t3.type && (n = n.add(t3.doc), s = n.indexOf(t3.doc.key)), {\n            type: __PRIVATE_resultChangeType(t3.type),\n            doc: r,\n            oldIndex: i,\n            newIndex: s\n          };\n        });\n      }\n    }(this, t), this._cachedChangesIncludeMetadataChanges = t), this._cachedChanges;\n  }\n};\nfunction __PRIVATE_resultChangeType(e) {\n  switch (e) {\n    case 0:\n      return \"added\";\n    case 2:\n    case 3:\n      return \"modified\";\n    case 1:\n      return \"removed\";\n    default:\n      return fail();\n  }\n}\nfunction snapshotEqual(e, t) {\n  return e instanceof DocumentSnapshot && t instanceof DocumentSnapshot ? e._firestore === t._firestore && e._key.isEqual(t._key) && (null === e._document ? null === t._document : e._document.isEqual(t._document)) && e._converter === t._converter : e instanceof QuerySnapshot && t instanceof QuerySnapshot && e._firestore === t._firestore && queryEqual(e.query, t.query) && e.metadata.isEqual(t.metadata) && e._snapshot.isEqual(t._snapshot);\n}\nfunction getDoc(e) {\n  e = __PRIVATE_cast(e, DocumentReference);\n  const t = __PRIVATE_cast(e.firestore, Firestore);\n  return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t), e._key).then(n => __PRIVATE_convertToDocSnapshot(t, e, n));\n}\nvar __PRIVATE_ExpUserDataWriter = class extends AbstractUserDataWriter {\n  constructor(e) {\n    super(), this.firestore = e;\n  }\n  convertBytes(e) {\n    return new Bytes(e);\n  }\n  convertReference(e) {\n    const t = this.convertDocumentKey(e, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, null, t);\n  }\n};\nfunction getDocFromCache(e) {\n  e = __PRIVATE_cast(e, DocumentReference);\n  const t = __PRIVATE_cast(e.firestore, Firestore),\n    n = ensureFirestoreConfigured(t),\n    r = new __PRIVATE_ExpUserDataWriter(t);\n  return __PRIVATE_firestoreClientGetDocumentFromLocalCache(n, e._key).then(n2 => new DocumentSnapshot(t, r, e._key, n2, new SnapshotMetadata(null !== n2 && n2.hasLocalMutations, true), e.converter));\n}\nfunction getDocFromServer(e) {\n  e = __PRIVATE_cast(e, DocumentReference);\n  const t = __PRIVATE_cast(e.firestore, Firestore);\n  return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t), e._key, {\n    source: \"server\"\n  }).then(n => __PRIVATE_convertToDocSnapshot(t, e, n));\n}\nfunction getDocs(e) {\n  e = __PRIVATE_cast(e, Query);\n  const t = __PRIVATE_cast(e.firestore, Firestore),\n    n = ensureFirestoreConfigured(t),\n    r = new __PRIVATE_ExpUserDataWriter(t);\n  return __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query), __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n, e._query).then(n2 => new QuerySnapshot(t, r, e, n2));\n}\nfunction getDocsFromCache(e) {\n  e = __PRIVATE_cast(e, Query);\n  const t = __PRIVATE_cast(e.firestore, Firestore),\n    n = ensureFirestoreConfigured(t),\n    r = new __PRIVATE_ExpUserDataWriter(t);\n  return __PRIVATE_firestoreClientGetDocumentsFromLocalCache(n, e._query).then(n2 => new QuerySnapshot(t, r, e, n2));\n}\nfunction getDocsFromServer(e) {\n  e = __PRIVATE_cast(e, Query);\n  const t = __PRIVATE_cast(e.firestore, Firestore),\n    n = ensureFirestoreConfigured(t),\n    r = new __PRIVATE_ExpUserDataWriter(t);\n  return __PRIVATE_firestoreClientGetDocumentsViaSnapshotListener(n, e._query, {\n    source: \"server\"\n  }).then(n2 => new QuerySnapshot(t, r, e, n2));\n}\nfunction setDoc(e, t, n) {\n  e = __PRIVATE_cast(e, DocumentReference);\n  const r = __PRIVATE_cast(e.firestore, Firestore),\n    i = __PRIVATE_applyFirestoreDataConverter(e.converter, t, n);\n  return executeWrite(r, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(r), \"setDoc\", e._key, i, null !== e.converter, n).toMutation(e._key, Precondition.none())]);\n}\nfunction updateDoc(e, t, n, ...r) {\n  e = __PRIVATE_cast(e, DocumentReference);\n  const i = __PRIVATE_cast(e.firestore, Firestore),\n    s = __PRIVATE_newUserDataReader(i);\n  let o;\n  o = \"string\" == typeof (t = (0, import_util.getModularInstance)(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(s, \"updateDoc\", e._key, t, n, r) : __PRIVATE_parseUpdateData(s, \"updateDoc\", e._key, t);\n  return executeWrite(i, [o.toMutation(e._key, Precondition.exists(true))]);\n}\nfunction deleteDoc(e) {\n  return executeWrite(__PRIVATE_cast(e.firestore, Firestore), [new __PRIVATE_DeleteMutation(e._key, Precondition.none())]);\n}\nfunction addDoc(e, t) {\n  const n = __PRIVATE_cast(e.firestore, Firestore),\n    r = doc(e),\n    i = __PRIVATE_applyFirestoreDataConverter(e.converter, t);\n  return executeWrite(n, [__PRIVATE_parseSetData(__PRIVATE_newUserDataReader(e.firestore), \"addDoc\", r._key, i, null !== e.converter, {}).toMutation(r._key, Precondition.exists(false))]).then(() => r);\n}\nfunction onSnapshot(e, ...t) {\n  var n, r, i;\n  e = (0, import_util.getModularInstance)(e);\n  let s = {\n      includeMetadataChanges: false\n    },\n    o = 0;\n  \"object\" != typeof t[o] || __PRIVATE_isPartialObserver(t[o]) || (s = t[o], o++);\n  const _ = {\n    includeMetadataChanges: s.includeMetadataChanges\n  };\n  if (__PRIVATE_isPartialObserver(t[o])) {\n    const e2 = t[o];\n    t[o] = null === (n = e2.next) || void 0 === n ? void 0 : n.bind(e2), t[o + 1] = null === (r = e2.error) || void 0 === r ? void 0 : r.bind(e2), t[o + 2] = null === (i = e2.complete) || void 0 === i ? void 0 : i.bind(e2);\n  }\n  let a, u, c;\n  if (e instanceof DocumentReference) u = __PRIVATE_cast(e.firestore, Firestore), c = __PRIVATE_newQueryForPath(e._key.path), a = {\n    next: n2 => {\n      t[o] && t[o](__PRIVATE_convertToDocSnapshot(u, e, n2));\n    },\n    error: t[o + 1],\n    complete: t[o + 2]\n  };else {\n    const n2 = __PRIVATE_cast(e, Query);\n    u = __PRIVATE_cast(n2.firestore, Firestore), c = n2._query;\n    const r2 = new __PRIVATE_ExpUserDataWriter(u);\n    a = {\n      next: e2 => {\n        t[o] && t[o](new QuerySnapshot(u, r2, n2, e2));\n      },\n      error: t[o + 1],\n      complete: t[o + 2]\n    }, __PRIVATE_validateHasExplicitOrderByForLimitToLast(e._query);\n  }\n  return function __PRIVATE_firestoreClientListen(e2, t2, n2, r2) {\n    const i2 = new __PRIVATE_AsyncObserver(r2),\n      s2 = new __PRIVATE_QueryListener(t2, i2, n2);\n    return e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_eventManagerListen(await __PRIVATE_getEventManager(e2), s2)), () => {\n      i2.Na(), e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_eventManagerUnlisten(await __PRIVATE_getEventManager(e2), s2));\n    };\n  }(ensureFirestoreConfigured(u), c, _, a);\n}\nfunction onSnapshotsInSync(e, t) {\n  return __PRIVATE_firestoreClientAddSnapshotsInSyncListener(ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), __PRIVATE_isPartialObserver(t) ? t : {\n    next: t\n  });\n}\nfunction executeWrite(e, t) {\n  return function __PRIVATE_firestoreClientWrite(e2, t2) {\n    const n = new __PRIVATE_Deferred();\n    return e2.asyncQueue.enqueueAndForget(async () => __PRIVATE_syncEngineWrite(await __PRIVATE_getSyncEngine(e2), t2, n)), n.promise;\n  }(ensureFirestoreConfigured(e), t);\n}\nfunction __PRIVATE_convertToDocSnapshot(e, t, n) {\n  const r = n.docs.get(t._key),\n    i = new __PRIVATE_ExpUserDataWriter(e);\n  return new DocumentSnapshot(e, i, t._key, r, new SnapshotMetadata(n.hasPendingWrites, n.fromCache), t.converter);\n}\nfunction getCountFromServer(e) {\n  return getAggregateFromServer(e, {\n    count: count()\n  });\n}\nfunction getAggregateFromServer(e, t) {\n  const n = __PRIVATE_cast(e.firestore, Firestore),\n    r = ensureFirestoreConfigured(n),\n    i = function __PRIVATE_mapToArray(e2, t2) {\n      const n2 = [];\n      for (const r2 in e2) Object.prototype.hasOwnProperty.call(e2, r2) && n2.push(t2(e2[r2], r2, e2));\n      return n2;\n    }(t, (e2, t2) => new __PRIVATE_AggregateImpl(t2, e2.aggregateType, e2._internalFieldPath));\n  return function __PRIVATE_firestoreClientRunAggregateQuery(e2, t2, n2) {\n    const r2 = new __PRIVATE_Deferred();\n    return e2.asyncQueue.enqueueAndForget(async () => {\n      try {\n        const i2 = await __PRIVATE_getDatastore(e2);\n        r2.resolve(__PRIVATE_invokeRunAggregationQueryRpc(i2, t2, n2));\n      } catch (e3) {\n        r2.reject(e3);\n      }\n    }), r2.promise;\n  }(r, e._query, i).then(t2 => function __PRIVATE_convertToAggregateQuerySnapshot(e2, t3, n2) {\n    const r2 = new __PRIVATE_ExpUserDataWriter(e2);\n    return new AggregateQuerySnapshot(t3, r2, n2);\n  }(n, e, t2));\n}\nvar __PRIVATE_MemoryLocalCacheImpl = class {\n  constructor(e) {\n    this.kind = \"memory\", this._onlineComponentProvider = new OnlineComponentProvider(), (null == e ? void 0 : e.garbageCollector) ? this._offlineComponentProvider = e.garbageCollector._offlineComponentProvider : this._offlineComponentProvider = new MemoryOfflineComponentProvider();\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n};\nvar __PRIVATE_PersistentLocalCacheImpl = class {\n  constructor(e) {\n    let t;\n    this.kind = \"persistent\", (null == e ? void 0 : e.tabManager) ? (e.tabManager._initialize(e), t = e.tabManager) : (t = persistentSingleTabManager(void 0), t._initialize(e)), this._onlineComponentProvider = t._onlineComponentProvider, this._offlineComponentProvider = t._offlineComponentProvider;\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n};\nvar __PRIVATE_MemoryEagerGabageCollectorImpl = class {\n  constructor() {\n    this.kind = \"memoryEager\", this._offlineComponentProvider = new MemoryOfflineComponentProvider();\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n};\nvar __PRIVATE_MemoryLruGabageCollectorImpl = class {\n  constructor(e) {\n    this.kind = \"memoryLru\", this._offlineComponentProvider = new __PRIVATE_LruGcMemoryOfflineComponentProvider(e);\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n};\nfunction memoryEagerGarbageCollector() {\n  return new __PRIVATE_MemoryEagerGabageCollectorImpl();\n}\nfunction memoryLruGarbageCollector(e) {\n  return new __PRIVATE_MemoryLruGabageCollectorImpl(null == e ? void 0 : e.cacheSizeBytes);\n}\nfunction memoryLocalCache(e) {\n  return new __PRIVATE_MemoryLocalCacheImpl(e);\n}\nfunction persistentLocalCache(e) {\n  return new __PRIVATE_PersistentLocalCacheImpl(e);\n}\nvar __PRIVATE_SingleTabManagerImpl = class {\n  constructor(e) {\n    this.forceOwnership = e, this.kind = \"persistentSingleTab\";\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n  _initialize(e) {\n    this._onlineComponentProvider = new OnlineComponentProvider(), this._offlineComponentProvider = new __PRIVATE_IndexedDbOfflineComponentProvider(this._onlineComponentProvider, null == e ? void 0 : e.cacheSizeBytes, this.forceOwnership);\n  }\n};\nvar __PRIVATE_MultiTabManagerImpl = class {\n  constructor() {\n    this.kind = \"PersistentMultipleTab\";\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n  _initialize(e) {\n    this._onlineComponentProvider = new OnlineComponentProvider(), this._offlineComponentProvider = new __PRIVATE_MultiTabOfflineComponentProvider(this._onlineComponentProvider, null == e ? void 0 : e.cacheSizeBytes);\n  }\n};\nfunction persistentSingleTabManager(e) {\n  return new __PRIVATE_SingleTabManagerImpl(null == e ? void 0 : e.forceOwnership);\n}\nfunction persistentMultipleTabManager() {\n  return new __PRIVATE_MultiTabManagerImpl();\n}\nvar we = {\n  maxAttempts: 5\n};\nvar WriteBatch = class {\n  constructor(e, t) {\n    this._firestore = e, this._commitHandler = t, this._mutations = [], this._committed = false, this._dataReader = __PRIVATE_newUserDataReader(e);\n  }\n  set(e, t, n) {\n    this._verifyNotCommitted();\n    const r = __PRIVATE_validateReference(e, this._firestore),\n      i = __PRIVATE_applyFirestoreDataConverter(r.converter, t, n),\n      s = __PRIVATE_parseSetData(this._dataReader, \"WriteBatch.set\", r._key, i, null !== r.converter, n);\n    return this._mutations.push(s.toMutation(r._key, Precondition.none())), this;\n  }\n  update(e, t, n, ...r) {\n    this._verifyNotCommitted();\n    const i = __PRIVATE_validateReference(e, this._firestore);\n    let s;\n    return s = \"string\" == typeof (t = (0, import_util.getModularInstance)(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"WriteBatch.update\", i._key, t, n, r) : __PRIVATE_parseUpdateData(this._dataReader, \"WriteBatch.update\", i._key, t), this._mutations.push(s.toMutation(i._key, Precondition.exists(true))), this;\n  }\n  delete(e) {\n    this._verifyNotCommitted();\n    const t = __PRIVATE_validateReference(e, this._firestore);\n    return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(t._key, Precondition.none())), this;\n  }\n  commit() {\n    return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n  }\n  _verifyNotCommitted() {\n    if (this._committed) throw new FirestoreError(C.FAILED_PRECONDITION, \"A write batch can no longer be used after commit() has been called.\");\n  }\n};\nfunction __PRIVATE_validateReference(e, t) {\n  if ((e = (0, import_util.getModularInstance)(e)).firestore !== t) throw new FirestoreError(C.INVALID_ARGUMENT, \"Provided document reference is from a different Firestore instance.\");\n  return e;\n}\nvar Transaction = class extends class Transaction$1 {\n  constructor(e, t) {\n    this._firestore = e, this._transaction = t, this._dataReader = __PRIVATE_newUserDataReader(e);\n  }\n  get(e) {\n    const t = __PRIVATE_validateReference(e, this._firestore),\n      n = new __PRIVATE_LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([t._key]).then(e2 => {\n      if (!e2 || 1 !== e2.length) return fail();\n      const r = e2[0];\n      if (r.isFoundDocument()) return new DocumentSnapshot$1(this._firestore, n, r.key, r, t.converter);\n      if (r.isNoDocument()) return new DocumentSnapshot$1(this._firestore, n, t._key, null, t.converter);\n      throw fail();\n    });\n  }\n  set(e, t, n) {\n    const r = __PRIVATE_validateReference(e, this._firestore),\n      i = __PRIVATE_applyFirestoreDataConverter(r.converter, t, n),\n      s = __PRIVATE_parseSetData(this._dataReader, \"Transaction.set\", r._key, i, null !== r.converter, n);\n    return this._transaction.set(r._key, s), this;\n  }\n  update(e, t, n, ...r) {\n    const i = __PRIVATE_validateReference(e, this._firestore);\n    let s;\n    return s = \"string\" == typeof (t = (0, import_util.getModularInstance)(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"Transaction.update\", i._key, t, n, r) : __PRIVATE_parseUpdateData(this._dataReader, \"Transaction.update\", i._key, t), this._transaction.update(i._key, s), this;\n  }\n  delete(e) {\n    const t = __PRIVATE_validateReference(e, this._firestore);\n    return this._transaction.delete(t._key), this;\n  }\n} {\n  constructor(e, t) {\n    super(e, t), this._firestore = e;\n  }\n  get(e) {\n    const t = __PRIVATE_validateReference(e, this._firestore),\n      n = new __PRIVATE_ExpUserDataWriter(this._firestore);\n    return super.get(e).then(e2 => new DocumentSnapshot(this._firestore, n, t._key, e2._document, new SnapshotMetadata(false, false), t.converter));\n  }\n};\nfunction runTransaction(e, t, n) {\n  e = __PRIVATE_cast(e, Firestore);\n  const r = Object.assign(Object.assign({}, we), n);\n  !function __PRIVATE_validateTransactionOptions(e2) {\n    if (e2.maxAttempts < 1) throw new FirestoreError(C.INVALID_ARGUMENT, \"Max attempts must be at least 1\");\n  }(r);\n  return function __PRIVATE_firestoreClientTransaction(e2, t2, n2) {\n    const r2 = new __PRIVATE_Deferred();\n    return e2.asyncQueue.enqueueAndForget(async () => {\n      const i = await __PRIVATE_getDatastore(e2);\n      new __PRIVATE_TransactionRunner(e2.asyncQueue, i, n2, t2, r2).run();\n    }), r2.promise;\n  }(ensureFirestoreConfigured(e), n2 => t(new Transaction(e, n2)), r);\n}\nfunction deleteField() {\n  return new __PRIVATE_DeleteFieldValueImpl(\"deleteField\");\n}\nfunction serverTimestamp() {\n  return new __PRIVATE_ServerTimestampFieldValueImpl(\"serverTimestamp\");\n}\nfunction arrayUnion(...e) {\n  return new __PRIVATE_ArrayUnionFieldValueImpl(\"arrayUnion\", e);\n}\nfunction arrayRemove(...e) {\n  return new __PRIVATE_ArrayRemoveFieldValueImpl(\"arrayRemove\", e);\n}\nfunction increment(e) {\n  return new __PRIVATE_NumericIncrementFieldValueImpl(\"increment\", e);\n}\nfunction writeBatch(e) {\n  return ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore)), new WriteBatch(e, t => executeWrite(e, t));\n}\nfunction setIndexConfiguration(e, t) {\n  var n;\n  const r = ensureFirestoreConfigured(e = __PRIVATE_cast(e, Firestore));\n  if (!r._uninitializedComponentsProvider || \"memory\" === (null === (n = r._uninitializedComponentsProvider) || void 0 === n ? void 0 : n._offlineKind)) return __PRIVATE_logWarn(\"Cannot enable indexes when persistence is disabled\"), Promise.resolve();\n  const i = function __PRIVATE_parseIndexes(e2) {\n    const t2 = \"string\" == typeof e2 ? function __PRIVATE_tryParseJson(e3) {\n        try {\n          return JSON.parse(e3);\n        } catch (e4) {\n          throw new FirestoreError(C.INVALID_ARGUMENT, \"Failed to parse JSON: \" + (null == e4 ? void 0 : e4.message));\n        }\n      }(e2) : e2,\n      n2 = [];\n    if (Array.isArray(t2.indexes)) for (const e3 of t2.indexes) {\n      const t3 = __PRIVATE_tryGetString(e3, \"collectionGroup\"),\n        r2 = [];\n      if (Array.isArray(e3.fields)) for (const t4 of e3.fields) {\n        const e4 = __PRIVATE_fieldPathFromDotSeparatedString(\"setIndexConfiguration\", __PRIVATE_tryGetString(t4, \"fieldPath\"));\n        \"CONTAINS\" === t4.arrayConfig ? r2.push(new IndexSegment(e4, 2)) : \"ASCENDING\" === t4.order ? r2.push(new IndexSegment(e4, 0)) : \"DESCENDING\" === t4.order && r2.push(new IndexSegment(e4, 1));\n      }\n      n2.push(new FieldIndex(FieldIndex.UNKNOWN_ID, t3, r2, IndexState.empty()));\n    }\n    return n2;\n  }(t);\n  return __PRIVATE_firestoreClientSetIndexConfiguration(r, i);\n}\nfunction __PRIVATE_tryGetString(e, t) {\n  if (\"string\" != typeof e[t]) throw new FirestoreError(C.INVALID_ARGUMENT, \"Missing string value for: \" + t);\n  return e[t];\n}\nvar PersistentCacheIndexManager = class {\n  constructor(e) {\n    this._client = e, this.type = \"PersistentCacheIndexManager\";\n  }\n};\nfunction getPersistentCacheIndexManager(e) {\n  var t;\n  e = __PRIVATE_cast(e, Firestore);\n  const n = Se.get(e);\n  if (n) return n;\n  const r = ensureFirestoreConfigured(e);\n  if (\"persistent\" !== (null === (t = r._uninitializedComponentsProvider) || void 0 === t ? void 0 : t._offlineKind)) return null;\n  const i = new PersistentCacheIndexManager(r);\n  return Se.set(e, i), i;\n}\nfunction enablePersistentCacheIndexAutoCreation(e) {\n  __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, true);\n}\nfunction disablePersistentCacheIndexAutoCreation(e) {\n  __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, false);\n}\nfunction deleteAllPersistentCacheIndexes(e) {\n  e._client.verifyNotTerminated();\n  __PRIVATE_firestoreClientDeleteAllFieldIndexes(e._client).then(e2 => __PRIVATE_logDebug(\"deleting all persistent cache indexes succeeded\")).catch(e2 => __PRIVATE_logWarn(\"deleting all persistent cache indexes failed\", e2));\n}\nfunction __PRIVATE_setPersistentCacheIndexAutoCreationEnabled(e, t) {\n  e._client.verifyNotTerminated();\n  __PRIVATE_firestoreClientSetPersistentCacheIndexAutoCreationEnabled(e._client, t).then(e2 => __PRIVATE_logDebug(`setting persistent cache index auto creation isEnabled=${t} succeeded`)).catch(e2 => __PRIVATE_logWarn(`setting persistent cache index auto creation isEnabled=${t} failed`, e2));\n}\nvar Se = /* @__PURE__ */new WeakMap();\nvar TestingHooks = class {\n  constructor() {\n    throw new Error(\"instances of this class should not be created\");\n  }\n  static onExistenceFilterMismatch(e) {\n    return __PRIVATE_TestingHooksSpiImpl.instance.onExistenceFilterMismatch(e);\n  }\n};\nvar __PRIVATE_TestingHooksSpiImpl = class {\n  constructor() {\n    this.Su = /* @__PURE__ */new Map();\n  }\n  static get instance() {\n    return be || (be = new __PRIVATE_TestingHooksSpiImpl(), function __PRIVATE_setTestingHooksSpi(e) {\n      if (le) throw new Error(\"a TestingHooksSpi instance is already set\");\n      le = e;\n    }(be)), be;\n  }\n  tt(e) {\n    this.Su.forEach(t => t(e));\n  }\n  onExistenceFilterMismatch(e) {\n    const t = Symbol(),\n      n = this.Su;\n    return n.set(t, e), () => n.delete(t);\n  }\n};\nvar be = null;\n!function __PRIVATE_registerFirestore(e, t = true) {\n  !function __PRIVATE_setSDKVersion(e2) {\n    b = e2;\n  }(import_app.SDK_VERSION), (0, import_app._registerComponent)(new import_component.Component(\"firestore\", (e2, {\n    instanceIdentifier: n,\n    options: r\n  }) => {\n    const i = e2.getProvider(\"app\").getImmediate(),\n      s = new Firestore(new __PRIVATE_FirebaseAuthCredentialsProvider(e2.getProvider(\"auth-internal\")), new __PRIVATE_FirebaseAppCheckTokenProvider(e2.getProvider(\"app-check-internal\")), function __PRIVATE_databaseIdFromApp(e3, t2) {\n        if (!Object.prototype.hasOwnProperty.apply(e3.options, [\"projectId\"])) throw new FirestoreError(C.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n        return new DatabaseId(e3.options.projectId, t2);\n      }(i, n), i);\n    return r = Object.assign({\n      useFetchStreams: t\n    }, r), s._setSettings(r), s;\n  }, \"PUBLIC\").setMultipleInstances(true)), (0, import_app.registerVersion)(S, \"4.3.2\", e), (0, import_app.registerVersion)(S, \"4.3.2\", \"esm2017\");\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n* @license\n* Copyright 2020 Google LLC\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n};\n\ncode(module, require);\n_exports(module.exports);\n}}});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","dependencies":[{"id":"@firebase/util@1.9.3","path":"C:\\Users\\Bryant\\Documents\\Private Projects\\dashboard-beyond\\client\\node_modules\\@firebase\\util"},{"id":"@firebase/component@0.6.4","path":"C:\\Users\\Bryant\\Documents\\Private Projects\\dashboard-beyond\\client\\node_modules\\@firebase\\component"},{"id":"@firebase/logger@0.4.0","path":"C:\\Users\\Bryant\\Documents\\Private Projects\\dashboard-beyond\\client\\node_modules\\@firebase\\logger"},{"id":"idb@7.1.1","path":"C:\\Users\\Bryant\\Documents\\Private Projects\\dashboard-beyond\\client\\node_modules\\idb"},{"id":"@firebase/app@0.9.23","path":"C:\\Users\\Bryant\\Documents\\Private Projects\\dashboard-beyond\\client\\node_modules\\@firebase\\app"},{"id":"@firebase/webchannel-wrapper@0.10.3","path":"C:\\Users\\Bryant\\Documents\\Private Projects\\dashboard-beyond\\client\\node_modules\\@firebase\\webchannel-wrapper"}],"warnings":[]}