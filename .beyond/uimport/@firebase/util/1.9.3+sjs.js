{"code":"System.register([], (_exports, _context) => {\n\nconst bimport = specifier => {\n\tconst dependencies = new Map([[\"@firebase/util\",\"1.9.3\"]]);\n\treturn globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));\n};\n\n\nvar dependencies = new Map();\nvar require = dependency => dependencies.get(dependency);\nreturn {\nsetters: [],\nexecute: function() {\n// Prevent esbuild from considering the context to be amd\nconst define = void 0;\nconst module = {};\n\nconst code = (module, require) => {\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// .beyond/uimport/@firebase/util.1.9.3.js\nvar util_1_9_3_exports = {};\n__export(util_1_9_3_exports, {\n  CONSTANTS: () => CONSTANTS,\n  DecodeBase64StringError: () => DecodeBase64StringError,\n  Deferred: () => Deferred,\n  ErrorFactory: () => ErrorFactory,\n  FirebaseError: () => FirebaseError,\n  MAX_VALUE_MILLIS: () => MAX_VALUE_MILLIS,\n  RANDOM_FACTOR: () => RANDOM_FACTOR,\n  Sha1: () => Sha1,\n  areCookiesEnabled: () => areCookiesEnabled,\n  assert: () => assert,\n  assertionError: () => assertionError,\n  async: () => async,\n  base64: () => base64,\n  base64Decode: () => base64Decode,\n  base64Encode: () => base64Encode,\n  base64urlEncodeWithoutPadding: () => base64urlEncodeWithoutPadding,\n  calculateBackoffMillis: () => calculateBackoffMillis,\n  contains: () => contains,\n  createMockUserToken: () => createMockUserToken,\n  createSubscribe: () => createSubscribe,\n  decode: () => decode,\n  deepCopy: () => deepCopy,\n  deepEqual: () => deepEqual,\n  deepExtend: () => deepExtend,\n  errorPrefix: () => errorPrefix,\n  extractQuerystring: () => extractQuerystring,\n  getDefaultAppConfig: () => getDefaultAppConfig,\n  getDefaultEmulatorHost: () => getDefaultEmulatorHost,\n  getDefaultEmulatorHostnameAndPort: () => getDefaultEmulatorHostnameAndPort,\n  getDefaults: () => getDefaults,\n  getExperimentalSetting: () => getExperimentalSetting,\n  getGlobal: () => getGlobal,\n  getModularInstance: () => getModularInstance,\n  getUA: () => getUA,\n  isAdmin: () => isAdmin,\n  isBrowser: () => isBrowser,\n  isBrowserExtension: () => isBrowserExtension,\n  isElectron: () => isElectron,\n  isEmpty: () => isEmpty,\n  isIE: () => isIE,\n  isIndexedDBAvailable: () => isIndexedDBAvailable,\n  isMobileCordova: () => isMobileCordova,\n  isNode: () => isNode,\n  isNodeSdk: () => isNodeSdk,\n  isReactNative: () => isReactNative,\n  isSafari: () => isSafari,\n  isUWP: () => isUWP,\n  isValidFormat: () => isValidFormat,\n  isValidTimestamp: () => isValidTimestamp,\n  issuedAtTime: () => issuedAtTime,\n  jsonEval: () => jsonEval,\n  map: () => map,\n  ordinal: () => ordinal,\n  promiseWithTimeout: () => promiseWithTimeout,\n  querystring: () => querystring,\n  querystringDecode: () => querystringDecode,\n  safeGet: () => safeGet,\n  stringLength: () => stringLength,\n  stringToByteArray: () => stringToByteArray,\n  stringify: () => stringify,\n  uuidv4: () => uuidv4,\n  validateArgCount: () => validateArgCount,\n  validateCallback: () => validateCallback,\n  validateContextObject: () => validateContextObject,\n  validateIndexedDBOpenable: () => validateIndexedDBOpenable,\n  validateNamespace: () => validateNamespace\n});\nmodule.exports = __toCommonJS(util_1_9_3_exports);\n\n// node_modules/@firebase/util/dist/index.esm2017.js\nvar CONSTANTS = {\n  NODE_CLIENT: false,\n  NODE_ADMIN: false,\n  SDK_VERSION: \"${JSCORE_VERSION}\"\n};\nvar assert = function (assertion, message) {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\nvar assertionError = function (message) {\n  return new Error(\"Firebase Database (\" + CONSTANTS.SDK_VERSION + \") INTERNAL ASSERT FAILED: \" + message);\n};\nvar stringToByteArray$1 = function (str) {\n  const out = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = c >> 6 | 192;\n      out[p++] = c & 63 | 128;\n    } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {\n      c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);\n      out[p++] = c >> 18 | 240;\n      out[p++] = c >> 12 & 63 | 128;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    } else {\n      out[p++] = c >> 12 | 224;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    }\n  }\n  return out;\n};\nvar byteArrayToString = function (bytes) {\n  const out = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n    } else if (c1 > 239 && c1 < 365) {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;\n      out[c++] = String.fromCharCode(55296 + (u >> 10));\n      out[c++] = String.fromCharCode(56320 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n    }\n  }\n  return out.join(\"\");\n};\nvar base64 = {\n  byteToCharMap_: null,\n  charToByteMap_: null,\n  byteToCharMapWebSafe_: null,\n  charToByteMapWebSafe_: null,\n  ENCODED_VALS_BASE: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + \"+/=\";\n  },\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + \"-_.\";\n  },\n  HAS_NATIVE_SUPPORT: typeof atob === \"function\",\n  encodeByteArray(input, webSafe) {\n    if (!Array.isArray(input)) {\n      throw Error(\"encodeByteArray takes an array as a parameter\");\n    }\n    this.init_();\n    const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;\n    const output = [];\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n      const outByte1 = byte1 >> 2;\n      const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;\n      let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;\n      let outByte4 = byte3 & 63;\n      if (!haveByte3) {\n        outByte4 = 64;\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n    }\n    return output.join(\"\");\n  },\n  encodeString(input, webSafe) {\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray$1(input), webSafe);\n  },\n  decodeString(input, webSafe) {\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n  decodeStringToByteArray(input, webSafe) {\n    this.init_();\n    const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;\n    const output = [];\n    for (let i = 0; i < input.length;) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n      const outByte1 = byte1 << 2 | byte2 >> 4;\n      output.push(outByte1);\n      if (byte3 !== 64) {\n        const outByte2 = byte2 << 4 & 240 | byte3 >> 2;\n        output.push(outByte2);\n        if (byte4 !== 64) {\n          const outByte3 = byte3 << 6 & 192 | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n    return output;\n  },\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\nvar DecodeBase64StringError = class extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = \"DecodeBase64StringError\";\n  }\n};\nvar base64Encode = function (str) {\n  const utf8Bytes = stringToByteArray$1(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\nvar base64urlEncodeWithoutPadding = function (str) {\n  return base64Encode(str).replace(/\\./g, \"\");\n};\nvar base64Decode = function (str) {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error(\"base64Decode failed: \", e);\n  }\n  return null;\n};\nfunction deepCopy(value) {\n  return deepExtend(void 0, value);\n}\nfunction deepExtend(target, source) {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n  switch (source.constructor) {\n    case Date:\n      const dateValue = source;\n      return new Date(dateValue.getTime());\n    case Object:\n      if (target === void 0) {\n        target = {};\n      }\n      break;\n    case Array:\n      target = [];\n      break;\n    default:\n      return source;\n  }\n  for (const prop in source) {\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n  return target;\n}\nfunction isValidKey(key) {\n  return key !== \"__proto__\";\n}\nfunction getGlobal() {\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw new Error(\"Unable to locate global object.\");\n}\nvar getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;\nvar getDefaultsFromEnvVariable = () => {\n  if (typeof process === \"undefined\" || typeof process.env === \"undefined\") {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\nvar getDefaultsFromCookie = () => {\n  if (typeof document === \"undefined\") {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\nvar getDefaults = () => {\n  try {\n    return getDefaultsFromGlobal() || getDefaultsFromEnvVariable() || getDefaultsFromCookie();\n  } catch (e) {\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\nvar getDefaultEmulatorHost = productName => {\n  var _a, _b;\n  return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];\n};\nvar getDefaultEmulatorHostnameAndPort = productName => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return void 0;\n  }\n  const separatorIndex = host.lastIndexOf(\":\");\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === \"[\") {\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\nvar getDefaultAppConfig = () => {\n  var _a;\n  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config;\n};\nvar getExperimentalSetting = name => {\n  var _a;\n  return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`];\n};\nvar Deferred = class {\n  constructor() {\n    this.reject = () => {};\n    this.resolve = () => {};\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n  wrapCallback(callback) {\n    return (error, value) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === \"function\") {\n        this.promise.catch(() => {});\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n};\nfunction createMockUserToken(token, projectId) {\n  if (token.uid) {\n    throw new Error('The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.');\n  }\n  const header = {\n    alg: \"none\",\n    type: \"JWT\"\n  };\n  const project = projectId || \"demo-project\";\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n  const payload = Object.assign({\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: \"custom\",\n      identities: {}\n    }\n  }, token);\n  const signature = \"\";\n  return [base64urlEncodeWithoutPadding(JSON.stringify(header)), base64urlEncodeWithoutPadding(JSON.stringify(payload)), signature].join(\".\");\n}\nfunction getUA() {\n  if (typeof navigator !== \"undefined\" && typeof navigator[\"userAgent\"] === \"string\") {\n    return navigator[\"userAgent\"];\n  } else {\n    return \"\";\n  }\n}\nfunction isMobileCordova() {\n  return typeof window !== \"undefined\" && !!(window[\"cordova\"] || window[\"phonegap\"] || window[\"PhoneGap\"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());\n}\nfunction isNode() {\n  var _a;\n  const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;\n  if (forceEnvironment === \"node\") {\n    return true;\n  } else if (forceEnvironment === \"browser\") {\n    return false;\n  }\n  try {\n    return Object.prototype.toString.call(global.process) === \"[object process]\";\n  } catch (e) {\n    return false;\n  }\n}\nfunction isBrowser() {\n  return typeof self === \"object\" && self.self === self;\n}\nfunction isBrowserExtension() {\n  const runtime = typeof chrome === \"object\" ? chrome.runtime : typeof browser === \"object\" ? browser.runtime : void 0;\n  return typeof runtime === \"object\" && runtime.id !== void 0;\n}\nfunction isReactNative() {\n  return typeof navigator === \"object\" && navigator[\"product\"] === \"ReactNative\";\n}\nfunction isElectron() {\n  return getUA().indexOf(\"Electron/\") >= 0;\n}\nfunction isIE() {\n  const ua = getUA();\n  return ua.indexOf(\"MSIE \") >= 0 || ua.indexOf(\"Trident/\") >= 0;\n}\nfunction isUWP() {\n  return getUA().indexOf(\"MSAppHost/\") >= 0;\n}\nfunction isNodeSdk() {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\nfunction isSafari() {\n  return !isNode() && navigator.userAgent.includes(\"Safari\") && !navigator.userAgent.includes(\"Chrome\");\n}\nfunction isIndexedDBAvailable() {\n  try {\n    return typeof indexedDB === \"object\";\n  } catch (e) {\n    return false;\n  }\n}\nfunction validateIndexedDBOpenable() {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist = true;\n      const DB_CHECK_NAME = \"validate-browser-context-for-indexeddb-analytics-module\";\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n      request.onerror = () => {\n        var _a;\n        reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || \"\");\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nfunction areCookiesEnabled() {\n  if (typeof navigator === \"undefined\" || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\nvar ERROR_NAME = \"FirebaseError\";\nvar FirebaseError = class extends Error {\n  constructor(code, message, customData) {\n    super(message);\n    this.code = code;\n    this.customData = customData;\n    this.name = ERROR_NAME;\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n};\nvar ErrorFactory = class {\n  constructor(service, serviceName, errors) {\n    this.service = service;\n    this.serviceName = serviceName;\n    this.errors = errors;\n  }\n  create(code, ...data) {\n    const customData = data[0] || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n    const message = template ? replaceTemplate(template, customData) : \"Error\";\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n    return error;\n  }\n};\nfunction replaceTemplate(template, data) {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\nvar PATTERN = /\\{\\$([^}]+)}/g;\nfunction jsonEval(str) {\n  return JSON.parse(str);\n}\nfunction stringify(data) {\n  return JSON.stringify(data);\n}\nvar decode = function (token) {\n  let header = {},\n    claims = {},\n    data = {},\n    signature = \"\";\n  try {\n    const parts = token.split(\".\");\n    header = jsonEval(base64Decode(parts[0]) || \"\");\n    claims = jsonEval(base64Decode(parts[1]) || \"\");\n    signature = parts[2];\n    data = claims[\"d\"] || {};\n    delete claims[\"d\"];\n  } catch (e) {}\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\nvar isValidTimestamp = function (token) {\n  const claims = decode(token).claims;\n  const now = Math.floor(new Date().getTime() / 1e3);\n  let validSince = 0,\n    validUntil = 0;\n  if (typeof claims === \"object\") {\n    if (claims.hasOwnProperty(\"nbf\")) {\n      validSince = claims[\"nbf\"];\n    } else if (claims.hasOwnProperty(\"iat\")) {\n      validSince = claims[\"iat\"];\n    }\n    if (claims.hasOwnProperty(\"exp\")) {\n      validUntil = claims[\"exp\"];\n    } else {\n      validUntil = validSince + 86400;\n    }\n  }\n  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;\n};\nvar issuedAtTime = function (token) {\n  const claims = decode(token).claims;\n  if (typeof claims === \"object\" && claims.hasOwnProperty(\"iat\")) {\n    return claims[\"iat\"];\n  }\n  return null;\n};\nvar isValidFormat = function (token) {\n  const decoded = decode(token),\n    claims = decoded.claims;\n  return !!claims && typeof claims === \"object\" && claims.hasOwnProperty(\"iat\");\n};\nvar isAdmin = function (token) {\n  const claims = decode(token).claims;\n  return typeof claims === \"object\" && claims[\"admin\"] === true;\n};\nfunction contains(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction safeGet(obj, key) {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return void 0;\n  }\n}\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction map(obj, fn, contextObj) {\n  const res = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res;\n}\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n    const aProp = a[k];\n    const bProp = b[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isObject(thing) {\n  return thing !== null && typeof thing === \"object\";\n}\nfunction promiseWithTimeout(promise, timeInMS = 2e3) {\n  const deferredPromise = new Deferred();\n  setTimeout(() => deferredPromise.reject(\"timeout!\"), timeInMS);\n  promise.then(deferredPromise.resolve, deferredPromise.reject);\n  return deferredPromise.promise;\n}\nfunction querystring(querystringParams) {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(arrayVal));\n      });\n    } else {\n      params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(value));\n    }\n  }\n  return params.length ? \"&\" + params.join(\"&\") : \"\";\n}\nfunction querystringDecode(querystring2) {\n  const obj = {};\n  const tokens = querystring2.replace(/^\\?/, \"\").split(\"&\");\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split(\"=\");\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\nfunction extractQuerystring(url) {\n  const queryStart = url.indexOf(\"?\");\n  if (!queryStart) {\n    return \"\";\n  }\n  const fragmentStart = url.indexOf(\"#\", queryStart);\n  return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);\n}\nvar Sha1 = class {\n  constructor() {\n    this.chain_ = [];\n    this.buf_ = [];\n    this.W_ = [];\n    this.pad_ = [];\n    this.inbuf_ = 0;\n    this.total_ = 0;\n    this.blockSize = 512 / 8;\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n    this.reset();\n  }\n  reset() {\n    this.chain_[0] = 1732584193;\n    this.chain_[1] = 4023233417;\n    this.chain_[2] = 2562383102;\n    this.chain_[3] = 271733878;\n    this.chain_[4] = 3285377520;\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n  compress_(buf, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n    const W = this.W_;\n    if (typeof buf === \"string\") {\n      for (let i = 0; i < 16; i++) {\n        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];\n        offset += 4;\n      }\n    }\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = (t << 1 | t >>> 31) & 4294967295;\n    }\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ b & (c ^ d);\n          k = 1518500249;\n        } else {\n          f = b ^ c ^ d;\n          k = 1859775393;\n        }\n      } else {\n        if (i < 60) {\n          f = b & c | d & (b | c);\n          k = 2400959708;\n        } else {\n          f = b ^ c ^ d;\n          k = 3395469782;\n        }\n      }\n      const t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;\n      e = d;\n      d = c;\n      c = (b << 30 | b >>> 2) & 4294967295;\n      b = a;\n      a = t;\n    }\n    this.chain_[0] = this.chain_[0] + a & 4294967295;\n    this.chain_[1] = this.chain_[1] + b & 4294967295;\n    this.chain_[2] = this.chain_[2] + c & 4294967295;\n    this.chain_[3] = this.chain_[3] + d & 4294967295;\n    this.chain_[4] = this.chain_[4] + e & 4294967295;\n  }\n  update(bytes, length) {\n    if (bytes == null) {\n      return;\n    }\n    if (length === void 0) {\n      length = bytes.length;\n    }\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n    while (n < length) {\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n      if (typeof bytes === \"string\") {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            break;\n          }\n        }\n      }\n    }\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n  digest() {\n    const digest = [];\n    let totalBits = this.total_ * 8;\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256;\n    }\n    this.compress_(this.buf_);\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = this.chain_[i] >> j & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n};\nfunction createSubscribe(executor, onNoObservers) {\n  const proxy = new ObserverProxy(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\nvar ObserverProxy = class {\n  constructor(executor, onNoObservers) {\n    this.observers = [];\n    this.unsubscribes = [];\n    this.observerCount = 0;\n    this.task = Promise.resolve();\n    this.finalized = false;\n    this.onNoObservers = onNoObservers;\n    this.task.then(() => {\n      executor(this);\n    }).catch(e => {\n      this.error(e);\n    });\n  }\n  next(value) {\n    this.forEachObserver(observer => {\n      observer.next(value);\n    });\n  }\n  error(error) {\n    this.forEachObserver(observer => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n  complete() {\n    this.forEachObserver(observer => {\n      observer.complete();\n    });\n    this.close();\n  }\n  subscribe(nextOrObserver, error, complete) {\n    let observer;\n    if (nextOrObserver === void 0 && error === void 0 && complete === void 0) {\n      throw new Error(\"Missing Observer.\");\n    }\n    if (implementsAnyMethods(nextOrObserver, [\"next\", \"error\", \"complete\"])) {\n      observer = nextOrObserver;\n    } else {\n      observer = {\n        next: nextOrObserver,\n        error,\n        complete\n      };\n    }\n    if (observer.next === void 0) {\n      observer.next = noop;\n    }\n    if (observer.error === void 0) {\n      observer.error = noop;\n    }\n    if (observer.complete === void 0) {\n      observer.complete = noop;\n    }\n    const unsub = this.unsubscribeOne.bind(this, this.observers.length);\n    if (this.finalized) {\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {}\n        return;\n      });\n    }\n    this.observers.push(observer);\n    return unsub;\n  }\n  unsubscribeOne(i) {\n    if (this.observers === void 0 || this.observers[i] === void 0) {\n      return;\n    }\n    delete this.observers[i];\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== void 0) {\n      this.onNoObservers(this);\n    }\n  }\n  forEachObserver(fn) {\n    if (this.finalized) {\n      return;\n    }\n    for (let i = 0; i < this.observers.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n  sendOne(i, fn) {\n    this.task.then(() => {\n      if (this.observers !== void 0 && this.observers[i] !== void 0) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          if (typeof console !== \"undefined\" && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n  close(err) {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== void 0) {\n      this.finalError = err;\n    }\n    this.task.then(() => {\n      this.observers = void 0;\n      this.onNoObservers = void 0;\n    });\n  }\n};\nfunction async(fn, onError) {\n  return (...args) => {\n    Promise.resolve(true).then(() => {\n      fn(...args);\n    }).catch(error => {\n      if (onError) {\n        onError(error);\n      }\n    });\n  };\n}\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== \"object\" || obj === null) {\n    return false;\n  }\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === \"function\") {\n      return true;\n    }\n  }\n  return false;\n}\nfunction noop() {}\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\n  let argError;\n  if (argCount < minCount) {\n    argError = \"at least \" + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? \"none\" : \"no more than \" + maxCount;\n  }\n  if (argError) {\n    const error = fnName + \" failed: Was called with \" + argCount + (argCount === 1 ? \" argument.\" : \" arguments.\") + \" Expects \" + argError + \".\";\n    throw new Error(error);\n  }\n};\nfunction errorPrefix(fnName, argName) {\n  return `${fnName} failed: ${argName} argument `;\n}\nfunction validateNamespace(fnName, namespace, optional) {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== \"string\") {\n    throw new Error(errorPrefix(fnName, \"namespace\") + \"must be a valid firebase namespace.\");\n  }\n}\nfunction validateCallback(fnName, argumentName, callback, optional) {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== \"function\") {\n    throw new Error(errorPrefix(fnName, argumentName) + \"must be a valid function.\");\n  }\n}\nfunction validateContextObject(fnName, argumentName, context, optional) {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== \"object\" || context === null) {\n    throw new Error(errorPrefix(fnName, argumentName) + \"must be a valid context object.\");\n  }\n}\nvar stringToByteArray = function (str) {\n  const out = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c >= 55296 && c <= 56319) {\n      const high = c - 55296;\n      i++;\n      assert(i < str.length, \"Surrogate pair missing trail surrogate.\");\n      const low = str.charCodeAt(i) - 56320;\n      c = 65536 + (high << 10) + low;\n    }\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = c >> 6 | 192;\n      out[p++] = c & 63 | 128;\n    } else if (c < 65536) {\n      out[p++] = c >> 12 | 224;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    } else {\n      out[p++] = c >> 18 | 240;\n      out[p++] = c >> 12 & 63 | 128;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    }\n  }\n  return out;\n};\nvar stringLength = function (str) {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 55296 && c <= 56319) {\n      p += 4;\n      i++;\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\nvar uuidv4 = function () {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0,\n      v = c === \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n};\nvar DEFAULT_INTERVAL_MILLIS = 1e3;\nvar DEFAULT_BACKOFF_FACTOR = 2;\nvar MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;\nvar RANDOM_FACTOR = 0.5;\nfunction calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n  const randomWait = Math.round(RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\nfunction ordinal(i) {\n  if (!Number.isFinite(i)) {\n    return `${i}`;\n  }\n  return i + indicator(i);\n}\nfunction indicator(i) {\n  i = Math.abs(i);\n  const cent = i % 100;\n  if (cent >= 10 && cent <= 20) {\n    return \"th\";\n  }\n  const dec = i % 10;\n  if (dec === 1) {\n    return \"st\";\n  }\n  if (dec === 2) {\n    return \"nd\";\n  }\n  if (dec === 3) {\n    return \"rd\";\n  }\n  return \"th\";\n}\nfunction getModularInstance(service) {\n  if (service && service._delegate) {\n    return service._delegate;\n  } else {\n    return service;\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n};\n\ncode(module, require);\n_exports(module.exports);\n}}});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","dependencies":[],"warnings":[]}