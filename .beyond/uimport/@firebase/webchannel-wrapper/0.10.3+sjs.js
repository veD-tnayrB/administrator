{"code":"System.register([], (_exports, _context) => {\n\nconst bimport = specifier => {\n\tconst dependencies = new Map([[\"@firebase/webchannel-wrapper\",\"0.10.3\"]]);\n\treturn globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));\n};\n\n\nvar dependencies = new Map();\nvar require = dependency => dependencies.get(dependency);\nreturn {\nsetters: [],\nexecute: function() {\n// Prevent esbuild from considering the context to be amd\nconst define = void 0;\nconst module = {};\n\nconst code = (module, require) => {\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// .beyond/uimport/@firebase/webchannel-wrapper.0.10.3.js\nvar webchannel_wrapper_0_10_3_exports = {};\n__export(webchannel_wrapper_0_10_3_exports, {\n  ErrorCode: () => ErrorCode,\n  Event: () => Event,\n  EventType: () => EventType,\n  FetchXmlHttpFactory: () => FetchXmlHttpFactory,\n  Integer: () => Integer,\n  Md5: () => Md5,\n  Stat: () => Stat,\n  WebChannel: () => WebChannel,\n  XhrIo: () => XhrIo,\n  createWebChannelTransport: () => createWebChannelTransport,\n  default: () => webchannel_wrapper_0_10_3_default,\n  getStatEventTarget: () => getStatEventTarget\n});\nmodule.exports = __toCommonJS(webchannel_wrapper_0_10_3_exports);\n\n// node_modules/@firebase/webchannel-wrapper/dist/esm/index.esm2017.js\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nvar esm = {};\nvar k,\n  goog = goog || {},\n  l = commonjsGlobal || self;\nfunction aa(a) {\n  var b = typeof a;\n  b = \"object\" != b ? b : a ? Array.isArray(a) ? \"array\" : b : \"null\";\n  return \"array\" == b || \"object\" == b && \"number\" == typeof a.length;\n}\nfunction p(a) {\n  var b = typeof a;\n  return \"object\" == b && null != a || \"function\" == b;\n}\nfunction ba(a) {\n  return Object.prototype.hasOwnProperty.call(a, ca) && a[ca] || (a[ca] = ++da);\n}\nvar ca = \"closure_uid_\" + (1e9 * Math.random() >>> 0),\n  da = 0;\nfunction ea(a, b, c) {\n  return a.call.apply(a.bind, arguments);\n}\nfunction fa(a, b, c) {\n  if (!a) throw Error();\n  if (2 < arguments.length) {\n    var d = Array.prototype.slice.call(arguments, 2);\n    return function () {\n      var e = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(e, d);\n      return a.apply(b, e);\n    };\n  }\n  return function () {\n    return a.apply(b, arguments);\n  };\n}\nfunction q(a, b, c) {\n  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf(\"native code\") ? q = ea : q = fa;\n  return q.apply(null, arguments);\n}\nfunction ha(a, b) {\n  var c = Array.prototype.slice.call(arguments, 1);\n  return function () {\n    var d = c.slice();\n    d.push.apply(d, arguments);\n    return a.apply(this, d);\n  };\n}\nfunction r(a, b) {\n  function c() {}\n  c.prototype = b.prototype;\n  a.$ = b.prototype;\n  a.prototype = new c();\n  a.prototype.constructor = a;\n  a.ac = function (d, e, f) {\n    for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++) h[n - 2] = arguments[n];\n    return b.prototype[e].apply(d, h);\n  };\n}\nfunction v() {\n  this.s = this.s;\n  this.o = this.o;\n}\nvar ia = 0;\nv.prototype.s = false;\nv.prototype.sa = function () {\n  if (!this.s && (this.s = true, this.N(), 0 != ia)) {\n    ba(this);\n  }\n};\nv.prototype.N = function () {\n  if (this.o) for (; this.o.length;) this.o.shift()();\n};\nvar ka = Array.prototype.indexOf ? function (a, b) {\n  return Array.prototype.indexOf.call(a, b, void 0);\n} : function (a, b) {\n  if (\"string\" === typeof a) return \"string\" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);\n  for (let c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;\n  return -1;\n};\nfunction ma(a) {\n  const b = a.length;\n  if (0 < b) {\n    const c = Array(b);\n    for (let d = 0; d < b; d++) c[d] = a[d];\n    return c;\n  }\n  return [];\n}\nfunction na(a, b) {\n  for (let c = 1; c < arguments.length; c++) {\n    const d = arguments[c];\n    if (aa(d)) {\n      const e = a.length || 0,\n        f = d.length || 0;\n      a.length = e + f;\n      for (let h = 0; h < f; h++) a[e + h] = d[h];\n    } else a.push(d);\n  }\n}\nfunction w(a, b) {\n  this.type = a;\n  this.g = this.target = b;\n  this.defaultPrevented = false;\n}\nw.prototype.h = function () {\n  this.defaultPrevented = true;\n};\nvar oa = function () {\n  if (!l.addEventListener || !Object.defineProperty) return false;\n  var a = false,\n    b = Object.defineProperty({}, \"passive\", {\n      get: function () {\n        a = true;\n      }\n    });\n  try {\n    l.addEventListener(\"test\", () => {}, b), l.removeEventListener(\"test\", () => {}, b);\n  } catch (c) {}\n  return a;\n}();\nfunction x(a) {\n  return /^[\\s\\xa0]*$/.test(a);\n}\nfunction pa() {\n  var a = l.navigator;\n  return a && (a = a.userAgent) ? a : \"\";\n}\nfunction y(a) {\n  return -1 != pa().indexOf(a);\n}\nfunction qa(a) {\n  qa[\" \"](a);\n  return a;\n}\nqa[\" \"] = function () {};\nfunction ra(a, b) {\n  var c = sa;\n  return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);\n}\nvar ta = y(\"Opera\"),\n  z = y(\"Trident\") || y(\"MSIE\"),\n  ua = y(\"Edge\"),\n  va = ua || z,\n  wa = y(\"Gecko\") && !(-1 != pa().toLowerCase().indexOf(\"webkit\") && !y(\"Edge\")) && !(y(\"Trident\") || y(\"MSIE\")) && !y(\"Edge\"),\n  xa = -1 != pa().toLowerCase().indexOf(\"webkit\") && !y(\"Edge\");\nfunction ya() {\n  var a = l.document;\n  return a ? a.documentMode : void 0;\n}\nvar za;\na: {\n  Aa = \"\", Ba = function () {\n    var a = pa();\n    if (wa) return /rv:([^\\);]+)(\\)|;)/.exec(a);\n    if (ua) return /Edge\\/([\\d\\.]+)/.exec(a);\n    if (z) return /\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);\n    if (xa) return /WebKit\\/(\\S+)/.exec(a);\n    if (ta) return /(?:Version)[ \\/]?(\\S+)/.exec(a);\n  }();\n  Ba && (Aa = Ba ? Ba[1] : \"\");\n  if (z) {\n    Ca = ya();\n    if (null != Ca && Ca > parseFloat(Aa)) {\n      za = String(Ca);\n      break a;\n    }\n  }\n  za = Aa;\n}\nvar Da;\nif (l.document && z) {\n  Ea = ya();\n  Da = Ea ? Ea : parseInt(za, 10) || void 0;\n} else Da = void 0;\nvar Fa = Da;\nfunction A(a, b) {\n  w.call(this, a ? a.type : \"\");\n  this.relatedTarget = this.g = this.target = null;\n  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;\n  this.key = \"\";\n  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;\n  this.state = null;\n  this.pointerId = 0;\n  this.pointerType = \"\";\n  this.i = null;\n  if (a) {\n    var c = this.type = a.type,\n      d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;\n    this.target = a.target || a.srcElement;\n    this.g = b;\n    if (b = a.relatedTarget) {\n      if (wa) {\n        a: {\n          try {\n            qa(b.nodeName);\n            var e = true;\n            break a;\n          } catch (f) {}\n          e = false;\n        }\n        e || (b = null);\n      }\n    } else \"mouseover\" == c ? b = a.fromElement : \"mouseout\" == c && (b = a.toElement);\n    this.relatedTarget = b;\n    d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);\n    this.button = a.button;\n    this.key = a.key || \"\";\n    this.ctrlKey = a.ctrlKey;\n    this.altKey = a.altKey;\n    this.shiftKey = a.shiftKey;\n    this.metaKey = a.metaKey;\n    this.pointerId = a.pointerId || 0;\n    this.pointerType = \"string\" === typeof a.pointerType ? a.pointerType : Ga[a.pointerType] || \"\";\n    this.state = a.state;\n    this.i = a;\n    a.defaultPrevented && A.$.h.call(this);\n  }\n}\nr(A, w);\nvar Ga = {\n  2: \"touch\",\n  3: \"pen\",\n  4: \"mouse\"\n};\nA.prototype.h = function () {\n  A.$.h.call(this);\n  var a = this.i;\n  a.preventDefault ? a.preventDefault() : a.returnValue = false;\n};\nvar Ha = \"closure_listenable_\" + (1e6 * Math.random() | 0);\nvar Ia = 0;\nfunction Ja(a, b, c, d, e) {\n  this.listener = a;\n  this.proxy = null;\n  this.src = b;\n  this.type = c;\n  this.capture = !!d;\n  this.la = e;\n  this.key = ++Ia;\n  this.fa = this.ia = false;\n}\nfunction Ka(a) {\n  a.fa = true;\n  a.listener = null;\n  a.proxy = null;\n  a.src = null;\n  a.la = null;\n}\nfunction Na(a, b, c) {\n  for (const d in a) b.call(c, a[d], d, a);\n}\nfunction Oa(a, b) {\n  for (const c in a) b.call(void 0, a[c], c, a);\n}\nfunction Pa(a) {\n  const b = {};\n  for (const c in a) b[c] = a[c];\n  return b;\n}\nvar Qa = \"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\".split(\" \");\nfunction Ra(a, b) {\n  let c, d;\n  for (let e = 1; e < arguments.length; e++) {\n    d = arguments[e];\n    for (c in d) a[c] = d[c];\n    for (let f = 0; f < Qa.length; f++) c = Qa[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);\n  }\n}\nfunction Sa(a) {\n  this.src = a;\n  this.g = {};\n  this.h = 0;\n}\nSa.prototype.add = function (a, b, c, d, e) {\n  var f = a.toString();\n  a = this.g[f];\n  a || (a = this.g[f] = [], this.h++);\n  var h = Ta(a, b, d, e);\n  -1 < h ? (b = a[h], c || (b.ia = false)) : (b = new Ja(b, this.src, f, !!d, e), b.ia = c, a.push(b));\n  return b;\n};\nfunction Ua(a, b) {\n  var c = b.type;\n  if (c in a.g) {\n    var d = a.g[c],\n      e = ka(d, b),\n      f;\n    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);\n    f && (Ka(b), 0 == a.g[c].length && (delete a.g[c], a.h--));\n  }\n}\nfunction Ta(a, b, c, d) {\n  for (var e = 0; e < a.length; ++e) {\n    var f = a[e];\n    if (!f.fa && f.listener == b && f.capture == !!c && f.la == d) return e;\n  }\n  return -1;\n}\nvar Va = \"closure_lm_\" + (1e6 * Math.random() | 0),\n  Wa = {};\nfunction Ya(a, b, c, d, e) {\n  if (d && d.once) return Za(a, b, c, d, e);\n  if (Array.isArray(b)) {\n    for (var f = 0; f < b.length; f++) Ya(a, b[f], c, d, e);\n    return null;\n  }\n  c = $a(c);\n  return a && a[Ha] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ab(a, b, c, false, d, e);\n}\nfunction ab(a, b, c, d, e, f) {\n  if (!b) throw Error(\"Invalid event type\");\n  var h = p(e) ? !!e.capture : !!e,\n    n = bb(a);\n  n || (a[Va] = n = new Sa(a));\n  c = n.add(b, c, d, h, f);\n  if (c.proxy) return c;\n  d = cb();\n  c.proxy = d;\n  d.src = a;\n  d.listener = c;\n  if (a.addEventListener) oa || (e = h), void 0 === e && (e = false), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(db(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error(\"addEventListener and attachEvent are unavailable.\");\n  return c;\n}\nfunction cb() {\n  function a(c) {\n    return b.call(a.src, a.listener, c);\n  }\n  const b = eb;\n  return a;\n}\nfunction Za(a, b, c, d, e) {\n  if (Array.isArray(b)) {\n    for (var f = 0; f < b.length; f++) Za(a, b[f], c, d, e);\n    return null;\n  }\n  c = $a(c);\n  return a && a[Ha] ? a.P(b, c, p(d) ? !!d.capture : !!d, e) : ab(a, b, c, true, d, e);\n}\nfunction fb(a, b, c, d, e) {\n  if (Array.isArray(b)) for (var f = 0; f < b.length; f++) fb(a, b[f], c, d, e);else (d = p(d) ? !!d.capture : !!d, c = $a(c), a && a[Ha]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = Ta(f, c, d, e), -1 < c && (Ka(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = bb(a)) && (b = a.g[b.toString()], a = -1, b && (a = Ta(b, c, d, e)), (c = -1 < a ? b[a] : null) && gb(c));\n}\nfunction gb(a) {\n  if (\"number\" !== typeof a && a && !a.fa) {\n    var b = a.src;\n    if (b && b[Ha]) Ua(b.i, a);else {\n      var c = a.type,\n        d = a.proxy;\n      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(db(c), d) : b.addListener && b.removeListener && b.removeListener(d);\n      (c = bb(b)) ? (Ua(c, a), 0 == c.h && (c.src = null, b[Va] = null)) : Ka(a);\n    }\n  }\n}\nfunction db(a) {\n  return a in Wa ? Wa[a] : Wa[a] = \"on\" + a;\n}\nfunction eb(a, b) {\n  if (a.fa) a = true;else {\n    b = new A(b, this);\n    var c = a.listener,\n      d = a.la || a.src;\n    a.ia && gb(a);\n    a = c.call(d, b);\n  }\n  return a;\n}\nfunction bb(a) {\n  a = a[Va];\n  return a instanceof Sa ? a : null;\n}\nvar hb = \"__closure_events_fn_\" + (1e9 * Math.random() >>> 0);\nfunction $a(a) {\n  if (\"function\" === typeof a) return a;\n  a[hb] || (a[hb] = function (b) {\n    return a.handleEvent(b);\n  });\n  return a[hb];\n}\nfunction B() {\n  v.call(this);\n  this.i = new Sa(this);\n  this.S = this;\n  this.J = null;\n}\nr(B, v);\nB.prototype[Ha] = true;\nB.prototype.removeEventListener = function (a, b, c, d) {\n  fb(this, a, b, c, d);\n};\nfunction C(a, b) {\n  var c,\n    d = a.J;\n  if (d) for (c = []; d; d = d.J) c.push(d);\n  a = a.S;\n  d = b.type || b;\n  if (\"string\" === typeof b) b = new w(b, a);else if (b instanceof w) b.target = b.target || a;else {\n    var e = b;\n    b = new w(d, a);\n    Ra(b, e);\n  }\n  e = true;\n  if (c) for (var f = c.length - 1; 0 <= f; f--) {\n    var h = b.g = c[f];\n    e = ib(h, d, true, b) && e;\n  }\n  h = b.g = a;\n  e = ib(h, d, true, b) && e;\n  e = ib(h, d, false, b) && e;\n  if (c) for (f = 0; f < c.length; f++) h = b.g = c[f], e = ib(h, d, false, b) && e;\n}\nB.prototype.N = function () {\n  B.$.N.call(this);\n  if (this.i) {\n    var a = this.i,\n      c;\n    for (c in a.g) {\n      for (var d = a.g[c], e = 0; e < d.length; e++) Ka(d[e]);\n      delete a.g[c];\n      a.h--;\n    }\n  }\n  this.J = null;\n};\nB.prototype.O = function (a, b, c, d) {\n  return this.i.add(String(a), b, false, c, d);\n};\nB.prototype.P = function (a, b, c, d) {\n  return this.i.add(String(a), b, true, c, d);\n};\nfunction ib(a, b, c, d) {\n  b = a.i.g[String(b)];\n  if (!b) return true;\n  b = b.concat();\n  for (var e = true, f = 0; f < b.length; ++f) {\n    var h = b[f];\n    if (h && !h.fa && h.capture == c) {\n      var n = h.listener,\n        t = h.la || h.src;\n      h.ia && Ua(a.i, h);\n      e = false !== n.call(t, d) && e;\n    }\n  }\n  return e && !d.defaultPrevented;\n}\nvar jb = l.JSON.stringify;\nvar kb = class {\n  constructor(a, b) {\n    this.i = a;\n    this.j = b;\n    this.h = 0;\n    this.g = null;\n  }\n  get() {\n    let a;\n    0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();\n    return a;\n  }\n};\nfunction lb() {\n  var a = mb;\n  let b = null;\n  a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);\n  return b;\n}\nvar nb = class {\n  constructor() {\n    this.h = this.g = null;\n  }\n  add(a, b) {\n    const c = ob.get();\n    c.set(a, b);\n    this.h ? this.h.next = c : this.g = c;\n    this.h = c;\n  }\n};\nvar ob = new kb(() => new pb(), a => a.reset());\nvar pb = class {\n  constructor() {\n    this.next = this.g = this.h = null;\n  }\n  set(a, b) {\n    this.h = a;\n    this.g = b;\n    this.next = null;\n  }\n  reset() {\n    this.next = this.g = this.h = null;\n  }\n};\nfunction qb(a) {\n  var b = 1;\n  a = a.split(\":\");\n  const c = [];\n  for (; 0 < b && a.length;) c.push(a.shift()), b--;\n  a.length && c.push(a.join(\":\"));\n  return c;\n}\nfunction rb(a) {\n  l.setTimeout(() => {\n    throw a;\n  }, 0);\n}\nvar sb,\n  tb = false,\n  mb = new nb(),\n  vb = () => {\n    const a = l.Promise.resolve(void 0);\n    sb = () => {\n      a.then(ub);\n    };\n  };\nvar ub = () => {\n  for (var a; a = lb();) {\n    try {\n      a.h.call(a.g);\n    } catch (c) {\n      rb(c);\n    }\n    var b = ob;\n    b.j(a);\n    100 > b.h && (b.h++, a.next = b.g, b.g = a);\n  }\n  tb = false;\n};\nfunction wb(a, b) {\n  B.call(this);\n  this.h = a || 1;\n  this.g = b || l;\n  this.j = q(this.qb, this);\n  this.l = Date.now();\n}\nr(wb, B);\nk = wb.prototype;\nk.ga = false;\nk.T = null;\nk.qb = function () {\n  if (this.ga) {\n    var a = Date.now() - this.l;\n    0 < a && a < 0.8 * this.h ? this.T = this.g.setTimeout(this.j, this.h - a) : (this.T && (this.g.clearTimeout(this.T), this.T = null), C(this, \"tick\"), this.ga && (xb(this), this.start()));\n  }\n};\nk.start = function () {\n  this.ga = true;\n  this.T || (this.T = this.g.setTimeout(this.j, this.h), this.l = Date.now());\n};\nfunction xb(a) {\n  a.ga = false;\n  a.T && (a.g.clearTimeout(a.T), a.T = null);\n}\nk.N = function () {\n  wb.$.N.call(this);\n  xb(this);\n  delete this.g;\n};\nfunction yb(a, b, c) {\n  if (\"function\" === typeof a) c && (a = q(a, c));else if (a && \"function\" == typeof a.handleEvent) a = q(a.handleEvent, a);else throw Error(\"Invalid listener argument\");\n  return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);\n}\nfunction zb(a) {\n  a.g = yb(() => {\n    a.g = null;\n    a.i && (a.i = false, zb(a));\n  }, a.j);\n  const b = a.h;\n  a.h = null;\n  a.m.apply(null, b);\n}\nvar Ab = class extends v {\n  constructor(a, b) {\n    super();\n    this.m = a;\n    this.j = b;\n    this.h = null;\n    this.i = false;\n    this.g = null;\n  }\n  l(a) {\n    this.h = arguments;\n    this.g ? this.i = true : zb(this);\n  }\n  N() {\n    super.N();\n    this.g && (l.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);\n  }\n};\nfunction Bb(a) {\n  v.call(this);\n  this.h = a;\n  this.g = {};\n}\nr(Bb, v);\nvar Cb = [];\nfunction Db(a, b, c, d) {\n  Array.isArray(c) || (c && (Cb[0] = c.toString()), c = Cb);\n  for (var e = 0; e < c.length; e++) {\n    var f = Ya(b, c[e], d || a.handleEvent, false, a.h || a);\n    if (!f) break;\n    a.g[f.key] = f;\n  }\n}\nfunction Fb(a) {\n  Na(a.g, function (b, c) {\n    this.g.hasOwnProperty(c) && gb(b);\n  }, a);\n  a.g = {};\n}\nBb.prototype.N = function () {\n  Bb.$.N.call(this);\n  Fb(this);\n};\nBb.prototype.handleEvent = function () {\n  throw Error(\"EventHandler.handleEvent not implemented\");\n};\nfunction Gb() {\n  this.g = true;\n}\nGb.prototype.Ea = function () {\n  this.g = false;\n};\nfunction Hb(a, b, c, d, e, f) {\n  a.info(function () {\n    if (a.g) {\n      if (f) {\n        var h = \"\";\n        for (var n = f.split(\"&\"), t = 0; t < n.length; t++) {\n          var m = n[t].split(\"=\");\n          if (1 < m.length) {\n            var u = m[0];\n            m = m[1];\n            var L = u.split(\"_\");\n            h = 2 <= L.length && \"type\" == L[1] ? h + (u + \"=\" + m + \"&\") : h + (u + \"=redacted&\");\n          }\n        }\n      } else h = null;\n    } else h = f;\n    return \"XMLHTTP REQ (\" + d + \") [attempt \" + e + \"]: \" + b + \"\\n\" + c + \"\\n\" + h;\n  });\n}\nfunction Ib(a, b, c, d, e, f, h) {\n  a.info(function () {\n    return \"XMLHTTP RESP (\" + d + \") [ attempt \" + e + \"]: \" + b + \"\\n\" + c + \"\\n\" + f + \" \" + h;\n  });\n}\nfunction D(a, b, c, d) {\n  a.info(function () {\n    return \"XMLHTTP TEXT (\" + b + \"): \" + Jb(a, c) + (d ? \" \" + d : \"\");\n  });\n}\nfunction Kb(a, b) {\n  a.info(function () {\n    return \"TIMEOUT: \" + b;\n  });\n}\nGb.prototype.info = function () {};\nfunction Jb(a, b) {\n  if (!a.g) return b;\n  if (!b) return null;\n  try {\n    var c = JSON.parse(b);\n    if (c) {\n      for (a = 0; a < c.length; a++) if (Array.isArray(c[a])) {\n        var d = c[a];\n        if (!(2 > d.length)) {\n          var e = d[1];\n          if (Array.isArray(e) && !(1 > e.length)) {\n            var f = e[0];\n            if (\"noop\" != f && \"stop\" != f && \"close\" != f) for (var h = 1; h < e.length; h++) e[h] = \"\";\n          }\n        }\n      }\n    }\n    return jb(c);\n  } catch (n) {\n    return b;\n  }\n}\nvar E = {},\n  Lb = null;\nfunction Mb() {\n  return Lb = Lb || new B();\n}\nE.Ta = \"serverreachability\";\nfunction Nb(a) {\n  w.call(this, E.Ta, a);\n}\nr(Nb, w);\nfunction Ob(a) {\n  const b = Mb();\n  C(b, new Nb(b));\n}\nE.STAT_EVENT = \"statevent\";\nfunction Pb(a, b) {\n  w.call(this, E.STAT_EVENT, a);\n  this.stat = b;\n}\nr(Pb, w);\nfunction F(a) {\n  const b = Mb();\n  C(b, new Pb(b, a));\n}\nE.Ua = \"timingevent\";\nfunction Qb(a, b) {\n  w.call(this, E.Ua, a);\n  this.size = b;\n}\nr(Qb, w);\nfunction Rb(a, b) {\n  if (\"function\" !== typeof a) throw Error(\"Fn must not be null and must be a function\");\n  return l.setTimeout(function () {\n    a();\n  }, b);\n}\nvar Sb = {\n  NO_ERROR: 0,\n  rb: 1,\n  Eb: 2,\n  Db: 3,\n  yb: 4,\n  Cb: 5,\n  Fb: 6,\n  Qa: 7,\n  TIMEOUT: 8,\n  Ib: 9\n};\nvar Tb = {\n  wb: \"complete\",\n  Sb: \"success\",\n  Ra: \"error\",\n  Qa: \"abort\",\n  Kb: \"ready\",\n  Lb: \"readystatechange\",\n  TIMEOUT: \"timeout\",\n  Gb: \"incrementaldata\",\n  Jb: \"progress\",\n  zb: \"downloadprogress\",\n  $b: \"uploadprogress\"\n};\nfunction Ub() {}\nUb.prototype.h = null;\nfunction Vb(a) {\n  return a.h || (a.h = a.i());\n}\nfunction Wb() {}\nvar Xb = {\n  OPEN: \"a\",\n  vb: \"b\",\n  Ra: \"c\",\n  Hb: \"d\"\n};\nfunction Yb() {\n  w.call(this, \"d\");\n}\nr(Yb, w);\nfunction Zb() {\n  w.call(this, \"c\");\n}\nr(Zb, w);\nvar $b;\nfunction ac() {}\nr(ac, Ub);\nac.prototype.g = function () {\n  return new XMLHttpRequest();\n};\nac.prototype.i = function () {\n  return {};\n};\n$b = new ac();\nfunction bc(a, b, c, d) {\n  this.l = a;\n  this.j = b;\n  this.m = c;\n  this.W = d || 1;\n  this.U = new Bb(this);\n  this.P = cc;\n  a = va ? 125 : void 0;\n  this.V = new wb(a);\n  this.I = null;\n  this.i = false;\n  this.s = this.A = this.v = this.L = this.G = this.Y = this.B = null;\n  this.F = [];\n  this.g = null;\n  this.C = 0;\n  this.o = this.u = null;\n  this.ca = -1;\n  this.J = false;\n  this.O = 0;\n  this.M = null;\n  this.ba = this.K = this.aa = this.S = false;\n  this.h = new dc();\n}\nfunction dc() {\n  this.i = null;\n  this.g = \"\";\n  this.h = false;\n}\nvar cc = 45e3,\n  ec = {},\n  fc = {};\nk = bc.prototype;\nk.setTimeout = function (a) {\n  this.P = a;\n};\nfunction gc(a, b, c) {\n  a.L = 1;\n  a.v = hc(G(b));\n  a.s = c;\n  a.S = true;\n  ic(a, null);\n}\nfunction ic(a, b) {\n  a.G = Date.now();\n  jc(a);\n  a.A = G(a.v);\n  var c = a.A,\n    d = a.W;\n  Array.isArray(d) || (d = [String(d)]);\n  kc(c.i, \"t\", d);\n  a.C = 0;\n  c = a.l.J;\n  a.h = new dc();\n  a.g = lc(a.l, c ? b : null, !a.s);\n  0 < a.O && (a.M = new Ab(q(a.Pa, a, a.g), a.O));\n  Db(a.U, a.g, \"readystatechange\", a.nb);\n  b = a.I ? Pa(a.I) : {};\n  a.s ? (a.u || (a.u = \"POST\"), b[\"Content-Type\"] = \"application/x-www-form-urlencoded\", a.g.ha(a.A, a.u, a.s, b)) : (a.u = \"GET\", a.g.ha(a.A, a.u, null, b));\n  Ob();\n  Hb(a.j, a.u, a.A, a.m, a.W, a.s);\n}\nk.nb = function (a) {\n  a = a.target;\n  const b = this.M;\n  b && 3 == H(a) ? b.l() : this.Pa(a);\n};\nk.Pa = function (a) {\n  try {\n    if (a == this.g) a: {\n      const u = H(this.g);\n      var b = this.g.Ia();\n      const L = this.g.da();\n      if (!(3 > u) && (3 != u || va || this.g && (this.h.h || this.g.ja() || mc(this.g)))) {\n        this.J || 4 != u || 7 == b || (8 == b || 0 >= L ? Ob(3) : Ob(2));\n        nc(this);\n        var c = this.g.da();\n        this.ca = c;\n        b: if (oc(this)) {\n          var d = mc(this.g);\n          a = \"\";\n          var e = d.length,\n            f = 4 == H(this.g);\n          if (!this.h.i) {\n            if (\"undefined\" === typeof TextDecoder) {\n              I(this);\n              pc(this);\n              var h = \"\";\n              break b;\n            }\n            this.h.i = new l.TextDecoder();\n          }\n          for (b = 0; b < e; b++) this.h.h = true, a += this.h.i.decode(d[b], {\n            stream: f && b == e - 1\n          });\n          d.splice(0, e);\n          this.h.g += a;\n          this.C = 0;\n          h = this.h.g;\n        } else h = this.g.ja();\n        this.i = 200 == c;\n        Ib(this.j, this.u, this.A, this.m, this.W, u, c);\n        if (this.i) {\n          if (this.aa && !this.K) {\n            b: {\n              if (this.g) {\n                var n,\n                  t = this.g;\n                if ((n = t.g ? t.g.getResponseHeader(\"X-HTTP-Initial-Response\") : null) && !x(n)) {\n                  var m = n;\n                  break b;\n                }\n              }\n              m = null;\n            }\n            if (c = m) D(this.j, this.m, c, \"Initial handshake response via X-HTTP-Initial-Response\"), this.K = true, qc(this, c);else {\n              this.i = false;\n              this.o = 3;\n              F(12);\n              I(this);\n              pc(this);\n              break a;\n            }\n          }\n          this.S ? (rc(this, u, h), va && this.i && 3 == u && (Db(this.U, this.V, \"tick\", this.mb), this.V.start())) : (D(this.j, this.m, h, null), qc(this, h));\n          4 == u && I(this);\n          this.i && !this.J && (4 == u ? sc(this.l, this) : (this.i = false, jc(this)));\n        } else tc(this.g), 400 == c && 0 < h.indexOf(\"Unknown SID\") ? (this.o = 3, F(12)) : (this.o = 0, F(13)), I(this), pc(this);\n      }\n    }\n  } catch (u) {} finally {}\n};\nfunction oc(a) {\n  return a.g ? \"GET\" == a.u && 2 != a.L && a.l.Ha : false;\n}\nfunction rc(a, b, c) {\n  let d = true,\n    e;\n  for (; !a.J && a.C < c.length;) if (e = uc(a, c), e == fc) {\n    4 == b && (a.o = 4, F(14), d = false);\n    D(a.j, a.m, null, \"[Incomplete Response]\");\n    break;\n  } else if (e == ec) {\n    a.o = 4;\n    F(15);\n    D(a.j, a.m, c, \"[Invalid Chunk]\");\n    d = false;\n    break;\n  } else D(a.j, a.m, e, null), qc(a, e);\n  oc(a) && e != fc && e != ec && (a.h.g = \"\", a.C = 0);\n  4 != b || 0 != c.length || a.h.h || (a.o = 1, F(16), d = false);\n  a.i = a.i && d;\n  d ? 0 < c.length && !a.ba && (a.ba = true, b = a.l, b.g == a && b.ca && !b.M && (b.l.info(\"Great, no buffering proxy detected. Bytes received: \" + c.length), vc(b), b.M = true, F(11))) : (D(a.j, a.m, c, \"[Invalid Chunked Response]\"), I(a), pc(a));\n}\nk.mb = function () {\n  if (this.g) {\n    var a = H(this.g),\n      b = this.g.ja();\n    this.C < b.length && (nc(this), rc(this, a, b), this.i && 4 != a && jc(this));\n  }\n};\nfunction uc(a, b) {\n  var c = a.C,\n    d = b.indexOf(\"\\n\", c);\n  if (-1 == d) return fc;\n  c = Number(b.substring(c, d));\n  if (isNaN(c)) return ec;\n  d += 1;\n  if (d + c > b.length) return fc;\n  b = b.slice(d, d + c);\n  a.C = d + c;\n  return b;\n}\nk.cancel = function () {\n  this.J = true;\n  I(this);\n};\nfunction jc(a) {\n  a.Y = Date.now() + a.P;\n  wc(a, a.P);\n}\nfunction wc(a, b) {\n  if (null != a.B) throw Error(\"WatchDog timer not null\");\n  a.B = Rb(q(a.lb, a), b);\n}\nfunction nc(a) {\n  a.B && (l.clearTimeout(a.B), a.B = null);\n}\nk.lb = function () {\n  this.B = null;\n  const a = Date.now();\n  0 <= a - this.Y ? (Kb(this.j, this.A), 2 != this.L && (Ob(), F(17)), I(this), this.o = 2, pc(this)) : wc(this, this.Y - a);\n};\nfunction pc(a) {\n  0 == a.l.H || a.J || sc(a.l, a);\n}\nfunction I(a) {\n  nc(a);\n  var b = a.M;\n  b && \"function\" == typeof b.sa && b.sa();\n  a.M = null;\n  xb(a.V);\n  Fb(a.U);\n  a.g && (b = a.g, a.g = null, b.abort(), b.sa());\n}\nfunction qc(a, b) {\n  try {\n    var c = a.l;\n    if (0 != c.H && (c.g == a || xc(c.i, a))) {\n      if (!a.K && xc(c.i, a) && 3 == c.H) {\n        try {\n          var d = c.Ja.g.parse(b);\n        } catch (m) {\n          d = null;\n        }\n        if (Array.isArray(d) && 3 == d.length) {\n          var e = d;\n          if (0 == e[0]) a: {\n            if (!c.u) {\n              if (c.g) if (c.g.G + 3e3 < a.G) yc(c), zc(c);else break a;\n              Ac(c);\n              F(18);\n            }\n          } else c.Fa = e[1], 0 < c.Fa - c.V && 37500 > e[2] && c.G && 0 == c.A && !c.v && (c.v = Rb(q(c.ib, c), 6e3));\n          if (1 >= Bc(c.i) && c.oa) {\n            try {\n              c.oa();\n            } catch (m) {}\n            c.oa = void 0;\n          }\n        } else J(c, 11);\n      } else if ((a.K || c.g == a) && yc(c), !x(b)) for (e = c.Ja.g.parse(b), b = 0; b < e.length; b++) {\n        let m = e[b];\n        c.V = m[0];\n        m = m[1];\n        if (2 == c.H) {\n          if (\"c\" == m[0]) {\n            c.K = m[1];\n            c.pa = m[2];\n            const u = m[3];\n            null != u && (c.ra = u, c.l.info(\"VER=\" + c.ra));\n            const L = m[4];\n            null != L && (c.Ga = L, c.l.info(\"SVER=\" + c.Ga));\n            const La = m[5];\n            null != La && \"number\" === typeof La && 0 < La && (d = 1.5 * La, c.L = d, c.l.info(\"backChannelRequestTimeoutMs_=\" + d));\n            d = c;\n            const la = a.g;\n            if (la) {\n              const Ma = la.g ? la.g.getResponseHeader(\"X-Client-Wire-Protocol\") : null;\n              if (Ma) {\n                var f = d.i;\n                f.g || -1 == Ma.indexOf(\"spdy\") && -1 == Ma.indexOf(\"quic\") && -1 == Ma.indexOf(\"h2\") || (f.j = f.l, f.g = /* @__PURE__ */new Set(), f.h && (Cc(f, f.h), f.h = null));\n              }\n              if (d.F) {\n                const Eb = la.g ? la.g.getResponseHeader(\"X-HTTP-Session-Id\") : null;\n                Eb && (d.Da = Eb, K(d.I, d.F, Eb));\n              }\n            }\n            c.H = 3;\n            c.h && c.h.Ba();\n            c.ca && (c.S = Date.now() - a.G, c.l.info(\"Handshake RTT: \" + c.S + \"ms\"));\n            d = c;\n            var h = a;\n            d.wa = Dc(d, d.J ? d.pa : null, d.Y);\n            if (h.K) {\n              Ec(d.i, h);\n              var n = h,\n                t = d.L;\n              t && n.setTimeout(t);\n              n.B && (nc(n), jc(n));\n              d.g = h;\n            } else Fc(d);\n            0 < c.j.length && Gc(c);\n          } else \"stop\" != m[0] && \"close\" != m[0] || J(c, 7);\n        } else 3 == c.H && (\"stop\" == m[0] || \"close\" == m[0] ? \"stop\" == m[0] ? J(c, 7) : Hc(c) : \"noop\" != m[0] && c.h && c.h.Aa(m), c.A = 0);\n      }\n    }\n    Ob(4);\n  } catch (m) {}\n}\nfunction Ic(a) {\n  if (a.Z && \"function\" == typeof a.Z) return a.Z();\n  if (\"undefined\" !== typeof Map && a instanceof Map || \"undefined\" !== typeof Set && a instanceof Set) return Array.from(a.values());\n  if (\"string\" === typeof a) return a.split(\"\");\n  if (aa(a)) {\n    for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);\n    return b;\n  }\n  b = [];\n  c = 0;\n  for (d in a) b[c++] = a[d];\n  return b;\n}\nfunction Jc(a) {\n  if (a.ta && \"function\" == typeof a.ta) return a.ta();\n  if (!a.Z || \"function\" != typeof a.Z) {\n    if (\"undefined\" !== typeof Map && a instanceof Map) return Array.from(a.keys());\n    if (!(\"undefined\" !== typeof Set && a instanceof Set)) {\n      if (aa(a) || \"string\" === typeof a) {\n        var b = [];\n        a = a.length;\n        for (var c = 0; c < a; c++) b.push(c);\n        return b;\n      }\n      b = [];\n      c = 0;\n      for (const d in a) b[c++] = d;\n      return b;\n    }\n  }\n}\nfunction Kc(a, b) {\n  if (a.forEach && \"function\" == typeof a.forEach) a.forEach(b, void 0);else if (aa(a) || \"string\" === typeof a) Array.prototype.forEach.call(a, b, void 0);else for (var c = Jc(a), d = Ic(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);\n}\nvar Lc = RegExp(\"^(?:([^:/?#.]+):)?(?://(?:([^\\\\\\\\/?#]*)@)?([^\\\\\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\\\\\/?#]|$))?([^?#]+)?(?:\\\\?([^#]*))?(?:#([\\\\s\\\\S]*))?$\");\nfunction Mc(a, b) {\n  if (a) {\n    a = a.split(\"&\");\n    for (var c = 0; c < a.length; c++) {\n      var d = a[c].indexOf(\"=\"),\n        e = null;\n      if (0 <= d) {\n        var f = a[c].substring(0, d);\n        e = a[c].substring(d + 1);\n      } else f = a[c];\n      b(f, e ? decodeURIComponent(e.replace(/\\+/g, \" \")) : \"\");\n    }\n  }\n}\nfunction M(a) {\n  this.g = this.s = this.j = \"\";\n  this.m = null;\n  this.o = this.l = \"\";\n  this.h = false;\n  if (a instanceof M) {\n    this.h = a.h;\n    Nc(this, a.j);\n    this.s = a.s;\n    this.g = a.g;\n    Oc(this, a.m);\n    this.l = a.l;\n    var b = a.i;\n    var c = new Pc();\n    c.i = b.i;\n    b.g && (c.g = new Map(b.g), c.h = b.h);\n    Qc(this, c);\n    this.o = a.o;\n  } else a && (b = String(a).match(Lc)) ? (this.h = false, Nc(this, b[1] || \"\", true), this.s = Rc(b[2] || \"\"), this.g = Rc(b[3] || \"\", true), Oc(this, b[4]), this.l = Rc(b[5] || \"\", true), Qc(this, b[6] || \"\", true), this.o = Rc(b[7] || \"\")) : (this.h = false, this.i = new Pc(null, this.h));\n}\nM.prototype.toString = function () {\n  var a = [],\n    b = this.j;\n  b && a.push(Sc(b, Tc, true), \":\");\n  var c = this.g;\n  if (c || \"file\" == b) a.push(\"//\"), (b = this.s) && a.push(Sc(b, Tc, true), \"@\"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, \"%$1\")), c = this.m, null != c && a.push(\":\", String(c));\n  if (c = this.l) this.g && \"/\" != c.charAt(0) && a.push(\"/\"), a.push(Sc(c, \"/\" == c.charAt(0) ? Uc : Vc, true));\n  (c = this.i.toString()) && a.push(\"?\", c);\n  (c = this.o) && a.push(\"#\", Sc(c, Wc));\n  return a.join(\"\");\n};\nfunction G(a) {\n  return new M(a);\n}\nfunction Nc(a, b, c) {\n  a.j = c ? Rc(b, true) : b;\n  a.j && (a.j = a.j.replace(/:$/, \"\"));\n}\nfunction Oc(a, b) {\n  if (b) {\n    b = Number(b);\n    if (isNaN(b) || 0 > b) throw Error(\"Bad port number \" + b);\n    a.m = b;\n  } else a.m = null;\n}\nfunction Qc(a, b, c) {\n  b instanceof Pc ? (a.i = b, Xc(a.i, a.h)) : (c || (b = Sc(b, Yc)), a.i = new Pc(b, a.h));\n}\nfunction K(a, b, c) {\n  a.i.set(b, c);\n}\nfunction hc(a) {\n  K(a, \"zx\", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));\n  return a;\n}\nfunction Rc(a, b) {\n  return a ? b ? decodeURI(a.replace(/%25/g, \"%2525\")) : decodeURIComponent(a) : \"\";\n}\nfunction Sc(a, b, c) {\n  return \"string\" === typeof a ? (a = encodeURI(a).replace(b, Zc), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, \"%$1\")), a) : null;\n}\nfunction Zc(a) {\n  a = a.charCodeAt(0);\n  return \"%\" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);\n}\nvar Tc = /[#\\/\\?@]/g,\n  Vc = /[#\\?:]/g,\n  Uc = /[#\\?]/g,\n  Yc = /[#\\?@]/g,\n  Wc = /#/g;\nfunction Pc(a, b) {\n  this.h = this.g = null;\n  this.i = a || null;\n  this.j = !!b;\n}\nfunction N(a) {\n  a.g || (a.g = /* @__PURE__ */new Map(), a.h = 0, a.i && Mc(a.i, function (b, c) {\n    a.add(decodeURIComponent(b.replace(/\\+/g, \" \")), c);\n  }));\n}\nk = Pc.prototype;\nk.add = function (a, b) {\n  N(this);\n  this.i = null;\n  a = O(this, a);\n  var c = this.g.get(a);\n  c || this.g.set(a, c = []);\n  c.push(b);\n  this.h += 1;\n  return this;\n};\nfunction $c(a, b) {\n  N(a);\n  b = O(a, b);\n  a.g.has(b) && (a.i = null, a.h -= a.g.get(b).length, a.g.delete(b));\n}\nfunction ad(a, b) {\n  N(a);\n  b = O(a, b);\n  return a.g.has(b);\n}\nk.forEach = function (a, b) {\n  N(this);\n  this.g.forEach(function (c, d) {\n    c.forEach(function (e) {\n      a.call(b, e, d, this);\n    }, this);\n  }, this);\n};\nk.ta = function () {\n  N(this);\n  const a = Array.from(this.g.values()),\n    b = Array.from(this.g.keys()),\n    c = [];\n  for (let d = 0; d < b.length; d++) {\n    const e = a[d];\n    for (let f = 0; f < e.length; f++) c.push(b[d]);\n  }\n  return c;\n};\nk.Z = function (a) {\n  N(this);\n  let b = [];\n  if (\"string\" === typeof a) ad(this, a) && (b = b.concat(this.g.get(O(this, a))));else {\n    a = Array.from(this.g.values());\n    for (let c = 0; c < a.length; c++) b = b.concat(a[c]);\n  }\n  return b;\n};\nk.set = function (a, b) {\n  N(this);\n  this.i = null;\n  a = O(this, a);\n  ad(this, a) && (this.h -= this.g.get(a).length);\n  this.g.set(a, [b]);\n  this.h += 1;\n  return this;\n};\nk.get = function (a, b) {\n  if (!a) return b;\n  a = this.Z(a);\n  return 0 < a.length ? String(a[0]) : b;\n};\nfunction kc(a, b, c) {\n  $c(a, b);\n  0 < c.length && (a.i = null, a.g.set(O(a, b), ma(c)), a.h += c.length);\n}\nk.toString = function () {\n  if (this.i) return this.i;\n  if (!this.g) return \"\";\n  const a = [],\n    b = Array.from(this.g.keys());\n  for (var c = 0; c < b.length; c++) {\n    var d = b[c];\n    const f = encodeURIComponent(String(d)),\n      h = this.Z(d);\n    for (d = 0; d < h.length; d++) {\n      var e = f;\n      \"\" !== h[d] && (e += \"=\" + encodeURIComponent(String(h[d])));\n      a.push(e);\n    }\n  }\n  return this.i = a.join(\"&\");\n};\nfunction O(a, b) {\n  b = String(b);\n  a.j && (b = b.toLowerCase());\n  return b;\n}\nfunction Xc(a, b) {\n  b && !a.j && (N(a), a.i = null, a.g.forEach(function (c, d) {\n    var e = d.toLowerCase();\n    d != e && ($c(this, d), kc(this, e, c));\n  }, a));\n  a.j = b;\n}\nvar bd = class {\n  constructor(a, b) {\n    this.g = a;\n    this.map = b;\n  }\n};\nfunction cd(a) {\n  this.l = a || dd;\n  l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType(\"navigation\"), a = 0 < a.length && (\"hq\" == a[0].nextHopProtocol || \"h2\" == a[0].nextHopProtocol)) : a = !!(l.g && l.g.Ka && l.g.Ka() && l.g.Ka().dc);\n  this.j = a ? this.l : 1;\n  this.g = null;\n  1 < this.j && (this.g = /* @__PURE__ */new Set());\n  this.h = null;\n  this.i = [];\n}\nvar dd = 10;\nfunction ed(a) {\n  return a.h ? true : a.g ? a.g.size >= a.j : false;\n}\nfunction Bc(a) {\n  return a.h ? 1 : a.g ? a.g.size : 0;\n}\nfunction xc(a, b) {\n  return a.h ? a.h == b : a.g ? a.g.has(b) : false;\n}\nfunction Cc(a, b) {\n  a.g ? a.g.add(b) : a.h = b;\n}\nfunction Ec(a, b) {\n  a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);\n}\ncd.prototype.cancel = function () {\n  this.i = fd(this);\n  if (this.h) this.h.cancel(), this.h = null;else if (this.g && 0 !== this.g.size) {\n    for (const a of this.g.values()) a.cancel();\n    this.g.clear();\n  }\n};\nfunction fd(a) {\n  if (null != a.h) return a.i.concat(a.h.F);\n  if (null != a.g && 0 !== a.g.size) {\n    let b = a.i;\n    for (const c of a.g.values()) b = b.concat(c.F);\n    return b;\n  }\n  return ma(a.i);\n}\nvar gd = class {\n  stringify(a) {\n    return l.JSON.stringify(a, void 0);\n  }\n  parse(a) {\n    return l.JSON.parse(a, void 0);\n  }\n};\nfunction hd() {\n  this.g = new gd();\n}\nfunction id(a, b, c) {\n  const d = c || \"\";\n  try {\n    Kc(a, function (e, f) {\n      let h = e;\n      p(e) && (h = jb(e));\n      b.push(d + f + \"=\" + encodeURIComponent(h));\n    });\n  } catch (e) {\n    throw b.push(d + \"type=\" + encodeURIComponent(\"_badmap\")), e;\n  }\n}\nfunction jd(a, b) {\n  const c = new Gb();\n  if (l.Image) {\n    const d = new Image();\n    d.onload = ha(kd, c, d, \"TestLoadImage: loaded\", true, b);\n    d.onerror = ha(kd, c, d, \"TestLoadImage: error\", false, b);\n    d.onabort = ha(kd, c, d, \"TestLoadImage: abort\", false, b);\n    d.ontimeout = ha(kd, c, d, \"TestLoadImage: timeout\", false, b);\n    l.setTimeout(function () {\n      if (d.ontimeout) d.ontimeout();\n    }, 1e4);\n    d.src = a;\n  } else b(false);\n}\nfunction kd(a, b, c, d, e) {\n  try {\n    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);\n  } catch (f) {}\n}\nfunction ld(a) {\n  this.l = a.ec || null;\n  this.j = a.ob || false;\n}\nr(ld, Ub);\nld.prototype.g = function () {\n  return new md(this.l, this.j);\n};\nld.prototype.i = function (a) {\n  return function () {\n    return a;\n  };\n}({});\nfunction md(a, b) {\n  B.call(this);\n  this.F = a;\n  this.u = b;\n  this.m = void 0;\n  this.readyState = nd;\n  this.status = 0;\n  this.responseType = this.responseText = this.response = this.statusText = \"\";\n  this.onreadystatechange = null;\n  this.v = new Headers();\n  this.h = null;\n  this.C = \"GET\";\n  this.B = \"\";\n  this.g = false;\n  this.A = this.j = this.l = null;\n}\nr(md, B);\nvar nd = 0;\nk = md.prototype;\nk.open = function (a, b) {\n  if (this.readyState != nd) throw this.abort(), Error(\"Error reopening a connection\");\n  this.C = a;\n  this.B = b;\n  this.readyState = 1;\n  od(this);\n};\nk.send = function (a) {\n  if (1 != this.readyState) throw this.abort(), Error(\"need to call open() first. \");\n  this.g = true;\n  const b = {\n    headers: this.v,\n    method: this.C,\n    credentials: this.m,\n    cache: void 0\n  };\n  a && (b.body = a);\n  (this.F || l).fetch(new Request(this.B, b)).then(this.$a.bind(this), this.ka.bind(this));\n};\nk.abort = function () {\n  this.response = this.responseText = \"\";\n  this.v = new Headers();\n  this.status = 0;\n  this.j && this.j.cancel(\"Request was aborted.\").catch(() => {});\n  1 <= this.readyState && this.g && 4 != this.readyState && (this.g = false, pd(this));\n  this.readyState = nd;\n};\nk.$a = function (a) {\n  if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, od(this)), this.g && (this.readyState = 3, od(this), this.g))) if (\"arraybuffer\" === this.responseType) a.arrayBuffer().then(this.Ya.bind(this), this.ka.bind(this));else if (\"undefined\" !== typeof l.ReadableStream && \"body\" in a) {\n    this.j = a.body.getReader();\n    if (this.u) {\n      if (this.responseType) throw Error('responseType must be empty for \"streamBinaryChunks\" mode responses.');\n      this.response = [];\n    } else this.response = this.responseText = \"\", this.A = new TextDecoder();\n    qd(this);\n  } else a.text().then(this.Za.bind(this), this.ka.bind(this));\n};\nfunction qd(a) {\n  a.j.read().then(a.Xa.bind(a)).catch(a.ka.bind(a));\n}\nk.Xa = function (a) {\n  if (this.g) {\n    if (this.u && a.value) this.response.push(a.value);else if (!this.u) {\n      var b = a.value ? a.value : new Uint8Array(0);\n      if (b = this.A.decode(b, {\n        stream: !a.done\n      })) this.response = this.responseText += b;\n    }\n    a.done ? pd(this) : od(this);\n    3 == this.readyState && qd(this);\n  }\n};\nk.Za = function (a) {\n  this.g && (this.response = this.responseText = a, pd(this));\n};\nk.Ya = function (a) {\n  this.g && (this.response = a, pd(this));\n};\nk.ka = function () {\n  this.g && pd(this);\n};\nfunction pd(a) {\n  a.readyState = 4;\n  a.l = null;\n  a.j = null;\n  a.A = null;\n  od(a);\n}\nk.setRequestHeader = function (a, b) {\n  this.v.append(a, b);\n};\nk.getResponseHeader = function (a) {\n  return this.h ? this.h.get(a.toLowerCase()) || \"\" : \"\";\n};\nk.getAllResponseHeaders = function () {\n  if (!this.h) return \"\";\n  const a = [],\n    b = this.h.entries();\n  for (var c = b.next(); !c.done;) c = c.value, a.push(c[0] + \": \" + c[1]), c = b.next();\n  return a.join(\"\\r\\n\");\n};\nfunction od(a) {\n  a.onreadystatechange && a.onreadystatechange.call(a);\n}\nObject.defineProperty(md.prototype, \"withCredentials\", {\n  get: function () {\n    return \"include\" === this.m;\n  },\n  set: function (a) {\n    this.m = a ? \"include\" : \"same-origin\";\n  }\n});\nvar rd = l.JSON.parse;\nfunction P(a) {\n  B.call(this);\n  this.headers = /* @__PURE__ */new Map();\n  this.u = a || null;\n  this.h = false;\n  this.C = this.g = null;\n  this.I = \"\";\n  this.m = 0;\n  this.j = \"\";\n  this.l = this.G = this.v = this.F = false;\n  this.B = 0;\n  this.A = null;\n  this.K = sd;\n  this.L = this.M = false;\n}\nr(P, B);\nvar sd = \"\",\n  td = /^https?$/i,\n  ud = [\"POST\", \"PUT\"];\nk = P.prototype;\nk.Oa = function (a) {\n  this.M = a;\n};\nk.ha = function (a, b, c, d) {\n  if (this.g) throw Error(\"[goog.net.XhrIo] Object is active with another request=\" + this.I + \"; newUri=\" + a);\n  b = b ? b.toUpperCase() : \"GET\";\n  this.I = a;\n  this.j = \"\";\n  this.m = 0;\n  this.F = false;\n  this.h = true;\n  this.g = this.u ? this.u.g() : $b.g();\n  this.C = this.u ? Vb(this.u) : Vb($b);\n  this.g.onreadystatechange = q(this.La, this);\n  try {\n    this.G = true, this.g.open(b, String(a), true), this.G = false;\n  } catch (f) {\n    vd(this, f);\n    return;\n  }\n  a = c || \"\";\n  c = new Map(this.headers);\n  if (d) if (Object.getPrototypeOf(d) === Object.prototype) for (var e in d) c.set(e, d[e]);else if (\"function\" === typeof d.keys && \"function\" === typeof d.get) for (const f of d.keys()) c.set(f, d.get(f));else throw Error(\"Unknown input type for opt_headers: \" + String(d));\n  d = Array.from(c.keys()).find(f => \"content-type\" == f.toLowerCase());\n  e = l.FormData && a instanceof l.FormData;\n  !(0 <= ka(ud, b)) || d || e || c.set(\"Content-Type\", \"application/x-www-form-urlencoded;charset=utf-8\");\n  for (const [f, h] of c) this.g.setRequestHeader(f, h);\n  this.K && (this.g.responseType = this.K);\n  \"withCredentials\" in this.g && this.g.withCredentials !== this.M && (this.g.withCredentials = this.M);\n  try {\n    wd(this), 0 < this.B && ((this.L = xd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q(this.ua, this)) : this.A = yb(this.ua, this.B, this)), this.v = true, this.g.send(a), this.v = false;\n  } catch (f) {\n    vd(this, f);\n  }\n};\nfunction xd(a) {\n  return z && \"number\" === typeof a.timeout && void 0 !== a.ontimeout;\n}\nk.ua = function () {\n  \"undefined\" != typeof goog && this.g && (this.j = \"Timed out after \" + this.B + \"ms, aborting\", this.m = 8, C(this, \"timeout\"), this.abort(8));\n};\nfunction vd(a, b) {\n  a.h = false;\n  a.g && (a.l = true, a.g.abort(), a.l = false);\n  a.j = b;\n  a.m = 5;\n  yd(a);\n  zd(a);\n}\nfunction yd(a) {\n  a.F || (a.F = true, C(a, \"complete\"), C(a, \"error\"));\n}\nk.abort = function (a) {\n  this.g && this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false, this.m = a || 7, C(this, \"complete\"), C(this, \"abort\"), zd(this));\n};\nk.N = function () {\n  this.g && (this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false), zd(this, true));\n  P.$.N.call(this);\n};\nk.La = function () {\n  this.s || (this.G || this.v || this.l ? Ad(this) : this.kb());\n};\nk.kb = function () {\n  Ad(this);\n};\nfunction Ad(a) {\n  if (a.h && \"undefined\" != typeof goog && (!a.C[1] || 4 != H(a) || 2 != a.da())) {\n    if (a.v && 4 == H(a)) yb(a.La, 0, a);else if (C(a, \"readystatechange\"), 4 == H(a)) {\n      a.h = false;\n      try {\n        const h = a.da();\n        a: switch (h) {\n          case 200:\n          case 201:\n          case 202:\n          case 204:\n          case 206:\n          case 304:\n          case 1223:\n            var b = true;\n            break a;\n          default:\n            b = false;\n        }\n        var c;\n        if (!(c = b)) {\n          var d;\n          if (d = 0 === h) {\n            var e = String(a.I).match(Lc)[1] || null;\n            !e && l.self && l.self.location && (e = l.self.location.protocol.slice(0, -1));\n            d = !td.test(e ? e.toLowerCase() : \"\");\n          }\n          c = d;\n        }\n        if (c) C(a, \"complete\"), C(a, \"success\");else {\n          a.m = 6;\n          try {\n            var f = 2 < H(a) ? a.g.statusText : \"\";\n          } catch (n) {\n            f = \"\";\n          }\n          a.j = f + \" [\" + a.da() + \"]\";\n          yd(a);\n        }\n      } finally {\n        zd(a);\n      }\n    }\n  }\n}\nfunction zd(a, b) {\n  if (a.g) {\n    wd(a);\n    const c = a.g,\n      d = a.C[0] ? () => {} : null;\n    a.g = null;\n    a.C = null;\n    b || C(a, \"ready\");\n    try {\n      c.onreadystatechange = d;\n    } catch (e) {}\n  }\n}\nfunction wd(a) {\n  a.g && a.L && (a.g.ontimeout = null);\n  a.A && (l.clearTimeout(a.A), a.A = null);\n}\nk.isActive = function () {\n  return !!this.g;\n};\nfunction H(a) {\n  return a.g ? a.g.readyState : 0;\n}\nk.da = function () {\n  try {\n    return 2 < H(this) ? this.g.status : -1;\n  } catch (a) {\n    return -1;\n  }\n};\nk.ja = function () {\n  try {\n    return this.g ? this.g.responseText : \"\";\n  } catch (a) {\n    return \"\";\n  }\n};\nk.Wa = function (a) {\n  if (this.g) {\n    var b = this.g.responseText;\n    a && 0 == b.indexOf(a) && (b = b.substring(a.length));\n    return rd(b);\n  }\n};\nfunction mc(a) {\n  try {\n    if (!a.g) return null;\n    if (\"response\" in a.g) return a.g.response;\n    switch (a.K) {\n      case sd:\n      case \"text\":\n        return a.g.responseText;\n      case \"arraybuffer\":\n        if (\"mozResponseArrayBuffer\" in a.g) return a.g.mozResponseArrayBuffer;\n    }\n    return null;\n  } catch (b) {\n    return null;\n  }\n}\nfunction tc(a) {\n  const b = {};\n  a = (a.g && 2 <= H(a) ? a.g.getAllResponseHeaders() || \"\" : \"\").split(\"\\r\\n\");\n  for (let d = 0; d < a.length; d++) {\n    if (x(a[d])) continue;\n    var c = qb(a[d]);\n    const e = c[0];\n    c = c[1];\n    if (\"string\" !== typeof c) continue;\n    c = c.trim();\n    const f = b[e] || [];\n    b[e] = f;\n    f.push(c);\n  }\n  Oa(b, function (d) {\n    return d.join(\", \");\n  });\n}\nk.Ia = function () {\n  return this.m;\n};\nk.Sa = function () {\n  return \"string\" === typeof this.j ? this.j : String(this.j);\n};\nfunction Bd(a) {\n  let b = \"\";\n  Na(a, function (c, d) {\n    b += d;\n    b += \":\";\n    b += c;\n    b += \"\\r\\n\";\n  });\n  return b;\n}\nfunction Cd(a, b, c) {\n  a: {\n    for (d in c) {\n      var d = false;\n      break a;\n    }\n    d = true;\n  }\n  d || (c = Bd(c), \"string\" === typeof a ? null != c && encodeURIComponent(String(c)) : K(a, b, c));\n}\nfunction Dd(a, b, c) {\n  return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;\n}\nfunction Ed(a) {\n  this.Ga = 0;\n  this.j = [];\n  this.l = new Gb();\n  this.pa = this.wa = this.I = this.Y = this.g = this.Da = this.F = this.na = this.o = this.U = this.s = null;\n  this.fb = this.W = 0;\n  this.cb = Dd(\"failFast\", false, a);\n  this.G = this.v = this.u = this.m = this.h = null;\n  this.aa = true;\n  this.Fa = this.V = -1;\n  this.ba = this.A = this.C = 0;\n  this.ab = Dd(\"baseRetryDelayMs\", 5e3, a);\n  this.hb = Dd(\"retryDelaySeedMs\", 1e4, a);\n  this.eb = Dd(\"forwardChannelMaxRetries\", 2, a);\n  this.xa = Dd(\"forwardChannelRequestTimeoutMs\", 2e4, a);\n  this.va = a && a.xmlHttpFactory || void 0;\n  this.Ha = a && a.useFetchStreams || false;\n  this.L = void 0;\n  this.J = a && a.supportsCrossDomainXhr || false;\n  this.K = \"\";\n  this.i = new cd(a && a.concurrentRequestLimit);\n  this.Ja = new hd();\n  this.P = a && a.fastHandshake || false;\n  this.O = a && a.encodeInitMessageHeaders || false;\n  this.P && this.O && (this.O = false);\n  this.bb = a && a.bc || false;\n  a && a.Ea && this.l.Ea();\n  a && a.forceLongPolling && (this.aa = false);\n  this.ca = !this.P && this.aa && a && a.detectBufferingProxy || false;\n  this.qa = void 0;\n  a && a.longPollingTimeout && 0 < a.longPollingTimeout && (this.qa = a.longPollingTimeout);\n  this.oa = void 0;\n  this.S = 0;\n  this.M = false;\n  this.ma = this.B = null;\n}\nk = Ed.prototype;\nk.ra = 8;\nk.H = 1;\nfunction Hc(a) {\n  Fd(a);\n  if (3 == a.H) {\n    var b = a.W++,\n      c = G(a.I);\n    K(c, \"SID\", a.K);\n    K(c, \"RID\", b);\n    K(c, \"TYPE\", \"terminate\");\n    Gd(a, c);\n    b = new bc(a, a.l, b);\n    b.L = 2;\n    b.v = hc(G(c));\n    c = false;\n    if (l.navigator && l.navigator.sendBeacon) try {\n      c = l.navigator.sendBeacon(b.v.toString(), \"\");\n    } catch (d) {}\n    !c && l.Image && (new Image().src = b.v, c = true);\n    c || (b.g = lc(b.l, null), b.g.ha(b.v));\n    b.G = Date.now();\n    jc(b);\n  }\n  Hd(a);\n}\nfunction zc(a) {\n  a.g && (vc(a), a.g.cancel(), a.g = null);\n}\nfunction Fd(a) {\n  zc(a);\n  a.u && (l.clearTimeout(a.u), a.u = null);\n  yc(a);\n  a.i.cancel();\n  a.m && (\"number\" === typeof a.m && l.clearTimeout(a.m), a.m = null);\n}\nfunction Gc(a) {\n  if (!ed(a.i) && !a.m) {\n    a.m = true;\n    var b = a.Na;\n    sb || vb();\n    tb || (sb(), tb = true);\n    mb.add(b, a);\n    a.C = 0;\n  }\n}\nfunction Id(a, b) {\n  if (Bc(a.i) >= a.i.j - (a.m ? 1 : 0)) return false;\n  if (a.m) return a.j = b.F.concat(a.j), true;\n  if (1 == a.H || 2 == a.H || a.C >= (a.cb ? 0 : a.eb)) return false;\n  a.m = Rb(q(a.Na, a, b), Jd(a, a.C));\n  a.C++;\n  return true;\n}\nk.Na = function (a) {\n  if (this.m) if (this.m = null, 1 == this.H) {\n    if (!a) {\n      this.W = Math.floor(1e5 * Math.random());\n      a = this.W++;\n      const e = new bc(this, this.l, a);\n      let f = this.s;\n      this.U && (f ? (f = Pa(f), Ra(f, this.U)) : f = this.U);\n      null !== this.o || this.O || (e.I = f, f = null);\n      if (this.P) a: {\n        var b = 0;\n        for (var c = 0; c < this.j.length; c++) {\n          b: {\n            var d = this.j[c];\n            if (\"__data__\" in d.map && (d = d.map.__data__, \"string\" === typeof d)) {\n              d = d.length;\n              break b;\n            }\n            d = void 0;\n          }\n          if (void 0 === d) break;\n          b += d;\n          if (4096 < b) {\n            b = c;\n            break a;\n          }\n          if (4096 === b || c === this.j.length - 1) {\n            b = c + 1;\n            break a;\n          }\n        }\n        b = 1e3;\n      } else b = 1e3;\n      b = Kd(this, e, b);\n      c = G(this.I);\n      K(c, \"RID\", a);\n      K(c, \"CVER\", 22);\n      this.F && K(c, \"X-HTTP-Session-Id\", this.F);\n      Gd(this, c);\n      f && (this.O ? b = \"headers=\" + encodeURIComponent(String(Bd(f))) + \"&\" + b : this.o && Cd(c, this.o, f));\n      Cc(this.i, e);\n      this.bb && K(c, \"TYPE\", \"init\");\n      this.P ? (K(c, \"$req\", b), K(c, \"SID\", \"null\"), e.aa = true, gc(e, c, null)) : gc(e, c, b);\n      this.H = 2;\n    }\n  } else 3 == this.H && (a ? Ld(this, a) : 0 == this.j.length || ed(this.i) || Ld(this));\n};\nfunction Ld(a, b) {\n  var c;\n  b ? c = b.m : c = a.W++;\n  const d = G(a.I);\n  K(d, \"SID\", a.K);\n  K(d, \"RID\", c);\n  K(d, \"AID\", a.V);\n  Gd(a, d);\n  a.o && a.s && Cd(d, a.o, a.s);\n  c = new bc(a, a.l, c, a.C + 1);\n  null === a.o && (c.I = a.s);\n  b && (a.j = b.F.concat(a.j));\n  b = Kd(a, c, 1e3);\n  c.setTimeout(Math.round(0.5 * a.xa) + Math.round(0.5 * a.xa * Math.random()));\n  Cc(a.i, c);\n  gc(c, d, b);\n}\nfunction Gd(a, b) {\n  a.na && Na(a.na, function (c, d) {\n    K(b, d, c);\n  });\n  a.h && Kc({}, function (c, d) {\n    K(b, d, c);\n  });\n}\nfunction Kd(a, b, c) {\n  c = Math.min(a.j.length, c);\n  var d = a.h ? q(a.h.Va, a.h, a) : null;\n  a: {\n    var e = a.j;\n    let f = -1;\n    for (;;) {\n      const h = [\"count=\" + c];\n      -1 == f ? 0 < c ? (f = e[0].g, h.push(\"ofs=\" + f)) : f = 0 : h.push(\"ofs=\" + f);\n      let n = true;\n      for (let t = 0; t < c; t++) {\n        let m = e[t].g;\n        const u = e[t].map;\n        m -= f;\n        if (0 > m) f = Math.max(0, e[t].g - 100), n = false;else try {\n          id(u, h, \"req\" + m + \"_\");\n        } catch (L) {\n          d && d(u);\n        }\n      }\n      if (n) {\n        d = h.join(\"&\");\n        break a;\n      }\n    }\n  }\n  a = a.j.splice(0, c);\n  b.F = a;\n  return d;\n}\nfunction Fc(a) {\n  if (!a.g && !a.u) {\n    a.ba = 1;\n    var b = a.Ma;\n    sb || vb();\n    tb || (sb(), tb = true);\n    mb.add(b, a);\n    a.A = 0;\n  }\n}\nfunction Ac(a) {\n  if (a.g || a.u || 3 <= a.A) return false;\n  a.ba++;\n  a.u = Rb(q(a.Ma, a), Jd(a, a.A));\n  a.A++;\n  return true;\n}\nk.Ma = function () {\n  this.u = null;\n  Md(this);\n  if (this.ca && !(this.M || null == this.g || 0 >= this.S)) {\n    var a = 2 * this.S;\n    this.l.info(\"BP detection timer enabled: \" + a);\n    this.B = Rb(q(this.jb, this), a);\n  }\n};\nk.jb = function () {\n  this.B && (this.B = null, this.l.info(\"BP detection timeout reached.\"), this.l.info(\"Buffering proxy detected and switch to long-polling!\"), this.G = false, this.M = true, F(10), zc(this), Md(this));\n};\nfunction vc(a) {\n  null != a.B && (l.clearTimeout(a.B), a.B = null);\n}\nfunction Md(a) {\n  a.g = new bc(a, a.l, \"rpc\", a.ba);\n  null === a.o && (a.g.I = a.s);\n  a.g.O = 0;\n  var b = G(a.wa);\n  K(b, \"RID\", \"rpc\");\n  K(b, \"SID\", a.K);\n  K(b, \"AID\", a.V);\n  K(b, \"CI\", a.G ? \"0\" : \"1\");\n  !a.G && a.qa && K(b, \"TO\", a.qa);\n  K(b, \"TYPE\", \"xmlhttp\");\n  Gd(a, b);\n  a.o && a.s && Cd(b, a.o, a.s);\n  a.L && a.g.setTimeout(a.L);\n  var c = a.g;\n  a = a.pa;\n  c.L = 1;\n  c.v = hc(G(b));\n  c.s = null;\n  c.S = true;\n  ic(c, a);\n}\nk.ib = function () {\n  null != this.v && (this.v = null, zc(this), Ac(this), F(19));\n};\nfunction yc(a) {\n  null != a.v && (l.clearTimeout(a.v), a.v = null);\n}\nfunction sc(a, b) {\n  var c = null;\n  if (a.g == b) {\n    yc(a);\n    vc(a);\n    a.g = null;\n    var d = 2;\n  } else if (xc(a.i, b)) c = b.F, Ec(a.i, b), d = 1;else return;\n  if (0 != a.H) {\n    if (b.i) {\n      if (1 == d) {\n        c = b.s ? b.s.length : 0;\n        b = Date.now() - b.G;\n        var e = a.C;\n        d = Mb();\n        C(d, new Qb(d, c));\n        Gc(a);\n      } else Fc(a);\n    } else if (e = b.o, 3 == e || 0 == e && 0 < b.ca || !(1 == d && Id(a, b) || 2 == d && Ac(a))) switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {\n      case 1:\n        J(a, 5);\n        break;\n      case 4:\n        J(a, 10);\n        break;\n      case 3:\n        J(a, 6);\n        break;\n      default:\n        J(a, 2);\n    }\n  }\n}\nfunction Jd(a, b) {\n  let c = a.ab + Math.floor(Math.random() * a.hb);\n  a.isActive() || (c *= 2);\n  return c * b;\n}\nfunction J(a, b) {\n  a.l.info(\"Error code \" + b);\n  if (2 == b) {\n    var c = null;\n    a.h && (c = null);\n    var d = q(a.pb, a);\n    c || (c = new M(\"//www.google.com/images/cleardot.gif\"), l.location && \"http\" == l.location.protocol || Nc(c, \"https\"), hc(c));\n    jd(c.toString(), d);\n  } else F(2);\n  a.H = 0;\n  a.h && a.h.za(b);\n  Hd(a);\n  Fd(a);\n}\nk.pb = function (a) {\n  a ? (this.l.info(\"Successfully pinged google.com\"), F(2)) : (this.l.info(\"Failed to ping google.com\"), F(1));\n};\nfunction Hd(a) {\n  a.H = 0;\n  a.ma = [];\n  if (a.h) {\n    const b = fd(a.i);\n    if (0 != b.length || 0 != a.j.length) na(a.ma, b), na(a.ma, a.j), a.i.i.length = 0, ma(a.j), a.j.length = 0;\n    a.h.ya();\n  }\n}\nfunction Dc(a, b, c) {\n  var d = c instanceof M ? G(c) : new M(c);\n  if (\"\" != d.g) b && (d.g = b + \".\" + d.g), Oc(d, d.m);else {\n    var e = l.location;\n    d = e.protocol;\n    b = b ? b + \".\" + e.hostname : e.hostname;\n    e = +e.port;\n    var f = new M(null);\n    d && Nc(f, d);\n    b && (f.g = b);\n    e && Oc(f, e);\n    c && (f.l = c);\n    d = f;\n  }\n  c = a.F;\n  b = a.Da;\n  c && b && K(d, c, b);\n  K(d, \"VER\", a.ra);\n  Gd(a, d);\n  return d;\n}\nfunction lc(a, b, c) {\n  if (b && !a.J) throw Error(\"Can't create secondary domain capable XhrIo object.\");\n  b = c && a.Ha && !a.va ? new P(new ld({\n    ob: true\n  })) : new P(a.va);\n  b.Oa(a.J);\n  return b;\n}\nk.isActive = function () {\n  return !!this.h && this.h.isActive(this);\n};\nfunction Nd() {}\nk = Nd.prototype;\nk.Ba = function () {};\nk.Aa = function () {};\nk.za = function () {};\nk.ya = function () {};\nk.isActive = function () {\n  return true;\n};\nk.Va = function () {};\nfunction Od() {\n  if (z && !(10 <= Number(Fa))) throw Error(\"Environmental error: no available transport.\");\n}\nOd.prototype.g = function (a, b) {\n  return new Q(a, b);\n};\nfunction Q(a, b) {\n  B.call(this);\n  this.g = new Ed(b);\n  this.l = a;\n  this.h = b && b.messageUrlParams || null;\n  a = b && b.messageHeaders || null;\n  b && b.clientProtocolHeaderRequired && (a ? a[\"X-Client-Protocol\"] = \"webchannel\" : a = {\n    \"X-Client-Protocol\": \"webchannel\"\n  });\n  this.g.s = a;\n  a = b && b.initMessageHeaders || null;\n  b && b.messageContentType && (a ? a[\"X-WebChannel-Content-Type\"] = b.messageContentType : a = {\n    \"X-WebChannel-Content-Type\": b.messageContentType\n  });\n  b && b.Ca && (a ? a[\"X-WebChannel-Client-Profile\"] = b.Ca : a = {\n    \"X-WebChannel-Client-Profile\": b.Ca\n  });\n  this.g.U = a;\n  (a = b && b.cc) && !x(a) && (this.g.o = a);\n  this.A = b && b.supportsCrossDomainXhr || false;\n  this.v = b && b.sendRawJson || false;\n  (b = b && b.httpSessionIdParam) && !x(b) && (this.g.F = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));\n  this.j = new R(this);\n}\nr(Q, B);\nQ.prototype.m = function () {\n  this.g.h = this.j;\n  this.A && (this.g.J = true);\n  var a = this.g,\n    b = this.l,\n    c = this.h || void 0;\n  F(0);\n  a.Y = b;\n  a.na = c || {};\n  a.G = a.aa;\n  a.I = Dc(a, null, a.Y);\n  Gc(a);\n};\nQ.prototype.close = function () {\n  Hc(this.g);\n};\nQ.prototype.u = function (a) {\n  var b = this.g;\n  if (\"string\" === typeof a) {\n    var c = {};\n    c.__data__ = a;\n    a = c;\n  } else this.v && (c = {}, c.__data__ = jb(a), a = c);\n  b.j.push(new bd(b.fb++, a));\n  3 == b.H && Gc(b);\n};\nQ.prototype.N = function () {\n  this.g.h = null;\n  delete this.j;\n  Hc(this.g);\n  delete this.g;\n  Q.$.N.call(this);\n};\nfunction Pd(a) {\n  Yb.call(this);\n  a.__headers__ && (this.headers = a.__headers__, this.statusCode = a.__status__, delete a.__headers__, delete a.__status__);\n  var b = a.__sm__;\n  if (b) {\n    a: {\n      for (const c in b) {\n        a = c;\n        break a;\n      }\n      a = void 0;\n    }\n    if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;\n    this.data = b;\n  } else this.data = a;\n}\nr(Pd, Yb);\nfunction Qd() {\n  Zb.call(this);\n  this.status = 1;\n}\nr(Qd, Zb);\nfunction R(a) {\n  this.g = a;\n}\nr(R, Nd);\nR.prototype.Ba = function () {\n  C(this.g, \"a\");\n};\nR.prototype.Aa = function (a) {\n  C(this.g, new Pd(a));\n};\nR.prototype.za = function (a) {\n  C(this.g, new Qd());\n};\nR.prototype.ya = function () {\n  C(this.g, \"b\");\n};\nfunction Rd() {\n  this.blockSize = -1;\n}\nfunction S() {\n  this.blockSize = -1;\n  this.blockSize = 64;\n  this.g = Array(4);\n  this.m = Array(this.blockSize);\n  this.i = this.h = 0;\n  this.reset();\n}\nr(S, Rd);\nS.prototype.reset = function () {\n  this.g[0] = 1732584193;\n  this.g[1] = 4023233417;\n  this.g[2] = 2562383102;\n  this.g[3] = 271733878;\n  this.i = this.h = 0;\n};\nfunction Sd(a, b, c) {\n  c || (c = 0);\n  var d = Array(16);\n  if (\"string\" === typeof b) for (var e = 0; 16 > e; ++e) d[e] = b.charCodeAt(c++) | b.charCodeAt(c++) << 8 | b.charCodeAt(c++) << 16 | b.charCodeAt(c++) << 24;else for (e = 0; 16 > e; ++e) d[e] = b[c++] | b[c++] << 8 | b[c++] << 16 | b[c++] << 24;\n  b = a.g[0];\n  c = a.g[1];\n  e = a.g[2];\n  var f = a.g[3];\n  var h = b + (f ^ c & (e ^ f)) + d[0] + 3614090360 & 4294967295;\n  b = c + (h << 7 & 4294967295 | h >>> 25);\n  h = f + (e ^ b & (c ^ e)) + d[1] + 3905402710 & 4294967295;\n  f = b + (h << 12 & 4294967295 | h >>> 20);\n  h = e + (c ^ f & (b ^ c)) + d[2] + 606105819 & 4294967295;\n  e = f + (h << 17 & 4294967295 | h >>> 15);\n  h = c + (b ^ e & (f ^ b)) + d[3] + 3250441966 & 4294967295;\n  c = e + (h << 22 & 4294967295 | h >>> 10);\n  h = b + (f ^ c & (e ^ f)) + d[4] + 4118548399 & 4294967295;\n  b = c + (h << 7 & 4294967295 | h >>> 25);\n  h = f + (e ^ b & (c ^ e)) + d[5] + 1200080426 & 4294967295;\n  f = b + (h << 12 & 4294967295 | h >>> 20);\n  h = e + (c ^ f & (b ^ c)) + d[6] + 2821735955 & 4294967295;\n  e = f + (h << 17 & 4294967295 | h >>> 15);\n  h = c + (b ^ e & (f ^ b)) + d[7] + 4249261313 & 4294967295;\n  c = e + (h << 22 & 4294967295 | h >>> 10);\n  h = b + (f ^ c & (e ^ f)) + d[8] + 1770035416 & 4294967295;\n  b = c + (h << 7 & 4294967295 | h >>> 25);\n  h = f + (e ^ b & (c ^ e)) + d[9] + 2336552879 & 4294967295;\n  f = b + (h << 12 & 4294967295 | h >>> 20);\n  h = e + (c ^ f & (b ^ c)) + d[10] + 4294925233 & 4294967295;\n  e = f + (h << 17 & 4294967295 | h >>> 15);\n  h = c + (b ^ e & (f ^ b)) + d[11] + 2304563134 & 4294967295;\n  c = e + (h << 22 & 4294967295 | h >>> 10);\n  h = b + (f ^ c & (e ^ f)) + d[12] + 1804603682 & 4294967295;\n  b = c + (h << 7 & 4294967295 | h >>> 25);\n  h = f + (e ^ b & (c ^ e)) + d[13] + 4254626195 & 4294967295;\n  f = b + (h << 12 & 4294967295 | h >>> 20);\n  h = e + (c ^ f & (b ^ c)) + d[14] + 2792965006 & 4294967295;\n  e = f + (h << 17 & 4294967295 | h >>> 15);\n  h = c + (b ^ e & (f ^ b)) + d[15] + 1236535329 & 4294967295;\n  c = e + (h << 22 & 4294967295 | h >>> 10);\n  h = b + (e ^ f & (c ^ e)) + d[1] + 4129170786 & 4294967295;\n  b = c + (h << 5 & 4294967295 | h >>> 27);\n  h = f + (c ^ e & (b ^ c)) + d[6] + 3225465664 & 4294967295;\n  f = b + (h << 9 & 4294967295 | h >>> 23);\n  h = e + (b ^ c & (f ^ b)) + d[11] + 643717713 & 4294967295;\n  e = f + (h << 14 & 4294967295 | h >>> 18);\n  h = c + (f ^ b & (e ^ f)) + d[0] + 3921069994 & 4294967295;\n  c = e + (h << 20 & 4294967295 | h >>> 12);\n  h = b + (e ^ f & (c ^ e)) + d[5] + 3593408605 & 4294967295;\n  b = c + (h << 5 & 4294967295 | h >>> 27);\n  h = f + (c ^ e & (b ^ c)) + d[10] + 38016083 & 4294967295;\n  f = b + (h << 9 & 4294967295 | h >>> 23);\n  h = e + (b ^ c & (f ^ b)) + d[15] + 3634488961 & 4294967295;\n  e = f + (h << 14 & 4294967295 | h >>> 18);\n  h = c + (f ^ b & (e ^ f)) + d[4] + 3889429448 & 4294967295;\n  c = e + (h << 20 & 4294967295 | h >>> 12);\n  h = b + (e ^ f & (c ^ e)) + d[9] + 568446438 & 4294967295;\n  b = c + (h << 5 & 4294967295 | h >>> 27);\n  h = f + (c ^ e & (b ^ c)) + d[14] + 3275163606 & 4294967295;\n  f = b + (h << 9 & 4294967295 | h >>> 23);\n  h = e + (b ^ c & (f ^ b)) + d[3] + 4107603335 & 4294967295;\n  e = f + (h << 14 & 4294967295 | h >>> 18);\n  h = c + (f ^ b & (e ^ f)) + d[8] + 1163531501 & 4294967295;\n  c = e + (h << 20 & 4294967295 | h >>> 12);\n  h = b + (e ^ f & (c ^ e)) + d[13] + 2850285829 & 4294967295;\n  b = c + (h << 5 & 4294967295 | h >>> 27);\n  h = f + (c ^ e & (b ^ c)) + d[2] + 4243563512 & 4294967295;\n  f = b + (h << 9 & 4294967295 | h >>> 23);\n  h = e + (b ^ c & (f ^ b)) + d[7] + 1735328473 & 4294967295;\n  e = f + (h << 14 & 4294967295 | h >>> 18);\n  h = c + (f ^ b & (e ^ f)) + d[12] + 2368359562 & 4294967295;\n  c = e + (h << 20 & 4294967295 | h >>> 12);\n  h = b + (c ^ e ^ f) + d[5] + 4294588738 & 4294967295;\n  b = c + (h << 4 & 4294967295 | h >>> 28);\n  h = f + (b ^ c ^ e) + d[8] + 2272392833 & 4294967295;\n  f = b + (h << 11 & 4294967295 | h >>> 21);\n  h = e + (f ^ b ^ c) + d[11] + 1839030562 & 4294967295;\n  e = f + (h << 16 & 4294967295 | h >>> 16);\n  h = c + (e ^ f ^ b) + d[14] + 4259657740 & 4294967295;\n  c = e + (h << 23 & 4294967295 | h >>> 9);\n  h = b + (c ^ e ^ f) + d[1] + 2763975236 & 4294967295;\n  b = c + (h << 4 & 4294967295 | h >>> 28);\n  h = f + (b ^ c ^ e) + d[4] + 1272893353 & 4294967295;\n  f = b + (h << 11 & 4294967295 | h >>> 21);\n  h = e + (f ^ b ^ c) + d[7] + 4139469664 & 4294967295;\n  e = f + (h << 16 & 4294967295 | h >>> 16);\n  h = c + (e ^ f ^ b) + d[10] + 3200236656 & 4294967295;\n  c = e + (h << 23 & 4294967295 | h >>> 9);\n  h = b + (c ^ e ^ f) + d[13] + 681279174 & 4294967295;\n  b = c + (h << 4 & 4294967295 | h >>> 28);\n  h = f + (b ^ c ^ e) + d[0] + 3936430074 & 4294967295;\n  f = b + (h << 11 & 4294967295 | h >>> 21);\n  h = e + (f ^ b ^ c) + d[3] + 3572445317 & 4294967295;\n  e = f + (h << 16 & 4294967295 | h >>> 16);\n  h = c + (e ^ f ^ b) + d[6] + 76029189 & 4294967295;\n  c = e + (h << 23 & 4294967295 | h >>> 9);\n  h = b + (c ^ e ^ f) + d[9] + 3654602809 & 4294967295;\n  b = c + (h << 4 & 4294967295 | h >>> 28);\n  h = f + (b ^ c ^ e) + d[12] + 3873151461 & 4294967295;\n  f = b + (h << 11 & 4294967295 | h >>> 21);\n  h = e + (f ^ b ^ c) + d[15] + 530742520 & 4294967295;\n  e = f + (h << 16 & 4294967295 | h >>> 16);\n  h = c + (e ^ f ^ b) + d[2] + 3299628645 & 4294967295;\n  c = e + (h << 23 & 4294967295 | h >>> 9);\n  h = b + (e ^ (c | ~f)) + d[0] + 4096336452 & 4294967295;\n  b = c + (h << 6 & 4294967295 | h >>> 26);\n  h = f + (c ^ (b | ~e)) + d[7] + 1126891415 & 4294967295;\n  f = b + (h << 10 & 4294967295 | h >>> 22);\n  h = e + (b ^ (f | ~c)) + d[14] + 2878612391 & 4294967295;\n  e = f + (h << 15 & 4294967295 | h >>> 17);\n  h = c + (f ^ (e | ~b)) + d[5] + 4237533241 & 4294967295;\n  c = e + (h << 21 & 4294967295 | h >>> 11);\n  h = b + (e ^ (c | ~f)) + d[12] + 1700485571 & 4294967295;\n  b = c + (h << 6 & 4294967295 | h >>> 26);\n  h = f + (c ^ (b | ~e)) + d[3] + 2399980690 & 4294967295;\n  f = b + (h << 10 & 4294967295 | h >>> 22);\n  h = e + (b ^ (f | ~c)) + d[10] + 4293915773 & 4294967295;\n  e = f + (h << 15 & 4294967295 | h >>> 17);\n  h = c + (f ^ (e | ~b)) + d[1] + 2240044497 & 4294967295;\n  c = e + (h << 21 & 4294967295 | h >>> 11);\n  h = b + (e ^ (c | ~f)) + d[8] + 1873313359 & 4294967295;\n  b = c + (h << 6 & 4294967295 | h >>> 26);\n  h = f + (c ^ (b | ~e)) + d[15] + 4264355552 & 4294967295;\n  f = b + (h << 10 & 4294967295 | h >>> 22);\n  h = e + (b ^ (f | ~c)) + d[6] + 2734768916 & 4294967295;\n  e = f + (h << 15 & 4294967295 | h >>> 17);\n  h = c + (f ^ (e | ~b)) + d[13] + 1309151649 & 4294967295;\n  c = e + (h << 21 & 4294967295 | h >>> 11);\n  h = b + (e ^ (c | ~f)) + d[4] + 4149444226 & 4294967295;\n  b = c + (h << 6 & 4294967295 | h >>> 26);\n  h = f + (c ^ (b | ~e)) + d[11] + 3174756917 & 4294967295;\n  f = b + (h << 10 & 4294967295 | h >>> 22);\n  h = e + (b ^ (f | ~c)) + d[2] + 718787259 & 4294967295;\n  e = f + (h << 15 & 4294967295 | h >>> 17);\n  h = c + (f ^ (e | ~b)) + d[9] + 3951481745 & 4294967295;\n  a.g[0] = a.g[0] + b & 4294967295;\n  a.g[1] = a.g[1] + (e + (h << 21 & 4294967295 | h >>> 11)) & 4294967295;\n  a.g[2] = a.g[2] + e & 4294967295;\n  a.g[3] = a.g[3] + f & 4294967295;\n}\nS.prototype.j = function (a, b) {\n  void 0 === b && (b = a.length);\n  for (var c = b - this.blockSize, d = this.m, e = this.h, f = 0; f < b;) {\n    if (0 == e) for (; f <= c;) Sd(this, a, f), f += this.blockSize;\n    if (\"string\" === typeof a) for (; f < b;) {\n      if (d[e++] = a.charCodeAt(f++), e == this.blockSize) {\n        Sd(this, d);\n        e = 0;\n        break;\n      }\n    } else for (; f < b;) if (d[e++] = a[f++], e == this.blockSize) {\n      Sd(this, d);\n      e = 0;\n      break;\n    }\n  }\n  this.h = e;\n  this.i += b;\n};\nS.prototype.l = function () {\n  var a = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);\n  a[0] = 128;\n  for (var b = 1; b < a.length - 8; ++b) a[b] = 0;\n  var c = 8 * this.i;\n  for (b = a.length - 8; b < a.length; ++b) a[b] = c & 255, c /= 256;\n  this.j(a);\n  a = Array(16);\n  for (b = c = 0; 4 > b; ++b) for (var d = 0; 32 > d; d += 8) a[c++] = this.g[b] >>> d & 255;\n  return a;\n};\nfunction T(a, b) {\n  this.h = b;\n  for (var c = [], d = true, e = a.length - 1; 0 <= e; e--) {\n    var f = a[e] | 0;\n    d && f == b || (c[e] = f, d = false);\n  }\n  this.g = c;\n}\nvar sa = {};\nfunction Td(a) {\n  return -128 <= a && 128 > a ? ra(a, function (b) {\n    return new T([b | 0], 0 > b ? -1 : 0);\n  }) : new T([a | 0], 0 > a ? -1 : 0);\n}\nfunction U(a) {\n  if (isNaN(a) || !isFinite(a)) return V;\n  if (0 > a) return W(U(-a));\n  for (var b = [], c = 1, d = 0; a >= c; d++) b[d] = a / c | 0, c *= Ud;\n  return new T(b, 0);\n}\nfunction Vd(a, b) {\n  if (0 == a.length) throw Error(\"number format error: empty string\");\n  b = b || 10;\n  if (2 > b || 36 < b) throw Error(\"radix out of range: \" + b);\n  if (\"-\" == a.charAt(0)) return W(Vd(a.substring(1), b));\n  if (0 <= a.indexOf(\"-\")) throw Error('number format error: interior \"-\" character');\n  for (var c = U(Math.pow(b, 8)), d = V, e = 0; e < a.length; e += 8) {\n    var f = Math.min(8, a.length - e),\n      h = parseInt(a.substring(e, e + f), b);\n    8 > f ? (f = U(Math.pow(b, f)), d = d.R(f).add(U(h))) : (d = d.R(c), d = d.add(U(h)));\n  }\n  return d;\n}\nvar Ud = 4294967296,\n  V = Td(0),\n  Wd = Td(1),\n  Xd = Td(16777216);\nk = T.prototype;\nk.ea = function () {\n  if (X(this)) return -W(this).ea();\n  for (var a = 0, b = 1, c = 0; c < this.g.length; c++) {\n    var d = this.D(c);\n    a += (0 <= d ? d : Ud + d) * b;\n    b *= Ud;\n  }\n  return a;\n};\nk.toString = function (a) {\n  a = a || 10;\n  if (2 > a || 36 < a) throw Error(\"radix out of range: \" + a);\n  if (Y(this)) return \"0\";\n  if (X(this)) return \"-\" + W(this).toString(a);\n  for (var b = U(Math.pow(a, 6)), c = this, d = \"\";;) {\n    var e = Yd(c, b).g;\n    c = Zd(c, e.R(b));\n    var f = ((0 < c.g.length ? c.g[0] : c.h) >>> 0).toString(a);\n    c = e;\n    if (Y(c)) return f + d;\n    for (; 6 > f.length;) f = \"0\" + f;\n    d = f + d;\n  }\n};\nk.D = function (a) {\n  return 0 > a ? 0 : a < this.g.length ? this.g[a] : this.h;\n};\nfunction Y(a) {\n  if (0 != a.h) return false;\n  for (var b = 0; b < a.g.length; b++) if (0 != a.g[b]) return false;\n  return true;\n}\nfunction X(a) {\n  return -1 == a.h;\n}\nk.X = function (a) {\n  a = Zd(this, a);\n  return X(a) ? -1 : Y(a) ? 0 : 1;\n};\nfunction W(a) {\n  for (var b = a.g.length, c = [], d = 0; d < b; d++) c[d] = ~a.g[d];\n  return new T(c, ~a.h).add(Wd);\n}\nk.abs = function () {\n  return X(this) ? W(this) : this;\n};\nk.add = function (a) {\n  for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0, e = 0; e <= b; e++) {\n    var f = d + (this.D(e) & 65535) + (a.D(e) & 65535),\n      h = (f >>> 16) + (this.D(e) >>> 16) + (a.D(e) >>> 16);\n    d = h >>> 16;\n    f &= 65535;\n    h &= 65535;\n    c[e] = h << 16 | f;\n  }\n  return new T(c, c[c.length - 1] & -2147483648 ? -1 : 0);\n};\nfunction Zd(a, b) {\n  return a.add(W(b));\n}\nk.R = function (a) {\n  if (Y(this) || Y(a)) return V;\n  if (X(this)) return X(a) ? W(this).R(W(a)) : W(W(this).R(a));\n  if (X(a)) return W(this.R(W(a)));\n  if (0 > this.X(Xd) && 0 > a.X(Xd)) return U(this.ea() * a.ea());\n  for (var b = this.g.length + a.g.length, c = [], d = 0; d < 2 * b; d++) c[d] = 0;\n  for (d = 0; d < this.g.length; d++) for (var e = 0; e < a.g.length; e++) {\n    var f = this.D(d) >>> 16,\n      h = this.D(d) & 65535,\n      n = a.D(e) >>> 16,\n      t = a.D(e) & 65535;\n    c[2 * d + 2 * e] += h * t;\n    $d(c, 2 * d + 2 * e);\n    c[2 * d + 2 * e + 1] += f * t;\n    $d(c, 2 * d + 2 * e + 1);\n    c[2 * d + 2 * e + 1] += h * n;\n    $d(c, 2 * d + 2 * e + 1);\n    c[2 * d + 2 * e + 2] += f * n;\n    $d(c, 2 * d + 2 * e + 2);\n  }\n  for (d = 0; d < b; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];\n  for (d = b; d < 2 * b; d++) c[d] = 0;\n  return new T(c, 0);\n};\nfunction $d(a, b) {\n  for (; (a[b] & 65535) != a[b];) a[b + 1] += a[b] >>> 16, a[b] &= 65535, b++;\n}\nfunction ae(a, b) {\n  this.g = a;\n  this.h = b;\n}\nfunction Yd(a, b) {\n  if (Y(b)) throw Error(\"division by zero\");\n  if (Y(a)) return new ae(V, V);\n  if (X(a)) return b = Yd(W(a), b), new ae(W(b.g), W(b.h));\n  if (X(b)) return b = Yd(a, W(b)), new ae(W(b.g), b.h);\n  if (30 < a.g.length) {\n    if (X(a) || X(b)) throw Error(\"slowDivide_ only works with positive integers.\");\n    for (var c = Wd, d = b; 0 >= d.X(a);) c = be(c), d = be(d);\n    var e = Z(c, 1),\n      f = Z(d, 1);\n    d = Z(d, 2);\n    for (c = Z(c, 2); !Y(d);) {\n      var h = f.add(d);\n      0 >= h.X(a) && (e = e.add(c), f = h);\n      d = Z(d, 1);\n      c = Z(c, 1);\n    }\n    b = Zd(a, e.R(b));\n    return new ae(e, b);\n  }\n  for (e = V; 0 <= a.X(b);) {\n    c = Math.max(1, Math.floor(a.ea() / b.ea()));\n    d = Math.ceil(Math.log(c) / Math.LN2);\n    d = 48 >= d ? 1 : Math.pow(2, d - 48);\n    f = U(c);\n    for (h = f.R(b); X(h) || 0 < h.X(a);) c -= d, f = U(c), h = f.R(b);\n    Y(f) && (f = Wd);\n    e = e.add(f);\n    a = Zd(a, h);\n  }\n  return new ae(e, a);\n}\nk.gb = function (a) {\n  return Yd(this, a).h;\n};\nk.and = function (a) {\n  for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++) c[d] = this.D(d) & a.D(d);\n  return new T(c, this.h & a.h);\n};\nk.or = function (a) {\n  for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++) c[d] = this.D(d) | a.D(d);\n  return new T(c, this.h | a.h);\n};\nk.xor = function (a) {\n  for (var b = Math.max(this.g.length, a.g.length), c = [], d = 0; d < b; d++) c[d] = this.D(d) ^ a.D(d);\n  return new T(c, this.h ^ a.h);\n};\nfunction be(a) {\n  for (var b = a.g.length + 1, c = [], d = 0; d < b; d++) c[d] = a.D(d) << 1 | a.D(d - 1) >>> 31;\n  return new T(c, a.h);\n}\nfunction Z(a, b) {\n  var c = b >> 5;\n  b %= 32;\n  for (var d = a.g.length - c, e = [], f = 0; f < d; f++) e[f] = 0 < b ? a.D(f + c) >>> b | a.D(f + c + 1) << 32 - b : a.D(f + c);\n  return new T(e, a.h);\n}\nOd.prototype.createWebChannel = Od.prototype.g;\nQ.prototype.send = Q.prototype.u;\nQ.prototype.open = Q.prototype.m;\nQ.prototype.close = Q.prototype.close;\nSb.NO_ERROR = 0;\nSb.TIMEOUT = 8;\nSb.HTTP_ERROR = 6;\nTb.COMPLETE = \"complete\";\nWb.EventType = Xb;\nXb.OPEN = \"a\";\nXb.CLOSE = \"b\";\nXb.ERROR = \"c\";\nXb.MESSAGE = \"d\";\nB.prototype.listen = B.prototype.O;\nP.prototype.listenOnce = P.prototype.P;\nP.prototype.getLastError = P.prototype.Sa;\nP.prototype.getLastErrorCode = P.prototype.Ia;\nP.prototype.getStatus = P.prototype.da;\nP.prototype.getResponseJson = P.prototype.Wa;\nP.prototype.getResponseText = P.prototype.ja;\nP.prototype.send = P.prototype.ha;\nP.prototype.setWithCredentials = P.prototype.Oa;\nS.prototype.digest = S.prototype.l;\nS.prototype.reset = S.prototype.reset;\nS.prototype.update = S.prototype.j;\nT.prototype.add = T.prototype.add;\nT.prototype.multiply = T.prototype.R;\nT.prototype.modulo = T.prototype.gb;\nT.prototype.compare = T.prototype.X;\nT.prototype.toNumber = T.prototype.ea;\nT.prototype.toString = T.prototype.toString;\nT.prototype.getBits = T.prototype.D;\nT.fromNumber = U;\nT.fromString = Vd;\nvar createWebChannelTransport = esm.createWebChannelTransport = function () {\n  return new Od();\n};\nvar getStatEventTarget = esm.getStatEventTarget = function () {\n  return Mb();\n};\nvar ErrorCode = esm.ErrorCode = Sb;\nvar EventType = esm.EventType = Tb;\nvar Event = esm.Event = E;\nvar Stat = esm.Stat = {\n  xb: 0,\n  Ab: 1,\n  Bb: 2,\n  Ub: 3,\n  Zb: 4,\n  Wb: 5,\n  Xb: 6,\n  Vb: 7,\n  Tb: 8,\n  Yb: 9,\n  PROXY: 10,\n  NOPROXY: 11,\n  Rb: 12,\n  Nb: 13,\n  Ob: 14,\n  Mb: 15,\n  Pb: 16,\n  Qb: 17,\n  tb: 18,\n  sb: 19,\n  ub: 20\n};\nvar FetchXmlHttpFactory = esm.FetchXmlHttpFactory = ld;\nvar WebChannel = esm.WebChannel = Wb;\nvar XhrIo = esm.XhrIo = P;\nvar Md5 = esm.Md5 = S;\nvar Integer = esm.Integer = T;\nvar Aa;\nvar Ba;\nvar Ca;\nvar Ea;\n\n// .beyond/uimport/@firebase/webchannel-wrapper.0.10.3.js\nvar webchannel_wrapper_0_10_3_default = esm;\n};\n\ncode(module, require);\n_exports(module.exports);\n}}});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","dependencies":[],"warnings":[]}