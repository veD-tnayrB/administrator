{"code":"System.register([], (_exports, _context) => {\n\nconst bimport = specifier => {\n\tconst dependencies = new Map([[\"idb\",\"7.1.1\"]]);\n\treturn globalThis.bimport(globalThis.bimport.resolve(specifier, dependencies));\n};\n\n\nvar dependencies = new Map();\nvar require = dependency => dependencies.get(dependency);\nreturn {\nsetters: [],\nexecute: function() {\n// Prevent esbuild from considering the context to be amd\nconst define = void 0;\nconst module = {};\n\nconst code = (module, require) => {\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// .beyond/uimport/idb.7.1.1.js\nvar idb_7_1_1_exports = {};\n__export(idb_7_1_1_exports, {\n  deleteDB: () => deleteDB,\n  openDB: () => openDB,\n  unwrap: () => unwrap,\n  wrap: () => wrap\n});\nmodule.exports = __toCommonJS(idb_7_1_1_exports);\n\n// node_modules/idb/build/wrap-idb-value.js\nvar instanceOfAny = (object, constructors) => constructors.some(c => object instanceof c);\nvar idbProxyableTypes;\nvar cursorAdvanceMethods;\nfunction getIdbProxyableTypes() {\n  return idbProxyableTypes || (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);\n}\nfunction getCursorAdvanceMethods() {\n  return cursorAdvanceMethods || (cursorAdvanceMethods = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);\n}\nvar cursorRequestMap = /* @__PURE__ */new WeakMap();\nvar transactionDoneMap = /* @__PURE__ */new WeakMap();\nvar transactionStoreNamesMap = /* @__PURE__ */new WeakMap();\nvar transformCache = /* @__PURE__ */new WeakMap();\nvar reverseTransformCache = /* @__PURE__ */new WeakMap();\nfunction promisifyRequest(request) {\n  const promise = new Promise((resolve, reject) => {\n    const unlisten = () => {\n      request.removeEventListener(\"success\", success);\n      request.removeEventListener(\"error\", error);\n    };\n    const success = () => {\n      resolve(wrap(request.result));\n      unlisten();\n    };\n    const error = () => {\n      reject(request.error);\n      unlisten();\n    };\n    request.addEventListener(\"success\", success);\n    request.addEventListener(\"error\", error);\n  });\n  promise.then(value => {\n    if (value instanceof IDBCursor) {\n      cursorRequestMap.set(value, request);\n    }\n  }).catch(() => {});\n  reverseTransformCache.set(promise, request);\n  return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n  if (transactionDoneMap.has(tx)) return;\n  const done = new Promise((resolve, reject) => {\n    const unlisten = () => {\n      tx.removeEventListener(\"complete\", complete);\n      tx.removeEventListener(\"error\", error);\n      tx.removeEventListener(\"abort\", error);\n    };\n    const complete = () => {\n      resolve();\n      unlisten();\n    };\n    const error = () => {\n      reject(tx.error || new DOMException(\"AbortError\", \"AbortError\"));\n      unlisten();\n    };\n    tx.addEventListener(\"complete\", complete);\n    tx.addEventListener(\"error\", error);\n    tx.addEventListener(\"abort\", error);\n  });\n  transactionDoneMap.set(tx, done);\n}\nvar idbProxyTraps = {\n  get(target, prop, receiver) {\n    if (target instanceof IDBTransaction) {\n      if (prop === \"done\") return transactionDoneMap.get(target);\n      if (prop === \"objectStoreNames\") {\n        return target.objectStoreNames || transactionStoreNamesMap.get(target);\n      }\n      if (prop === \"store\") {\n        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);\n      }\n    }\n    return wrap(target[prop]);\n  },\n  set(target, prop, value) {\n    target[prop] = value;\n    return true;\n  },\n  has(target, prop) {\n    if (target instanceof IDBTransaction && (prop === \"done\" || prop === \"store\")) {\n      return true;\n    }\n    return prop in target;\n  }\n};\nfunction replaceTraps(callback) {\n  idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n  if (func === IDBDatabase.prototype.transaction && !(\"objectStoreNames\" in IDBTransaction.prototype)) {\n    return function (storeNames, ...args) {\n      const tx = func.call(unwrap(this), storeNames, ...args);\n      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n      return wrap(tx);\n    };\n  }\n  if (getCursorAdvanceMethods().includes(func)) {\n    return function (...args) {\n      func.apply(unwrap(this), args);\n      return wrap(cursorRequestMap.get(this));\n    };\n  }\n  return function (...args) {\n    return wrap(func.apply(unwrap(this), args));\n  };\n}\nfunction transformCachableValue(value) {\n  if (typeof value === \"function\") return wrapFunction(value);\n  if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);\n  if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps);\n  return value;\n}\nfunction wrap(value) {\n  if (value instanceof IDBRequest) return promisifyRequest(value);\n  if (transformCache.has(value)) return transformCache.get(value);\n  const newValue = transformCachableValue(value);\n  if (newValue !== value) {\n    transformCache.set(value, newValue);\n    reverseTransformCache.set(newValue, value);\n  }\n  return newValue;\n}\nvar unwrap = value => reverseTransformCache.get(value);\n\n// node_modules/idb/build/index.js\nfunction openDB(name, version, {\n  blocked,\n  upgrade,\n  blocking,\n  terminated\n} = {}) {\n  const request = indexedDB.open(name, version);\n  const openPromise = wrap(request);\n  if (upgrade) {\n    request.addEventListener(\"upgradeneeded\", event => {\n      upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n    });\n  }\n  if (blocked) {\n    request.addEventListener(\"blocked\", event => blocked(event.oldVersion, event.newVersion, event));\n  }\n  openPromise.then(db => {\n    if (terminated) db.addEventListener(\"close\", () => terminated());\n    if (blocking) {\n      db.addEventListener(\"versionchange\", event => blocking(event.oldVersion, event.newVersion, event));\n    }\n  }).catch(() => {});\n  return openPromise;\n}\nfunction deleteDB(name, {\n  blocked\n} = {}) {\n  const request = indexedDB.deleteDatabase(name);\n  if (blocked) {\n    request.addEventListener(\"blocked\", event => blocked(event.oldVersion, event));\n  }\n  return wrap(request).then(() => void 0);\n}\nvar readMethods = [\"get\", \"getKey\", \"getAll\", \"getAllKeys\", \"count\"];\nvar writeMethods = [\"put\", \"add\", \"delete\", \"clear\"];\nvar cachedMethods = /* @__PURE__ */new Map();\nfunction getMethod(target, prop) {\n  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === \"string\")) {\n    return;\n  }\n  if (cachedMethods.get(prop)) return cachedMethods.get(prop);\n  const targetFuncName = prop.replace(/FromIndex$/, \"\");\n  const useIndex = prop !== targetFuncName;\n  const isWrite = writeMethods.includes(targetFuncName);\n  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) {\n    return;\n  }\n  const method = async function (storeName, ...args) {\n    const tx = this.transaction(storeName, isWrite ? \"readwrite\" : \"readonly\");\n    let target2 = tx.store;\n    if (useIndex) target2 = target2.index(args.shift());\n    return (await Promise.all([target2[targetFuncName](...args), isWrite && tx.done]))[0];\n  };\n  cachedMethods.set(prop, method);\n  return method;\n}\nreplaceTraps(oldTraps => ({\n  ...oldTraps,\n  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)\n}));\n};\n\ncode(module, require);\n_exports(module.exports);\n}}});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","dependencies":[],"warnings":[]}