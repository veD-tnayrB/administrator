/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/kernel/core';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
// api.ts
declare namespace ns_0 {
  import Events = __beyond_dep_ns_0.Events;
  export class Api extends Events {
    #private;
    get url(): any;
    get actions(): string[];
    get streamResponse(): string;
    get metadata(): any;
    constructor(url: any);
    action(method: string, route: string, specs?: object, header?: Record<string, string>): Promise<any>;
    getURL(route: string): string;
    bearer(bearer: any): this;
    get(route: string, specs?: object, header?: Record<string, string>): Promise<any>;
    post(route: string, specs: object, header?: Record<string, string>): Promise<any>;
    put(route: string, specs: object, header?: Record<string, string>): Promise<any>;
    delete(route: string, specs?: object, header?: Record<string, string>): Promise<any>;
    stream(route: string, specs?: object): Promise<any>;
  }
}


// jcall.ts
declare namespace ns_1 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  interface headers extends Record<string, string> {
    'Content-Type': string;
  }
  export class JCall extends ReactiveModel<JCall> {
    #private;
    get actions(): string[];
    get streamResponse(): string;
    bearer(bearer: string | undefined): this;
    constructor();
    getHeaders: (specs: any, multipart: any) => Headers;
    formData: (specs: Record<string, any>) => FormData;
    execute: (url: string, method?: string, params?: Record<string, any>, headersSpecs?: object, stream?: boolean, data?: FormData) => Promise<any>;
    stream: (url: string, params: object, headers?: headers) => Promise<any>;
    get: (url: string, params: object, headers: object) => Promise<any>;
    post: (url: string, params: object, headers?: headers) => Promise<any>;
    delete: (url: string, params: object, headers?: headers) => void;
    put: (url: string, params: object, headers?: headers) => Promise<any>;
  }
  export {};
}


// stream.ts
declare namespace ns_2 {
  type Metadata = {
    value: object | undefined;
    error?: string;
  } | undefined;
  export class Stream {
    #private;
    get metadata(): Metadata;
    get actions(): string[];
    get response(): string;
    constructor(parent: any);
    handleStart(chunk: string, response: string): string;
    handleEnd(chunk: string, response: string): string;
    execute(url: any, specs: any): Promise<unknown>;
  }
  export {};
}


export import Api = ns_0.Api;
export import JCall = ns_1.JCall;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };