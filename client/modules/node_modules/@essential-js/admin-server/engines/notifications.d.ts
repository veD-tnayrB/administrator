/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@essential-js/admin-server/db';
import * as __beyond_dep_ns_1 from '@essential-js/admin-server/helpers';
import * as __beyond_dep_ns_2 from 'firebase-admin/messaging';
import * as __beyond_dep_ns_3 from 'firebase-admin';
// cases/get.ts
declare namespace ns_0 {
  import DB = __beyond_dep_ns_0.DB;
  export interface IGet {
    id: string;
  }
  export class Get {
    static model: typeof DB.models.Notifications;
    static usersNotificationsModel: typeof DB.models.UsersProfiles;
    static profilesNotificationsModel: typeof DB.models.ProfilesNotifications;
    static execute: (params: {
      id: string;
    }) => Promise<{
      status: boolean;
      data: any;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// cases/launch.ts
declare namespace ns_1 {
  export interface ILaunch {
    id: string;
  }
  export class Launch {
    static execute: (params: ILaunch) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    static getNotification: ({
      id
    }: ILaunch) => Promise<{
      status: boolean;
      data: any;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    static getUsers: (notification: any) => Promise<{
      status: boolean;
      data: {};
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    static sendNotifications: (notification: any) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
}


// cases/load-history.ts
declare namespace ns_2 {
  import DB = __beyond_dep_ns_0.DB;
  export interface ILoadHistoryParams {
    userId: string;
  }
  export class LoadHistory {
    static model: typeof DB.models.SentNotifications;
    static notificationsModel: typeof DB.models.Notifications;
    static execute: (params: ILoadHistoryParams) => Promise<{
      status: boolean;
      data: {
        entries: any;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// cases/mark-as-read.ts
declare namespace ns_3 {
  import DB = __beyond_dep_ns_0.DB;
  export interface IMarkAsRead {
    userId: string;
    notificationsIds: string[];
  }
  export class MarkAsRead {
    static model: typeof DB.models.SentNotifications;
    static execute: ({
      userId,
      notificationsIds
    }: IMarkAsRead) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
}


// cases/publish.ts
declare namespace ns_4 {
  import DB = __beyond_dep_ns_0.DB;
  export interface IPublish {
    id: string;
    title: string;
    description: string;
    icon: string;
    status: string;
    profiles: string[];
    users: string[];
  }
  export class Publish {
    static model: typeof DB.models.Notifications;
    static usersNotificationsModel: typeof DB.models.UsersProfiles;
    static profilesNotificationsModel: typeof DB.models.ProfilesNotifications;
    static handleRelations: (notificationId: string, profiles: string[], users: string[], transaction: any) => Promise<void>;
    static create: <T>(params: IPublish, target: string) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    static update: <T>(params: IPublish, target: string) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
  }
}


// cases/send-programed.ts
declare namespace ns_5 {
  export class SendProgramed {
    static startListener(): void;
    static execute: () => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    static getDayNotifications: () => Promise<{
      status: boolean;
      data: any[];
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    static getUsers: (notifications: any) => Promise<{
      status: boolean;
      data: any[];
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    static sendNotifications: (notifications: any) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    static sendNotification: (notification: any, user: any) => Promise<void>;
  }
}


// index.ts
declare namespace ns_6 {
  import Manager = __beyond_dep_ns_1.Manager;
  import IPublish = ns_4.IPublish;
  import IGet = ns_0.IGet;
  import ILaunch = ns_1.ILaunch;
  import IMarkAsRead = ns_3.IMarkAsRead;
  import ILoadHistoryParams = ns_2.ILoadHistoryParams;
  export class NotificationsManager extends Manager<IPublish> {
    constructor();
    launch: (params: ILaunch) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    markAsRead: (params: IMarkAsRead) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    create: (params: IPublish) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    update: (params: IPublish) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    get: (params: IGet) => Promise<{
      status: boolean;
      data: any;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    loadHistory: (params: ILoadHistoryParams) => Promise<{
      status: boolean;
      data: {
        entries: any;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
  export const Notifications: NotificationsManager;
}


// library/logic/send.ts
declare namespace ns_7 {
  /**
   * Class representing the Send functionality.
   */
  export class Send {
    /**
     * Executes the sending of a message using Firebase Admin SDK.
     * @static
     * @async
     * @param {Object} message - The message object to be sent.
     * @returns {Promise<Object>} - A promise that resolves to an object containing either a data property (with the response) or an error property.
     */
    static execute: (message: any) => Promise<{
      status: boolean;
      data: string;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    static sendMultipleCast: (message: any) => Promise<{
      status: boolean;
      data: BatchResponse;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// library/logic/suscription.ts
declare namespace ns_8 {
  /**
   * Class representing the Subscriptions functionality.
   */
  export class Subscriptions {
    /**
     * Subscribes a list of tokens to a specific topic.
     * @static
     * @param {string[]} tokens - The list of tokens to subscribe.
     * @param {string} topic - The topic to subscribe the tokens to.
     * @returns {Object} - An object containing the status and data or error information.
     */
    static subscribe: (tokens: string[], topic: string) => {
      status: boolean;
      data: Promise<MessagingTopicManagementResponse>;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    };
    /**
     * Unsubscribes a list of tokens from a specific topic.
     * @static
     * @param {string[]} tokens - The list of tokens to unsubscribe.
     * @param {string} topic - The topic to unsubscribe the tokens from.
     * @returns {Object} - An object containing the status and data or error information.
     */
    static unsubscribe: (tokens: string[], topic: string) => {
      status: boolean;
      data: Promise<MessagingTopicManagementResponse>;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    };
  }
}


// library/notifier.library.ts
declare namespace ns_9 {
  import admin = __beyond_dep_ns_3;
  interface ICredentials {
    type: string;
    project_id: string;
    private_key_id: string;
    private_key: string;
    client_email: string;
    client_id: string;
    auth_uri: string;
    token_uri: string;
    auth_provider_x509_cert_url: string;
    client_x509_cert_url: string;
    universe_domain: string;
  }
  /**
   * Class representing a bridge for managing notifications.
   */
  export class NotifierBridge {
    #private;
    get app(): admin.app.App;
    constructor(credentials: ICredentials);
    /**
     * Sends a message using provided credentials.
     * @param {Object} message - The message to be sent.
     * @returns {Promise} - The result of the Send.execute function.
     */
    send(message: any): Promise<{
      status: boolean;
      data: string;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    sendMultipleCast(message: any): Promise<{
      status: boolean;
      data: BatchResponse;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    /**
     * Subscribes a list of tokens to a specified topic.
     * @param {string[]} tokens - An array of tokens to be subscribed.
     * @param {string} topic - The topic to which tokens should be subscribed.
     * @returns {Promise} - The result of the Suscriptions.subscribe function.
     */
    suscribeToTopic(tokens: string[], topic: string): Promise<{
      status: boolean;
      data: Promise<MessagingTopicManagementResponse>;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    /**
     * Unsubscribes a list of tokens to a specified topic.
     * @param {string[]} tokens - An array of tokens to be subscribed.
     * @param {string} topic - The topic to which tokens should be subscribed.
     * @returns {Promise} - The result of the Suscriptions.subscribe function.
     */
    unsuscribeToTopic(tokens: string[], topic: string): Promise<{
      status: boolean;
      data: Promise<MessagingTopicManagementResponse>;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
  export {};
}


// library/sender.ts
declare namespace ns_10 {
  import NotifierBridge = ns_9.NotifierBridge;
  export const sender: NotifierBridge;
}


export import SendProgramed = ns_5.SendProgramed;
export import Notifications = ns_6.Notifications;
export import NotifierBridge = ns_9.NotifierBridge;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };