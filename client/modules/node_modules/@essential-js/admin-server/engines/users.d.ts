/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'sequelize';
import * as __beyond_dep_ns_1 from '@essential-js/admin-server/db';
import * as __beyond_dep_ns_2 from '@essential-js/admin-server/helpers';
// cases/get-registered-users-by-month.ts
declare namespace ns_0 {
  import Model = __beyond_dep_ns_0.Model;
  export interface IGetRegisteredUsersByMonth {
    year: number;
  }
  interface IParams extends IGetRegisteredUsersByMonth {
    model: Model['_attributes'];
  }
  export const getRegisteredUsersByMonth: ({
    year,
    model
  }: IParams) => Promise<{
    status: boolean;
    data: {
      label: string;
      improved: string;
      value: number;
    }[];
    error?: undefined;
  } | {
    status: boolean;
    error: any;
    data?: undefined;
  }>;
  export {};
}


// cases/get.ts
declare namespace ns_1 {
  import DB = __beyond_dep_ns_1.DB;
  export interface IGetParams {
    id: string;
  }
  export class Get {
    static model: typeof DB.models.Users;
    static execute: (params: IGetParams) => Promise<{
      status: boolean;
      data: any;
      error?: undefined;
    } | {
      status: boolean;
      error: {
        message: any;
        target: string;
      };
      data?: undefined;
    }>;
  }
}


// cases/publish/index.ts
declare namespace ns_2 {
  import DB = __beyond_dep_ns_1.DB;
  export interface IPublishParams {
    id: string;
    active: boolean;
    password: string;
    email: string;
    lastNames: string;
    names: string;
    profiles: string[];
    profileImg: string;
  }
  export class Publish {
    static model: typeof DB.models.Users;
    static usersProfilesModel: typeof DB.models.UsersProfiles;
    static handleProfiles: (userId: string, profiles: string[], transaction: any) => Promise<void>;
    static handlePassword: (email: string, newPassword: string, names: string, lastNames: string) => Promise<{
      status: boolean;
      error?: undefined;
      password?: undefined;
    } | {
      status: boolean;
      error: string;
      password?: undefined;
    } | {
      status: boolean;
      password: string;
      error?: undefined;
    }>;
    static create: (params: IPublishParams, target: string) => Promise<{
      status: boolean;
      data: {
        id: any;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    static update: (params: IPublishParams, target: string) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
  }
}


// index.ts
declare namespace ns_3 {
  import Manager = __beyond_dep_ns_2.Manager;
  import IBulkImport = __beyond_dep_ns_2.IBulkImport;
  import IGetTemplate = __beyond_dep_ns_2.IGetTemplate;
  import IGenerateReport = __beyond_dep_ns_2.IGenerateReport;
  import IGetRegisteredUsersByMonth = ns_0.IGetRegisteredUsersByMonth;
  import IPublishParams = ns_2.IPublishParams;
  import IGetParams = ns_1.IGetParams;
  export class UsersManager extends Manager<IPublishParams> {
    #private;
    constructor();
    getRegisteredUsersByMonth: (params: IGetRegisteredUsersByMonth) => Promise<{
      status: boolean;
      data: {
        label: string;
        improved: string;
        value: number;
      }[];
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    bulkImport: (params: IBulkImport) => Promise<{
      status: boolean;
      data: any[];
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    generateReport: (params: IGenerateReport) => Promise<{
      status: boolean;
      data?: undefined;
      error?: undefined;
    } | {
      status: boolean;
      data: {
        pathFile: string;
        filename: string;
        pathname: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    getTemplate: (params: IGetTemplate) => Promise<{
      status: boolean;
      data: {
        pathFile: string;
        filename: string;
        pathname: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    create: (params: IPublishParams) => Promise<{
      status: boolean;
      data: {
        id: any;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    update: (params: IPublishParams) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    get: (params: IGetParams) => Promise<{
      status: boolean;
      data: any;
      error?: undefined;
    } | {
      status: boolean;
      error: {
        message: any;
        target: string;
      };
      data?: undefined;
    }>;
  }
  export const Users: UsersManager;
}


export import Users = ns_3.Users;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };