/************
Processor: ts
************/

import __beyond_dep_def_0 from 'react';
import * as __beyond_dep_ns_1 from '@essential-js/admin/components/modal';
import * as __beyond_dep_ns_2 from '@beyond-js/reactive/model';
import * as __beyond_dep_ns_3 from '@beyond-js/reactive/entities';
// components/empty.tsx
declare namespace ns_0 {
  import React = __beyond_dep_def_0;
  export const Empty: () => React.JSX.Element;
}


// components/list/header/bulk-remove-modal.tsx
declare namespace ns_1 {
  import React = __beyond_dep_def_0;
  interface IProps {
    onToggleDeleteModal: () => void;
  }
  export const BulkRemoveModal: ({
    onToggleDeleteModal
  }: IProps) => React.JSX.Element;
  export {};
}


// components/list/header/header.tsx
declare namespace ns_2 {
  import React = __beyond_dep_def_0;
  import IHeaderActionButton = ns_3.IHeaderActionButton;
  export interface IHeader {
    items: IHeaderItem;
    actions?: {
      edit?: IHeaderActionButton;
      remove?: IHeaderActionButton;
    };
  }
  interface IDefaultHeaderItem {
    label: string;
    name: string;
  }
  export type IHeaderItem = IDefaultHeaderItem[];
  interface IProps {
    items: IHeaderItem;
    bulkActions?: {
      remove: boolean;
    };
  }
  export const Header: (props: IProps) => React.JSX.Element;
  export {};
}


// components/list/header/remove-actions.tsx
declare namespace ns_3 {
  import React = __beyond_dep_def_0;
  export interface IHeaderActionButton extends React.HTMLAttributes<HTMLButtonElement> {
    to?: string;
  }
  export const RemoveAction: () => React.JSX.Element;
}


// components/list/list.tsx
declare namespace ns_4 {
  import React = __beyond_dep_def_0;
  import IRow = ns_6.IRow;
  import IModalAction = __beyond_dep_ns_1.IAction;
  export enum ItemActionType {
    EDIT = "edit",
    DELETE = "delete",
  }
  export interface IItemAction extends React.HTMLAttributes<HTMLButtonElement> {
    modal?: {
      title?: string;
      description?: string;
      close: IModalAction;
      confirm: IModalAction;
    };
    to?: string;
    type: ItemActionType;
  }
  interface IItemConfig {
    properties: string[];
    actions?: IItemAction[];
  }
  export interface IList {
    row?: React.ComponentType<IRow>;
    default?: boolean;
    itemsConfig: IItemConfig;
    isSelecteable?: boolean;
  }
  export const List: (props: IList) => React.JSX.Element;
  export {};
}


// components/list/pre-done-actions/delete.tsx
declare namespace ns_5 {
  import React = __beyond_dep_def_0;
  import IItemAction = ns_4.IItemAction;
  interface IProps {
    onClose: React.MouseEventHandler<HTMLButtonElement>;
    config: IItemAction;
    id: string;
  }
  export const DeleteModal: ({
    onClose,
    config,
    id
  }: IProps) => React.JSX.Element;
  export {};
}


// components/list/row.tsx
declare namespace ns_6 {
  import React = __beyond_dep_def_0;
  export interface IRow {
    item: Record<string, any>;
    index: number;
    propertiesToDisplay: string[];
    selectedItems?: Map<string, Record<string, any>>;
  }
  export const DefaultRow: ({
    index,
    item,
    propertiesToDisplay,
    selectedItems
  }: IRow) => React.JSX.Element;
}


// components/list/wrapper.tsx
declare namespace ns_7 {
  import React = __beyond_dep_def_0;
  export const ListContainer: () => React.JSX.Element;
}


// components/paginator/content.tsx
declare namespace ns_8 {
  import React = __beyond_dep_def_0;
  import IPaginator = ns_10.IPaginator;
  export const PaginatorContent: (props: IPaginator) => React.JSX.Element;
}


// components/paginator/length-handler.tsx
declare namespace ns_9 {
  import React = __beyond_dep_def_0;
  export interface ILengthHandler {
    options?: number[];
  }
  export const LengthHandler: (props: ILengthHandler) => React.JSX.Element;
}


// components/paginator/paginator.tsx
declare namespace ns_10 {
  import React = __beyond_dep_def_0;
  import ILengthHandler = ns_9.ILengthHandler;
  export interface IPaginator {
    texts?: {
      of: string;
    };
    lengthHandler?: ILengthHandler;
  }
  export const Paginator: (props: IPaginator) => React.JSX.Element;
}


// components/utility-bar/actions/actions.tsx
declare namespace ns_11 {
  import React = __beyond_dep_def_0;
  import ICreateAction = ns_14.ICreateAction;
  import IColumnSelector = ns_13.IColumnSelector;
  import IReports = ns_33.IReports;
  export type IActionsItems = React.ReactNode[];
  export interface IActions {
    customs?: IActionsItems;
    create?: ICreateAction;
    columnsSelector: IColumnSelector;
    reports?: IReports;
  }
  export const ActionsContainer: (props: IActions) => React.JSX.Element;
}


// components/utility-bar/actions/pre-done/column-selector/column-selector-toggler.tsx
declare namespace ns_12 {
  import React = __beyond_dep_def_0;
  import IColumnSelector = ns_13.IColumnSelector;
  export const ColumnSelectorToggler: (props: IColumnSelector) => React.JSX.Element;
}


// components/utility-bar/actions/pre-done/column-selector/column-selector.tsx
declare namespace ns_13 {
  import React = __beyond_dep_def_0;
  export interface IColumnSelector {
    label?: string;
    min?: {
      number: number;
      label: string;
    };
    max?: {
      number: number;
      label: string;
    };
    title?: string;
  }
  export const ColumnsSelector: (props: IColumnSelector) => React.JSX.Element | null;
}


// components/utility-bar/actions/pre-done/create.tsx
declare namespace ns_14 {
  import React = __beyond_dep_def_0;
  export interface ICreateAction extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    to?: string;
    label?: string;
  }
  export const CreateAction: ({
    to,
    label,
    ...props
  }: ICreateAction) => React.JSX.Element;
}


// components/utility-bar/searchbar/filters/filters-toggler.tsx
declare namespace ns_15 {
  import React = __beyond_dep_def_0;
  interface IProps {
    label?: string;
  }
  export const FiltersToggler: (props: IProps) => React.JSX.Element;
  export {};
}


// components/utility-bar/searchbar/filters/filters.tsx
declare namespace ns_16 {
  import React = __beyond_dep_def_0;
  export interface IFilter extends React.HTMLAttributes<HTMLInputElement> {
    label: string;
    name: string;
  }
  export interface IFilters {
    title?: string;
    label?: string;
    actions?: {
      apply: {
        label: string;
      };
      reset: {
        label: string;
      };
    };
  }
  export const FiltersSearch: (props: IFilters) => React.JSX.Element | null;
}


// components/utility-bar/searchbar/general.tsx
declare namespace ns_17 {
  import React = __beyond_dep_def_0;
  import ISearchbar = ns_18.ISearchbar;
  export const GeneralSearchbar: (props: ISearchbar) => React.JSX.Element;
}


// components/utility-bar/searchbar/searchbar.tsx
declare namespace ns_18 {
  import React = __beyond_dep_def_0;
  import IFilters = ns_16.IFilters;
  export interface ISearchbar extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLInputElement>, HTMLInputElement> {
    filters?: IFilters;
    placeholder?: string;
  }
  export const Searchbar: (props: ISearchbar) => React.JSX.Element;
}


// components/utility-bar/utility-bar.tsx
declare namespace ns_19 {
  import React = __beyond_dep_def_0;
  export const Utilitybar: () => React.JSX.Element;
}


// components/view-header.tsx
declare namespace ns_20 {
  import React = __beyond_dep_def_0;
  export interface IViewHeader {
    title: string;
  }
  export const ViewHeader: ({
    title
  }: IViewHeader) => React.JSX.Element;
}


// context.ts
declare namespace ns_21 {
  import React = __beyond_dep_def_0;
  import StoreListView = ns_37.StoreListView;
  import IList = ns_4.IList;
  import IHeader = ns_2.IHeader;
  import ISearchbar = ns_18.ISearchbar;
  import IActions = ns_11.IActions;
  export interface IContext {
    store: StoreListView;
    itemsProperties: string[];
    list: IList;
    header?: IHeader;
    searchbar?: ISearchbar;
    actions?: IActions;
  }
  export const ListViewContext: React.Context<IContext>;
  export const useListViewContext: () => IContext;
}


// initialize-hook.ts
declare namespace ns_22 {
  import IListViewProps = ns_23.IListViewProps;
  export const useInitialize: (props: IListViewProps) => void;
}


// list-view.component.tsx
declare namespace ns_23 {
  import React = __beyond_dep_def_0;
  import IList = ns_4.IList;
  import StoreListView = ns_37.StoreListView;
  import IHeader = ns_2.IHeader;
  import IPaginator = ns_10.IPaginator;
  import ISearchbar = ns_18.ISearchbar;
  import IActions = ns_11.IActions;
  import IViewHeader = ns_20.IViewHeader;
  export interface IListViewProps extends React.HTMLAttributes<HTMLElement> {
    store: StoreListView;
    viewHeader?: IViewHeader;
    searchbar?: ISearchbar;
    list: IList;
    header?: IHeader;
    paginator?: IPaginator;
    actions?: IActions;
    plugins?: string[] | undefined;
  }
  export const ListView: (props: IListViewProps) => React.JSX.Element;
}


// loading.tsx
declare namespace ns_24 {
  import React = __beyond_dep_def_0;
  export const Loading: () => React.JSX.Element;
}


// plugins/reports/components/reports/download-template/download-templates.tsx
declare namespace ns_25 {
  import React = __beyond_dep_def_0;
  export const DownloadTemplate: () => React.JSX.Element;
}


// plugins/reports/components/reports/download-template/template-csv.tsx
declare namespace ns_26 {
  import React = __beyond_dep_def_0;
  export interface ITemplate {
    label?: string;
    onClick?: Function;
  }
  export const TemplateCSV: (props: ITemplate) => React.JSX.Element;
}


// plugins/reports/components/reports/download-template/template-excel.tsx
declare namespace ns_27 {
  import React = __beyond_dep_def_0;
  export interface ITemplate {
    label?: string;
    onClick?: Function;
  }
  export const TemplateExcel: (props: ITemplate) => React.JSX.Element;
}


// plugins/reports/components/reports/generate/generate-csv.tsx
declare namespace ns_28 {
  import React = __beyond_dep_def_0;
  export interface IGenerateReport {
    label?: string;
    onClick?: Function;
  }
  export const GenerateCSV: (props: IGenerateReport) => React.JSX.Element;
}


// plugins/reports/components/reports/generate/generate-excel.tsx
declare namespace ns_29 {
  import React = __beyond_dep_def_0;
  export interface IGenerateReport {
    label?: string;
    onClick?: Function;
  }
  export const GenerateExcel: (props: IGenerateReport) => React.JSX.Element;
}


// plugins/reports/components/reports/generate/generate-reports.tsx
declare namespace ns_30 {
  import React = __beyond_dep_def_0;
  export const GenerateReports: () => React.JSX.Element;
}


// plugins/reports/components/reports/import-container.tsx
declare namespace ns_31 {
  import React = __beyond_dep_def_0;
  import IActions = ns_11.IActions;
  export const ImportContainer: (props: IActions) => React.JSX.Element | null;
}


// plugins/reports/components/reports/import/import.tsx
declare namespace ns_32 {
  import React = __beyond_dep_def_0;
  export interface IImport {
    label?: string;
  }
  export const Import: (props: IImport) => React.JSX.Element;
}


// plugins/reports/components/reports/index.tsx
declare namespace ns_33 {
  import React = __beyond_dep_def_0;
  import IActions = ns_11.IActions;
  import IGenerateReport = ns_28.IGenerateReport;
  import IImport = ns_32.IImport;
  import ITemplate = ns_26.ITemplate;
  export interface IReports {
    generateReport: {
      excel?: IGenerateReport;
      csv?: IGenerateReport;
    } | undefined;
    import: IImport | undefined;
    downloadTemplate: {
      excel?: ITemplate;
      csv?: ITemplate;
    } | undefined;
  }
  export const ReportsComponents: (props: IActions) => React.JSX.Element | null;
}


// plugins/reports/components/reports/reports-container.tsx
declare namespace ns_34 {
  import React = __beyond_dep_def_0;
  import IActions = ns_11.IActions;
  export const ReportsContainer: (props: IActions) => React.JSX.Element | null;
}


// plugins/reports/components/reports/templates-container.tsx
declare namespace ns_35 {
  import React = __beyond_dep_def_0;
  import IActions = ns_11.IActions;
  export const TemplatesContainer: (props: IActions) => React.JSX.Element | null;
}


// plugins/reports/manager.ts
declare namespace ns_36 {
  import StoreListView = ns_37.StoreListView;
  export class Reports {
    #private;
    toExpose: string[];
    constructor(parent: StoreListView);
    bulkRemove: () => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    }>;
    import: (file: File) => Promise<any>;
    getTemplate: ({
      type
    }: {
      type: 'xlsx' | 'csv';
    }) => Promise<unknown>;
    generateReport: ({
      header,
      type
    }: {
      header: {
        label: string;
        name: string;
      }[];
      type: 'xlsx' | 'csv';
    }) => Promise<unknown>;
  }
}


// store-prototype.ts
declare namespace ns_37 {
  import ReactiveModel = __beyond_dep_ns_2.ReactiveModel;
  import Collection = __beyond_dep_ns_3.Collection;
  import IFilter = ns_16.IFilter;
  export abstract class StoreListView extends ReactiveModel<StoreListView> {
    #private;
    get id(): string;
    get collection(): Collection;
    get items(): any[];
    get selectedItems(): Map<string, Record<string, any>>;
    set selectedItems(value: Map<string, Record<string, any>>);
    get isAllPageSelected(): boolean;
    get limit(): number;
    specificFilters: IFilter[];
    generalFilters: string[];
    get propertiesDisplaying(): string[];
    set propertiesDisplaying(properties: string[]);
    get currentPage(): number;
    get totalPages(): number;
    get params(): Record<string, any>;
    set params(params: Record<string, any>);
    get plugins(): string[];
    set plugins(value: string[]);
    get initalizedPlugins(): Map<any, any>;
    constructor({
      collection,
      id
    }: {
      collection: Collection;
      id: string;
    });
    load: (params?: Record<string, any>) => Promise<void>;
    search: (search: string | {
      [key: string]: unknown;
    }) => Promise<void>;
    clearSearch: () => Promise<void>;
    onNext: () => void;
    onLastPage: () => void;
    onPrev: () => void;
    onFirstPage: () => void;
    onLengthChange: (length: number) => void;
    remove: (params: {
      id: string;
    }) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    }>;
    selectItem: ({
      id
    }: {
      id: string;
    }) => void;
    selectAllItems: () => void;
    resetAll: () => void;
  }
}


export import ItemActionType = ns_4.ItemActionType;
export import IItemAction = ns_4.IItemAction;
export import IRow = ns_6.IRow;
export import useListViewContext = ns_21.useListViewContext;
export import IListViewProps = ns_23.IListViewProps;
export import ListView = ns_23.ListView;
export import StoreListView = ns_37.StoreListView;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };