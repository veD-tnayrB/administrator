/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@bgroup/http-suite/api';
import * as __beyond_dep_ns_1 from 'react';
// api/api.helper.ts
declare namespace ns_0 {
  import BaseApi = __beyond_dep_ns_0.Api;
  export class Api extends BaseApi {
    #private;
    constructor(url?: string);
    private handleSpecificError;
    private handleResponse;
    get(url: string): Promise<any>;
    post(url: string, data?: object): Promise<any>;
    put(url: string, data?: object): Promise<any>;
    delete(url: string, data?: object): Promise<any>;
    stream(url: string): Promise<any>;
  }
}


// hooks/get-permissions/index.ts
declare namespace ns_1 {
  type Permissions = Map<string, Record<string, string>>;
  export function usePermissions(): Permissions;
  export {};
}


// hooks/get-permissions/map-permissions.ts
declare namespace ns_2 {
  export const mapPermissions: (flatPermissions: Record<string, string>[]) => Map<string, Record<string, string>>;
}


// hooks/use-check-permissions.ts
declare namespace ns_3 {
  export const useCheckPermissions: () => boolean;
}


// hooks/use-texts.ts
declare namespace ns_4 {
  import Context = __beyond_dep_ns_1.Context;
  interface IDocsValue {
    ready?: boolean;
    texts?: object;
  }
  type UseText<T> = [ready: boolean, texts?: T];
  export const DocsContext: Context<IDocsValue>;
  export const useDocsContext: () => IDocsValue;
  /**
   * It returns a boolean and an object. The boolean is true when the object is ready.
   * The object is a collection of strings.
   * @param {string} moduleId - string - the module id of the texts you want to use
   * @returns An array of two elements. The first element is a boolean, the second element is an object.
   */
  export function useTexts<T>(moduleId: string): UseText<T>;
  export {};
}


// providers/collection.provider.ts
declare namespace ns_5 {
  import Api = ns_0.Api;
  export abstract class CollectionProvider {
    #private;
    get api(): Api;
    get endpoints(): {
      list: string;
    };
    constructor(params: {
      endpoints: {
        list: string;
      };
    });
    list: (params: any) => Promise<any>;
  }
}


// providers/item.provider.ts
declare namespace ns_6 {
  import Api = ns_0.Api;
  interface IItemEndpoints {
    publish: string;
    get: string;
    delete: string;
  }
  export abstract class ItemProvider {
    #private;
    get api(): Api;
    constructor(params: {
      endpoints: IItemEndpoints;
    });
    publish: (params: {
      id: string;
      isNew: boolean;
      instanceId: number;
      userId: number;
      comment: string;
      timeCreated: string;
      timeUpdated: string;
    }) => Promise<any>;
    data: (params: any) => Promise<any>;
    delete: (id: string) => Promise<any>;
  }
  export {};
}


export import Api = ns_0.Api;
export import usePermissions = ns_1.usePermissions;
export import useCheckPermissions = ns_3.useCheckPermissions;
export import DocsContext = ns_4.DocsContext;
export import useDocsContext = ns_4.useDocsContext;
export import useTexts = ns_4.useTexts;
export import CollectionProvider = ns_5.CollectionProvider;
export import ItemProvider = ns_6.ItemProvider;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };