/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'react';
// get-permissions/index.ts
declare namespace ns_0 {
  type Permissions = Map<string, Record<string, string>>;
  export function usePermissions(): Permissions;
  export {};
}


// get-permissions/map-permissions.ts
declare namespace ns_1 {
  export const mapPermissions: (flatPermissions: Record<string, string>[]) => Map<string, Record<string, string>>;
}


// use-check-permissions.ts
declare namespace ns_2 {
  export const useCheckPermissions: () => boolean;
}


// use-texts.ts
declare namespace ns_3 {
  import Context = __beyond_dep_ns_0.Context;
  interface IDocsValue {
    ready?: boolean;
    texts?: object;
  }
  type UseText<T> = [ready: boolean, texts?: T];
  export const DocsContext: Context<IDocsValue>;
  export const useDocsContext: () => IDocsValue;
  /**
   * It returns a boolean and an object. The boolean is true when the object is ready.
   * The object is a collection of strings.
   * @param {string} moduleId - string - the module id of the texts you want to use
   * @returns An array of two elements. The first element is a boolean, the second element is an object.
   */
  export function useTexts<T>(moduleId: string): UseText<T>;
  export {};
}


export import usePermissions = ns_0.usePermissions;
export import useCheckPermissions = ns_2.useCheckPermissions;
export import DocsContext = ns_3.DocsContext;
export import useDocsContext = ns_3.useDocsContext;
export import useTexts = ns_3.useTexts;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };