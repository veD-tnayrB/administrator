/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/entities';
import * as __beyond_dep_ns_1 from '@essential-js/admin/helpers';
// entities/modules/modules.collection.ts
declare namespace ns_0 {
  import Collection = __beyond_dep_ns_0.Collection;
  export class Modules extends Collection {
    constructor();
  }
}


// entities/modules/modules.item.ts
declare namespace ns_1 {
  import Item = __beyond_dep_ns_0.Item;
  export interface IAction {
    id: string;
    name: string;
    description: string;
  }
  export interface IPermission {
    actionId: string;
    actionName: string;
    moduleId: string;
    moduleTo: string;
  }
  export interface IModule {
    id: string;
    isNew: boolean;
    label: string;
    to: string;
    icon: string;
    timeCreated: Date;
    timeUpdated: Date;
    active: boolean;
    order: number;
    actions: IAction[];
  }
  export class Module extends Item<IModule> {
    protected properties: string[];
    constructor(params?: {
      id?: string;
    });
  }
}


// entities/notifications-history/notification-history.item.ts
declare namespace ns_2 {
  import Item = __beyond_dep_ns_0.Item;
  import INotification = ns_4.INotification;
  export enum NotificationHistoryStatus {
    Sent = "sent",
    Read = "read",
    Failed = "failed",
  }
  export interface INotificationHistory {
    id: string;
    isNew: boolean;
    notificationId: string;
    userId: string;
    notification: INotification;
    timeSent: Date;
    status: NotificationHistoryStatus;
  }
  export class NotificationHistory extends Item<INotificationHistory> {
    protected properties: string[];
    id: string;
    get formatedFrecuency(): any;
    constructor(params?: {
      id?: string | undefined;
    });
  }
}


// entities/notifications-history/notifications-history.collection.ts
declare namespace ns_3 {
  import Collection = __beyond_dep_ns_0.Collection;
  export class NotificationsHistory extends Collection {
    constructor();
    markAsRead: (params: {
      ids: string[];
      userId: string;
    }) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    } | undefined>;
  }
}


// entities/notifications/notification.item.ts
declare namespace ns_4 {
  import Item = __beyond_dep_ns_0.Item;
  import IUser = ns_8.IUser;
  import IProfile = ns_6.IProfile;
  export interface INotification {
    id: string;
    isNew: boolean;
    title: string;
    description: string;
    icon: string;
    status: string;
    timeCreated: Date;
    timeUpdated: Date;
    users: IUser[];
    profiles: IProfile[];
    endDate: string;
    frecuency: string[];
  }
  export class Notification extends Item<INotification> {
    protected properties: string[];
    get formatedFrecuency(): any;
    constructor(params?: {
      id?: string | undefined;
    });
    launch: () => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    }>;
    markAsRead: ({
      userId
    }: {
      userId: string;
    }) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    }>;
  }
}


// entities/notifications/notifications.collection.ts
declare namespace ns_5 {
  import Collection = __beyond_dep_ns_0.Collection;
  export class Notifications extends Collection {
    constructor();
  }
}


// entities/profiles/profile.item.ts
declare namespace ns_6 {
  import Item = __beyond_dep_ns_0.Item;
  import IModule = ns_1.IModule;
  import IWidget = ns_10.IWidget;
  export interface IProfile {
    id: string;
    isNew: boolean;
    name: string;
    description: string;
    timeCreated: Date;
    timeUpdated: Date;
    modules: IModule[];
    widgets: IWidget[];
    active: boolean;
  }
  export class Profile extends Item<IProfile> {
    protected properties: string[];
    constructor(params?: {
      id?: string | undefined;
    });
  }
}


// entities/profiles/profiles.collection.ts
declare namespace ns_7 {
  import Collection = __beyond_dep_ns_0.Collection;
  export class Profiles extends Collection {
    constructor();
    generateReport: (params: {
      header: {
        label: string;
        name: string;
      }[];
      type: 'xlsx' | 'csv';
      params: {
        [key: string]: any;
      };
    }) => Promise<unknown>;
    getTemplate: (params: {
      type: 'xlsx' | 'csv';
    }) => Promise<unknown>;
    import: (params: {
      file: File;
    }) => Promise<unknown>;
  }
}


// entities/users/user.item.ts
declare namespace ns_8 {
  import Item = __beyond_dep_ns_0.Item;
  export interface IUser {
    id: string;
    isNew: boolean;
    active: boolean;
    email: string;
    lastNames: string;
    profiles: string[];
    names: string;
    profileImg: string;
    timeCreated: Date;
    timeUpdated: Date;
  }
  export class User extends Item<IUser> {
    protected properties: string[];
    get fullName(): any;
    constructor(params?: {
      id?: string | undefined;
    });
    login: (params: {
      email: string;
      password?: string;
    }) => Promise<any>;
  }
}


// entities/users/users.collection.ts
declare namespace ns_9 {
  import Collection = __beyond_dep_ns_0.Collection;
  export class Users extends Collection {
    constructor();
    getRegisteredUsersByMonth: (params: {
      year: number;
    }) => Promise<any>;
    generateReport: (params: {
      header: {
        label: string;
        name: string;
      }[];
      type: 'xlsx' | 'csv';
      params: {
        [key: string]: any;
      };
    }) => Promise<unknown>;
    getTemplate: (params: {
      type: 'xlsx' | 'csv';
    }) => Promise<unknown>;
    import: (params: {
      file: File;
    }) => Promise<unknown>;
  }
}


// entities/widgets/widget.item.ts
declare namespace ns_10 {
  import Item = __beyond_dep_ns_0.Item;
  export interface IWidget {
    id: string;
    isNew: boolean;
    active: boolean;
    identifier: string;
    metadata: string;
    order: number;
    width: number;
    columnPosition?: number;
    rowPosition?: number;
    height: number;
    name: string;
    description: string;
    timeUpdated: Date;
    timeCreated: Date;
  }
  export class Widget extends Item<IWidget> {
    protected properties: string[];
    constructor(params?: {
      id?: string | undefined;
    });
  }
}


// entities/widgets/widgets.collection.ts
declare namespace ns_11 {
  import Collection = __beyond_dep_ns_0.Collection;
  import Widget = ns_10.Widget;
  export class Widgets extends Collection {
    constructor();
    getDashboard: (params: {
      userId: string;
    }) => Promise<any> | undefined;
    saveDashboard: (selectedWidgets: Widget[]) => Promise<any> | undefined;
    getTotals: () => Promise<any> | undefined;
  }
}


// providers/modules/module.item.provider.ts
declare namespace ns_12 {
  import ItemProvider = __beyond_dep_ns_1.ItemProvider;
  import IModule = ns_1.IModule;
  export class ModulesItemProvider extends ItemProvider<IModule> {
    constructor();
  }
}


// providers/modules/modules.collection.provider.ts
declare namespace ns_13 {
  import CollectionProvider = __beyond_dep_ns_1.CollectionProvider;
  export class ModulesCollectionProvider extends CollectionProvider {
    constructor();
  }
}


// providers/notifications-history/notification-history.item.provider.ts
declare namespace ns_14 {
  import ItemProvider = __beyond_dep_ns_1.ItemProvider;
  import INotificationHistory = ns_2.INotificationHistory;
  export class NotificationHistoryItemProvider extends ItemProvider<INotificationHistory> {
    constructor();
  }
}


// providers/notifications-history/notifications-history.collection.provider.ts
declare namespace ns_15 {
  import CollectionProvider = __beyond_dep_ns_1.CollectionProvider;
  export class NotificationsHistoryCollectionProvider extends CollectionProvider {
    constructor();
    markAsRead: ({
      ids,
      userId
    }: {
      ids: string[];
      userId: string;
    }) => Promise<any>;
  }
}


// providers/notifications/notification.item.provider.ts
declare namespace ns_16 {
  import ItemProvider = __beyond_dep_ns_1.ItemProvider;
  import INotification = ns_4.INotification;
  export class NotificationItemProvider extends ItemProvider<INotification> {
    constructor();
    launch: ({
      id
    }: {
      id: string;
    }) => Promise<any>;
    markAsRead: ({
      id,
      userId
    }: {
      id: string;
      userId: string;
    }) => Promise<any>;
  }
}


// providers/notifications/notifications.collection.provider.ts
declare namespace ns_17 {
  import CollectionProvider = __beyond_dep_ns_1.CollectionProvider;
  export class NotificationsCollectionProvider extends CollectionProvider {
    constructor();
  }
}


// providers/profiles/profile.item.provider.ts
declare namespace ns_18 {
  import ItemProvider = __beyond_dep_ns_1.ItemProvider;
  import IProfile = ns_6.IProfile;
  export class ProfileItemProvider extends ItemProvider<IProfile> {
    constructor();
  }
}


// providers/profiles/profiles.collection.provider.ts
declare namespace ns_19 {
  import CollectionProvider = __beyond_dep_ns_1.CollectionProvider;
  export class ProfilesCollectionProvider extends CollectionProvider {
    constructor();
    generateReport: (params: {
      type: 'xlsx' | 'csv';
      header: {
        label: string;
        name: string;
      }[];
      params: {
        [key: string]: any;
      };
    }) => Promise<any>;
    getTemplate: (params: {
      type: 'xlsx' | 'csv';
    }) => Promise<any>;
    import: (params: {
      file: File;
    }) => Promise<any>;
  }
}


// providers/users/user.item.provider.ts
declare namespace ns_20 {
  import ItemProvider = __beyond_dep_ns_1.ItemProvider;
  import IUser = ns_8.IUser;
  export class UserItemProvider extends ItemProvider<IUser> {
    constructor();
    login: (params: {
      email: string;
      password?: string;
    }) => Promise<any>;
  }
}


// providers/users/users.collection.provider.ts
declare namespace ns_21 {
  import CollectionProvider = __beyond_dep_ns_1.CollectionProvider;
  export class UsersCollectionProvider extends CollectionProvider {
    constructor();
    getRegisteredUsersByMonth: (params: {
      year: number;
    }) => Promise<any>;
    generateReport: (params: {
      type: 'xlsx' | 'csv';
      header: {
        label: string;
        name: string;
      }[];
      params: {
        [key: string]: any;
      };
    }) => Promise<any>;
    getTemplate: (params: {
      type: 'xlsx' | 'csv';
    }) => Promise<any>;
    import: (params: {
      file: File;
    }) => Promise<any>;
  }
}


// providers/widgets/widget.item.provider.ts
declare namespace ns_22 {
  import ItemProvider = __beyond_dep_ns_1.ItemProvider;
  import IWidget = ns_10.IWidget;
  export class WidgetItemProvider extends ItemProvider<IWidget> {
    constructor();
  }
}


// providers/widgets/widgets.collection.provider.ts
declare namespace ns_23 {
  import CollectionProvider = __beyond_dep_ns_1.CollectionProvider;
  import IWidget = ns_10.IWidget;
  export class WidgetsCollectionProvider extends CollectionProvider {
    constructor();
    getDashboard: (params: {
      userId: string;
    }) => Promise<any>;
    saveDashboard: (params: IWidget[]) => Promise<any>;
    getTotals: () => Promise<any>;
  }
}


export import Modules = ns_0.Modules;
export import IAction = ns_1.IAction;
export import IPermission = ns_1.IPermission;
export import IModule = ns_1.IModule;
export import Module = ns_1.Module;
export import NotificationHistoryStatus = ns_2.NotificationHistoryStatus;
export import INotificationHistory = ns_2.INotificationHistory;
export import NotificationHistory = ns_2.NotificationHistory;
export import NotificationsHistory = ns_3.NotificationsHistory;
export import INotification = ns_4.INotification;
export import Notification = ns_4.Notification;
export import Notifications = ns_5.Notifications;
export import IProfile = ns_6.IProfile;
export import Profile = ns_6.Profile;
export import Profiles = ns_7.Profiles;
export import IUser = ns_8.IUser;
export import User = ns_8.User;
export import Users = ns_9.Users;
export import IWidget = ns_10.IWidget;
export import Widget = ns_10.Widget;
export import Widgets = ns_11.Widgets;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };