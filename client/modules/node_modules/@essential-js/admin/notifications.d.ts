/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/model';
// index.ts
declare namespace ns_0 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  export class NotificationsHandler extends ReactiveModel<NotificationsHandler> {
    #private;
    get token(): string;
    get current(): any;
    constructor({
      session
    }: {
      session: any;
    });
    init: () => Promise<{
      status: boolean;
      error: any;
    }>;
  }
}


// library/desktop.ts
declare namespace ns_1 {
  import Notifier = ns_3.Notifier;
  /**
   * Interface for Desktop Credentials.
   * @interface
   */
  export interface IDesktopCredentials {
    apiKey: string;
    authDomain: string;
    databaseURL: string;
    projectId: string;
    storageBucket: string;
    messagingSenderId: string;
    appId: string;
    measurementId: string;
    VAPID_KEY: string;
  }
  /**
   * Class representing Desktop Notifications.
   * @class
   */
  export class Desktop {
    #private;
    /**
     * Getter for token.
     * @returns {string} - The token.
     */
    get token(): string;
    /**
     * Initializes Desktop Notifications.
     * @async
     * @param {FirebaseNotifications} parent - The parent FirebaseNotifications instance.
     * @param {Object} params - The initialization parameters.
     * @param {IDesktopCredentials} params.credentials - The credentials for Firebase.
     * @param {Object} params.opts - Additional options.
     * @param {string} params.opts.userId - The user ID.
     */
    init: (parent: Notifier, params: {
      credentials: IDesktopCredentials;
      opts?: {
        userId: string;
      };
    }) => Promise<void>;
    renewToken: () => Promise<{
      status: boolean;
    }>;
  }
}


// library/mobile.ts
declare namespace ns_2 {
  /**
   * Class representing a Mobile device for handling notifications.
   */
  export class Mobile {
    /** Device token for push notifications. */
    tokenDevice: string;
    /** Specifications for the mobile device. */
    specs: any;
    /** Type of the device - Android or iOS. */
    device: string;
    get token(): string;
    /**
     * Initializes the Mobile instance with necessary configurations.
     * @param {any} parent - The parent object.
     * @param {any} params - The parameters for initialization.
     */
    init: (parent: any, params?: any) => void;
    /**
     * Logs errors to the console.
     * @param {string} target - The target of the error.
     * @param {Error} error - The error object.
     */
    processError(target: any, error: any): void;
    renewToken: () => Promise<{
      status: boolean;
    }>;
    /**
     * Registers the device with the parent object.
     * @param {any} parent - The parent object.
     * @param {string} token - The device token.
     */
    register(parent: any, token: any): any;
    /**
     * Gets the device token from FirebasePlugin.
     * @param {any} parent - The parent object.
     */
    getToken(parent: any): void;
    /** Checks if auto-init is enabled in FirebasePlugin. */
    isAutoEnabled(): void;
    /** Checks if a user is signed in with FirebasePlugin. */
    isUserSigned(): void;
    /** Initializes iOS specific configurations. */
    initIos(): void;
    /**
     * Checks for notification permissions and requests if not already granted.
     * @param {boolean} requested - Whether permission has been requested before.
     */
    checkNotificationPermission(requested: any): void;
  }
}


// library/notifier.index.ts
declare namespace ns_3 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import IDesktopCredentials = ns_1.IDesktopCredentials;
  /**
   * Class representing Firebase Notifications.
   * @class
   * @extends {ReactiveModel<Notifier>}
   */
  export class Notifier extends ReactiveModel<Notifier> {
    #private;
    /** Callback for message received event. */
    onMessageReceived: (params: {
      notification: any;
      metadata: any;
    }) => void;
    /** Callback for message error event. */
    onMessageError: (error: string) => void;
    /** Callback for handle the device registration. */
    onRegisterDevice: (params: {
      tokenDevice: string;
      device: string;
    }) => void | Promise<any>;
    /** Getter for device token.
     * @returns {string} - The device token.
     */
    get deviceToken(): string;
    /** Constructor for FirebaseNotifications. */
    constructor();
    onMessagePreHandler: (payload: any) => void;
    /**
     * Method to initialize notifications.
     * @async
     * @param {Object} params - The initialization parameters.
     * @param {IDesktopCredentials} params.credentials - The desktop credentials.
     * @param {Object} params.opts - Additional options.
     * @param {string} params.opts.userId - The user ID.
     */
    init: (params: {
      credentials: IDesktopCredentials;
      opts?: any;
    }) => Promise<{
      status: boolean;
    }>;
    /**
     * Renueva el token del dispositivo si es necesario.
     * @async
     * @returns {Promise<void>}
     */
    renewDeviceToken: () => Promise<{
      status: boolean;
    }>;
  }
}


export import NotificationsHandler = ns_0.NotificationsHandler;
export import Notifier = ns_3.Notifier;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };