/************
Processor: ts
************/

// alert.tsx
declare namespace ns_0 {
  /// <reference types="react" />
  import IProps = ns_2.IProps;
  export function Alert({
    message,
    className,
    type,
    title,
    children,
    closable,
    onClose,
    icon
  }: IProps): JSX.Element;
}


// content.tsx
declare namespace ns_1 {
  /// <reference types="react" />
  export function Content({
    message,
    children,
    title,
    icon
  }: {
    message: any;
    children: any;
    title: any;
    icon: any;
  }): JSX.Element;
}


// types.ts
declare namespace ns_2 {
  /// <reference types="react" />
  export interface IProps {
    show?: boolean;
    className?: string;
    type?: ITypes;
    message?: string;
    title?: string;
    closable?: boolean;
    onClose?: () => boolean | Promise<boolean>;
    children?: React.ReactNode;
    icon?: boolean | string;
  }
  export enum ITypes {
    Error = "error",
    Warning = "warning",
    Success = "success",
    Info = "info",
  }
  export interface IIconMap {
    [key: string]: string;
  }
  export type AlertAttributes = {
    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    className: string;
  };
}


export import Alert = ns_0.Alert;
export import ITypes = ns_2.ITypes;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };