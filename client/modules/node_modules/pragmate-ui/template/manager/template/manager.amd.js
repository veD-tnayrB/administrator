define(["exports", "module", "@beyond-js/kernel/bundle", "@beyond-js/reactive/model"], function (_exports, _amd_module, dependency_0, dependency_1) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.hslToHex = _exports.hmr = _exports.getCSSCustomPropIndex = _exports.__beyond_pkg = _exports.TplManager = void 0;
  const {
    Bundle: __Bundle
  } = dependency_0;
  const __pkg = new __Bundle({
    "module": {
      "vspecifier": "pragmate-ui@0.0.6/template/manager"
    },
    "type": "ts"
  }, _amd_module.uri).package();
  ;
  __pkg.dependencies.update([['@beyond-js/reactive/model', dependency_1]]);
  const ims = new Map();

  /***********************************
  INTERNAL MODULE: ./colors/converters
  ***********************************/

  ims.set('./colors/converters', {
    hash: 3901188594,
    creator: function (require, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.hexToRgb = hexToRgb;
      exports.hslToHex = hslToHex;
      exports.rgbToHex = rgbToHex;
      function hexToRgb(hex) {
        // Remove the '#' symbol if present
        hex = hex.replace(/^#/, '');
        // Convert the hexadecimal values to decimal
        const bigint = parseInt(hex, 16);
        // Extract the RGB components
        const r = bigint >> 16 & 255;
        const g = bigint >> 8 & 255;
        const b = bigint & 255;
        return {
          r,
          g,
          b
        };
      }
      function rgbToHex(r, g, b) {
        return `#${(r << 16 | g << 8 | b).toString(16).padStart(6, '0')}`;
      }
      /*bundle */
      function hslToHex(h, s, l) {
        l /= 100;
        const a = s * Math.min(l, 1 - l) / 100;
        const f = n => {
          const k = (n + h / 30) % 12;
          const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
          return Math.round(255 * color).toString(16).padStart(2, '0'); // convert to Hex and prefix "0" if needed
        };

        return `#${f(0)}${f(8)}${f(4)}`;
      }
    }
  });

  /*******************************
  INTERNAL MODULE: ./colors/darken
  *******************************/

  ims.set('./colors/darken', {
    hash: 3264955651,
    creator: function (require, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.darkenHexColor = darkenHexColor;
      var _converters = require("./converters");
      function darkenHexColor(hex, percentage) {
        const {
          r,
          g,
          b
        } = (0, _converters.hexToRgb)(hex);
        const darkenAmount = Math.floor(255 * (percentage / 100));
        const newR = Math.max(0, r - darkenAmount);
        const newG = Math.max(0, g - darkenAmount);
        const newB = Math.max(0, b - darkenAmount);
        return (0, _converters.rgbToHex)(newR, newG, newB);
      }
    }
  });

  /*******************************
  INTERNAL MODULE: ./colors/lighen
  *******************************/

  ims.set('./colors/lighen', {
    hash: 4269504386,
    creator: function (require, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.lightenHexColor = lightenHexColor;
      var _converters = require("./converters");
      function lightenHexColor(hex, percentage) {
        const {
          r,
          g,
          b
        } = (0, _converters.hexToRgb)(hex);
        const lightenAmount = Math.floor(255 * (percentage / 100));
        const newR = Math.min(255, r + lightenAmount);
        const newG = Math.min(255, g + lightenAmount);
        const newB = Math.min(255, b + lightenAmount);
        return (0, _converters.rgbToHex)(newR, newG, newB);
      }
    }
  });

  /***********************
  INTERNAL MODULE: ./index
  ***********************/

  ims.set('./index', {
    hash: 4097915562,
    creator: function (require, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.TplManager = exports.TemplateManager = void 0;
      var _model = require("@beyond-js/reactive/model");
      var _properties = require("./properties");
      class TemplateManager extends _model.ReactiveModel {
        #root;
        get root() {
          return this.#root;
        }
        #rootSelector;
        #theme;
        #stylesheet;
        #dark;
        get dark() {
          return this.#dark;
        }
        #light;
        get light() {
          return this.#light;
        }
        constructor() {
          super();
          this.#rootSelector = document.querySelector('html');
          this.#theme = this.#rootSelector.dataset.beyondMode ?? 'light';
          const properties = this.getCustomProperties(this.#theme);
          this.#root = properties;
          this.initialise();
        }
        getCustomProperties(theme) {
          const stylesheetHref = new URL('./styles.css', window.location.origin).href;
          const cssPropsObject = (0, _properties.getCSSCustomPropsObjectFromStylesheet)(stylesheetHref, theme);
          return cssPropsObject;
        }
        #getProperties() {
          const stylesheetHref = new URL('./styles.css', window.location.origin).href;
          const stylesheet = Array.from(document.styleSheets).find(sheet => sheet.href.split('?')[0] === stylesheetHref);
          const rules = Array.from(stylesheet.cssRules);
          const filter = (rule, property) => rule instanceof CSSStyleRule && rule.selectorText === property;
          this.#dark = rules.find(rule => filter(rule, ':root[data-beyond-mode="dark"]'));
          this.#light = rules.find(rule => filter(rule, ':root[data-beyond-mode="light"]'));
          this.#stylesheet = stylesheet;
        }
        initialise() {
          this.#getProperties();
          const observe = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'data-beyond-mode') {
                this.#theme = this.#rootSelector.dataset.beyondMode ?? 'light';
                this.#getProperties();
                this.#root = this.getCustomProperties(this.#theme);
                this.trigger('change');
              }
            });
          });
          observe.observe(this.#rootSelector, {
            attributes: true
          });
        }
      }
      exports.TemplateManager = TemplateManager;
      /*bundle */
      const TplManager = exports.TplManager = new TemplateManager();
    }
  });

  /****************************
  INTERNAL MODULE: ./properties
  ****************************/

  ims.set('./properties', {
    hash: 1901439796,
    creator: function (require, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.toCamelCase = exports.getCSSCustomPropsObjectFromStylesheet = exports.getCSSCustomPropsObject = exports.getCSSCustomPropIndexFromStylesheet = exports.getCSSCustomPropIndex = void 0;
      /*
       Check if the stylesheet is internal or hosted on the current domain.
       If it isn't, attempting to access sheet.cssRules will throw a cross origin error.
       See https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet#Notes
       
       NOTE: One problem this could raise is hosting stylesheets on a CDN with a
       different domain. Those would be cross origin, so you can't access them.
      */
      const isSameDomain = styleSheet => {
        // Internal style blocks won't have an href value
        if (!styleSheet.href) {
          return true;
        }
        return styleSheet.href.indexOf(window.location.origin) === 0;
      };
      /*
         Determine if the given rule is a CSSStyleRule
         See: https://developer.mozilla.org/en-US/docs/Web/API/CSSRule#Type_constants
        */
      const isStyleRule = rule => rule.type === 1;
      /**
       * Get all custom properties on a page
       * @return array<array[string, string]>
       * ex; [["--color-accent", "#b9f500"], ["--color-text", "#252525"], ...]
       */
      /*bundle*/
      const getCSSCustomPropIndex = () => {
        // styleSheets is array-like, so we convert it to an array.
        // Filter out any stylesheets not on this domain
        return Array.from(document.styleSheets).filter(isSameDomain).reduce((finalArr, sheet) => {
          // cssRules is array-like, so we convert it to an array
          const ruleProps = Array.from(sheet.cssRules).filter(isStyleRule).reduce((propValArr, rule) => {
            const styleRule = rule; // Assert rule as CSSStyleRule
            //@ts-ignore
            const props = Array.from(styleRule.style).map(propName => [propName.trim(), styleRule.style.getPropertyValue(propName).trim()])
            // Discard any props that don't start with "--". Custom props are required to.
            .filter(([propName]) => propName.startsWith('--'));
            return propValArr.concat(props);
          }, []);
          return finalArr.concat(ruleProps);
        }, []);
      };
      exports.getCSSCustomPropIndex = getCSSCustomPropIndex;
      const toCamelCase = str => {
        return str.replace(/-([a-z0-9])/g, function (_, g1) {
          return /\d/.test(g1) ? g1 : g1.toUpperCase();
        });
      };
      exports.toCamelCase = toCamelCase;
      const getCSSCustomPropsObject = () => {
        const index = getCSSCustomPropIndex();
        const obj = {};
        index.forEach(([propName, value]) => {
          // Remove the leading "--" and convert to camel case
          const camelCasedPropName = toCamelCase(propName.slice(2));
          obj[camelCasedPropName] = value;
        });
        return obj;
      };
      exports.getCSSCustomPropsObject = getCSSCustomPropsObject;
      const getCSSCustomPropIndexFromStylesheet = (stylesheetHref, theme) => {
        // Find the specified stylesheet in the document's stylesheets collection
        const stylesheet = Array.from(document.styleSheets).find(sheet => sheet.href.split('?')[0] === stylesheetHref);
        if (!stylesheet) {
          return [];
        }
        const getCustomPropForTheme = (propName, theme, styleSheet) => {
          const targetSelector = `:root[data-beyond-mode="${theme}"]`;
          for (const rule of Array.from(styleSheet.cssRules)) {
            if (rule instanceof CSSStyleRule && rule.selectorText === targetSelector) {
              // console.log(121, rule);
              const styleRule = rule;
              const propValue = styleRule.style.getPropertyValue(propName).trim();
              return propValue;
            }
          }
          return null;
        };
        // cssRules is array-like, so we convert it to an array
        const ruleProps = Array.from(stylesheet.cssRules).filter(isStyleRule).reduce((propValArr, rule) => {
          const styleRule = rule; // Assert rule as CSSStyleRule
          //@ts-ignore
          const props = Array.from(styleRule.style).map(propName => {
            // getComputedStyle
            propName = propName.trim();
            // const value = getCustomPropForTheme(propName, theme, stylesheet);
            const value = styleRule.style.getPropertyValue(propName).trim();
            return [propName, value.trim()];
          })
          // Discard any props that don't start with "--". Custom props are required to.
          .filter(([propName]) => propName.startsWith('--'));
          // console.log(100, props);
          return propValArr.concat(props);
        }, []);
        return ruleProps;
      };
      exports.getCSSCustomPropIndexFromStylesheet = getCSSCustomPropIndexFromStylesheet;
      const getCSSCustomPropsObjectFromStylesheet = (stylesheetHref, theme) => {
        const index = getCSSCustomPropIndexFromStylesheet(stylesheetHref, theme);
        const obj = {};
        index.forEach(([propName, value]) => {
          // Remove the leading "--" and convert to camel case
          const camelCasedPropName = toCamelCase(propName.slice(2));
          obj[camelCasedPropName] = value;
        });
        //@ts-ignore
        return obj;
      };
      // const cssCustomPropIndex: Array<[string, string]> = getCSSCustomPropIndex();
      // Add the swatches to the DOM
      exports.getCSSCustomPropsObjectFromStylesheet = getCSSCustomPropsObjectFromStylesheet;
    }
  });
  __pkg.exports.descriptor = [{
    "im": "./colors/converters",
    "from": "hslToHex",
    "name": "hslToHex"
  }, {
    "im": "./index",
    "from": "TplManager",
    "name": "TplManager"
  }, {
    "im": "./properties",
    "from": "getCSSCustomPropIndex",
    "name": "getCSSCustomPropIndex"
  }];
  let hslToHex = _exports.hslToHex = void 0,
    TplManager = _exports.TplManager = void 0,
    getCSSCustomPropIndex = _exports.getCSSCustomPropIndex = void 0;

  // Module exports
  __pkg.exports.process = function ({
    require,
    prop,
    value
  }) {
    (require || prop === 'hslToHex') && (_exports.hslToHex = hslToHex = require ? require('./colors/converters').hslToHex : value);
    (require || prop === 'TplManager') && (_exports.TplManager = TplManager = require ? require('./index').TplManager : value);
    (require || prop === 'getCSSCustomPropIndex') && (_exports.getCSSCustomPropIndex = getCSSCustomPropIndex = require ? require('./properties').getCSSCustomPropIndex : value);
  };
  const __beyond_pkg = _exports.__beyond_pkg = __pkg;
  const hmr = _exports.hmr = new function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
  }();
  __pkg.initialise(ims);
});
//# sourceMappingURL=template/manager.amd.js.map