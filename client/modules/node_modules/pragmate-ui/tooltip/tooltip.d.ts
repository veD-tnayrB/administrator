/************
Processor: ts
************/

import __beyond_dep_def_0 from 'react';
// ITippySettings.ts
declare namespace ns_0 {
  export interface ITippySettings {
    content?: string | HTMLElement;
    placement?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'auto' | 'auto-start' | 'auto-end';
    trigger?: string;
    duration?: number | [number, number];
    delay?: number | [number, number];
    hideOnClick?: boolean | 'toggle';
    interactive?: boolean;
    appendTo?: 'parent' | HTMLElement | (() => HTMLElement);
    zIndex?: number;
    arrow?: boolean;
    arrowType?: 'sharp' | 'round';
    animation?: string;
    inertia?: boolean;
    popperOptions?: Object;
    maxWidth?: string;
    allowHTML?: boolean;
    offset?: [number, number];
    distance?: number;
    theme?: string;
    onShow?(instance: any): void;
    onHide?(instance: any): void;
    onClickOutside?(instance: any): void;
  }
}


// index.tsx
declare namespace ns_1 {
  import React = __beyond_dep_def_0;
  import ITippySettings = ns_0.ITippySettings;
  interface IProps {
    children: React.ReactNode;
    content: ITippySettings['content'];
    placement?: ITippySettings['placement'];
    settings?: ITippySettings;
  }
  export function Tooltip({
    children,
    content,
    placement,
    settings
  }: IProps): JSX.Element;
  export {};
}


export import Tooltip = ns_1.Tooltip;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };