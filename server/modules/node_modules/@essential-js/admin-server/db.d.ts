/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@bgroup/data-model/db';
import * as __beyond_dep_ns_1 from 'sequelize';
// index.ts
declare namespace ns_0 {
  import DM = __beyond_dep_ns_0.DataModel;
  export const DB: DM;
}


// tables/access_tokens.ts
declare namespace ns_1 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import Users = ns_11.Users;
  import UsersId = ns_11.UsersId;
  export interface AccessTokensAttributes {
    id: string;
    userId?: string;
    accessToken?: string;
    timeUpdated?: Date;
    timeCreated?: Date;
    notificationsToken?: string;
    timezone?: string;
  }
  export type AccessTokensPk = "id";
  export type AccessTokensId = AccessTokens[AccessTokensPk];
  export type AccessTokensOptionalAttributes = "userId" | "accessToken" | "timeUpdated" | "timeCreated" | "notificationsToken" | "timezone";
  export type AccessTokensCreationAttributes = Optional<AccessTokensAttributes, AccessTokensOptionalAttributes>;
  export class AccessTokens extends Model<AccessTokensAttributes, AccessTokensCreationAttributes> implements AccessTokensAttributes {
    id: string;
    userId?: string;
    accessToken?: string;
    timeUpdated?: Date;
    timeCreated?: Date;
    notificationsToken?: string;
    timezone?: string;
    user: Users;
    getUser: Sequelize.BelongsToGetAssociationMixin<Users>;
    setUser: Sequelize.BelongsToSetAssociationMixin<Users, UsersId>;
    createUser: Sequelize.BelongsToCreateAssociationMixin<Users>;
    static initModel(sequelize: Sequelize.Sequelize): typeof AccessTokens;
  }
}


// tables/init-models.ts
declare namespace ns_2 {
  import Sequelize = __beyond_dep_ns_1.Sequelize;
  import _AccessTokens = ns_1.AccessTokens;
  import AccessTokensAttributes = ns_1.AccessTokensAttributes;
  import AccessTokensCreationAttributes = ns_1.AccessTokensCreationAttributes;
  import _Modules = ns_3.Modules;
  import ModulesAttributes = ns_3.ModulesAttributes;
  import ModulesCreationAttributes = ns_3.ModulesCreationAttributes;
  import _ModulesActions = ns_4.ModulesActions;
  import ModulesActionsAttributes = ns_4.ModulesActionsAttributes;
  import ModulesActionsCreationAttributes = ns_4.ModulesActionsCreationAttributes;
  import _Notifications = ns_5.Notifications;
  import NotificationsAttributes = ns_5.NotificationsAttributes;
  import NotificationsCreationAttributes = ns_5.NotificationsCreationAttributes;
  import _ProfileModulePermissions = ns_6.ProfileModulePermissions;
  import ProfileModulePermissionsAttributes = ns_6.ProfileModulePermissionsAttributes;
  import ProfileModulePermissionsCreationAttributes = ns_6.ProfileModulePermissionsCreationAttributes;
  import _Profiles = ns_7.Profiles;
  import ProfilesAttributes = ns_7.ProfilesAttributes;
  import ProfilesCreationAttributes = ns_7.ProfilesCreationAttributes;
  import _ProfilesNotifications = ns_8.ProfilesNotifications;
  import ProfilesNotificationsAttributes = ns_8.ProfilesNotificationsAttributes;
  import ProfilesNotificationsCreationAttributes = ns_8.ProfilesNotificationsCreationAttributes;
  import _SentNotifications = ns_9.SentNotifications;
  import SentNotificationsAttributes = ns_9.SentNotificationsAttributes;
  import SentNotificationsCreationAttributes = ns_9.SentNotificationsCreationAttributes;
  import _Totals = ns_10.Totals;
  import TotalsAttributes = ns_10.TotalsAttributes;
  import TotalsCreationAttributes = ns_10.TotalsCreationAttributes;
  import _Users = ns_11.Users;
  import UsersAttributes = ns_11.UsersAttributes;
  import UsersCreationAttributes = ns_11.UsersCreationAttributes;
  import _UsersNotifications = ns_12.UsersNotifications;
  import UsersNotificationsAttributes = ns_12.UsersNotificationsAttributes;
  import UsersNotificationsCreationAttributes = ns_12.UsersNotificationsCreationAttributes;
  import _UsersProfiles = ns_13.UsersProfiles;
  import UsersProfilesAttributes = ns_13.UsersProfilesAttributes;
  import UsersProfilesCreationAttributes = ns_13.UsersProfilesCreationAttributes;
  import _UsersWidgets = ns_14.UsersWidgets;
  import UsersWidgetsAttributes = ns_14.UsersWidgetsAttributes;
  import UsersWidgetsCreationAttributes = ns_14.UsersWidgetsCreationAttributes;
  import _Widgets = ns_15.Widgets;
  import WidgetsAttributes = ns_15.WidgetsAttributes;
  import WidgetsCreationAttributes = ns_15.WidgetsCreationAttributes;
  import _WidgetsProfiles = ns_16.WidgetsProfiles;
  import WidgetsProfilesAttributes = ns_16.WidgetsProfilesAttributes;
  import WidgetsProfilesCreationAttributes = ns_16.WidgetsProfilesCreationAttributes;
  export { _AccessTokens as AccessTokens, _Modules as Modules, _ModulesActions as ModulesActions, _Notifications as Notifications, _ProfileModulePermissions as ProfileModulePermissions, _Profiles as Profiles, _ProfilesNotifications as ProfilesNotifications, _SentNotifications as SentNotifications, _Totals as Totals, _Users as Users, _UsersNotifications as UsersNotifications, _UsersProfiles as UsersProfiles, _UsersWidgets as UsersWidgets, _Widgets as Widgets, _WidgetsProfiles as WidgetsProfiles };
  export type { AccessTokensAttributes, AccessTokensCreationAttributes, ModulesAttributes, ModulesCreationAttributes, ModulesActionsAttributes, ModulesActionsCreationAttributes, NotificationsAttributes, NotificationsCreationAttributes, ProfileModulePermissionsAttributes, ProfileModulePermissionsCreationAttributes, ProfilesAttributes, ProfilesCreationAttributes, ProfilesNotificationsAttributes, ProfilesNotificationsCreationAttributes, SentNotificationsAttributes, SentNotificationsCreationAttributes, TotalsAttributes, TotalsCreationAttributes, UsersAttributes, UsersCreationAttributes, UsersNotificationsAttributes, UsersNotificationsCreationAttributes, UsersProfilesAttributes, UsersProfilesCreationAttributes, UsersWidgetsAttributes, UsersWidgetsCreationAttributes, WidgetsAttributes, WidgetsCreationAttributes, WidgetsProfilesAttributes, WidgetsProfilesCreationAttributes };
  export function initModels(sequelize: Sequelize): {
    AccessTokens: typeof _AccessTokens;
    Modules: typeof _Modules;
    ModulesActions: typeof _ModulesActions;
    Notifications: typeof _Notifications;
    ProfileModulePermissions: typeof _ProfileModulePermissions;
    Profiles: typeof _Profiles;
    ProfilesNotifications: typeof _ProfilesNotifications;
    SentNotifications: typeof _SentNotifications;
    Totals: typeof _Totals;
    Users: typeof _Users;
    UsersNotifications: typeof _UsersNotifications;
    UsersProfiles: typeof _UsersProfiles;
    UsersWidgets: typeof _UsersWidgets;
    Widgets: typeof _Widgets;
    WidgetsProfiles: typeof _WidgetsProfiles;
  };
}


// tables/modules.ts
declare namespace ns_3 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import ModulesActions = ns_4.ModulesActions;
  import ModulesActionsId = ns_4.ModulesActionsId;
  import ProfileModulePermissions = ns_6.ProfileModulePermissions;
  import ProfileModulePermissionsId = ns_6.ProfileModulePermissionsId;
  export interface ModulesAttributes {
    id: string;
    label?: string;
    to?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    order?: number;
    icon?: string;
    active: number;
  }
  export type ModulesPk = "id";
  export type ModulesId = Modules[ModulesPk];
  export type ModulesOptionalAttributes = "label" | "to" | "timeCreated" | "timeUpdated" | "order" | "icon" | "active";
  export type ModulesCreationAttributes = Optional<ModulesAttributes, ModulesOptionalAttributes>;
  export class Modules extends Model<ModulesAttributes, ModulesCreationAttributes> implements ModulesAttributes {
    id: string;
    label?: string;
    to?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    order?: number;
    icon?: string;
    active: number;
    modulesActions: ModulesActions[];
    getModulesActions: Sequelize.HasManyGetAssociationsMixin<ModulesActions>;
    setModulesActions: Sequelize.HasManySetAssociationsMixin<ModulesActions, ModulesActionsId>;
    addModulesAction: Sequelize.HasManyAddAssociationMixin<ModulesActions, ModulesActionsId>;
    addModulesActions: Sequelize.HasManyAddAssociationsMixin<ModulesActions, ModulesActionsId>;
    createModulesAction: Sequelize.HasManyCreateAssociationMixin<ModulesActions>;
    removeModulesAction: Sequelize.HasManyRemoveAssociationMixin<ModulesActions, ModulesActionsId>;
    removeModulesActions: Sequelize.HasManyRemoveAssociationsMixin<ModulesActions, ModulesActionsId>;
    hasModulesAction: Sequelize.HasManyHasAssociationMixin<ModulesActions, ModulesActionsId>;
    hasModulesActions: Sequelize.HasManyHasAssociationsMixin<ModulesActions, ModulesActionsId>;
    countModulesActions: Sequelize.HasManyCountAssociationsMixin;
    profileModulePermissions: ProfileModulePermissions[];
    getProfileModulePermissions: Sequelize.HasManyGetAssociationsMixin<ProfileModulePermissions>;
    setProfileModulePermissions: Sequelize.HasManySetAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    addProfileModulePermission: Sequelize.HasManyAddAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    addProfileModulePermissions: Sequelize.HasManyAddAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    createProfileModulePermission: Sequelize.HasManyCreateAssociationMixin<ProfileModulePermissions>;
    removeProfileModulePermission: Sequelize.HasManyRemoveAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    removeProfileModulePermissions: Sequelize.HasManyRemoveAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    hasProfileModulePermission: Sequelize.HasManyHasAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    hasProfileModulePermissions: Sequelize.HasManyHasAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    countProfileModulePermissions: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof Modules;
  }
}


// tables/modules_actions.ts
declare namespace ns_4 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import Modules = ns_3.Modules;
  import ModulesId = ns_3.ModulesId;
  import ProfileModulePermissions = ns_6.ProfileModulePermissions;
  import ProfileModulePermissionsId = ns_6.ProfileModulePermissionsId;
  export interface ModulesActionsAttributes {
    id: string;
    moduleId: string;
    name: string;
    description?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
  }
  export type ModulesActionsPk = "id";
  export type ModulesActionsId = ModulesActions[ModulesActionsPk];
  export type ModulesActionsOptionalAttributes = "description" | "timeCreated" | "timeUpdated";
  export type ModulesActionsCreationAttributes = Optional<ModulesActionsAttributes, ModulesActionsOptionalAttributes>;
  export class ModulesActions extends Model<ModulesActionsAttributes, ModulesActionsCreationAttributes> implements ModulesActionsAttributes {
    id: string;
    moduleId: string;
    name: string;
    description?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    module: Modules;
    getModule: Sequelize.BelongsToGetAssociationMixin<Modules>;
    setModule: Sequelize.BelongsToSetAssociationMixin<Modules, ModulesId>;
    createModule: Sequelize.BelongsToCreateAssociationMixin<Modules>;
    profileModulePermissions: ProfileModulePermissions[];
    getProfileModulePermissions: Sequelize.HasManyGetAssociationsMixin<ProfileModulePermissions>;
    setProfileModulePermissions: Sequelize.HasManySetAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    addProfileModulePermission: Sequelize.HasManyAddAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    addProfileModulePermissions: Sequelize.HasManyAddAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    createProfileModulePermission: Sequelize.HasManyCreateAssociationMixin<ProfileModulePermissions>;
    removeProfileModulePermission: Sequelize.HasManyRemoveAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    removeProfileModulePermissions: Sequelize.HasManyRemoveAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    hasProfileModulePermission: Sequelize.HasManyHasAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    hasProfileModulePermissions: Sequelize.HasManyHasAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    countProfileModulePermissions: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof ModulesActions;
  }
}


// tables/notifications.ts
declare namespace ns_5 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import ProfilesNotifications = ns_8.ProfilesNotifications;
  import ProfilesNotificationsId = ns_8.ProfilesNotificationsId;
  import SentNotifications = ns_9.SentNotifications;
  import SentNotificationsId = ns_9.SentNotificationsId;
  import UsersNotifications = ns_12.UsersNotifications;
  import UsersNotificationsId = ns_12.UsersNotificationsId;
  export interface NotificationsAttributes {
    id: string;
    title?: string;
    description?: string;
    icon?: string;
    status?: string;
    frecuency?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    endDate: string;
  }
  export type NotificationsPk = "id";
  export type NotificationsId = Notifications[NotificationsPk];
  export type NotificationsOptionalAttributes = "title" | "description" | "icon" | "status" | "frecuency" | "timeCreated" | "timeUpdated";
  export type NotificationsCreationAttributes = Optional<NotificationsAttributes, NotificationsOptionalAttributes>;
  export class Notifications extends Model<NotificationsAttributes, NotificationsCreationAttributes> implements NotificationsAttributes {
    id: string;
    title?: string;
    description?: string;
    icon?: string;
    status?: string;
    frecuency?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    endDate: string;
    profilesNotifications: ProfilesNotifications[];
    getProfilesNotifications: Sequelize.HasManyGetAssociationsMixin<ProfilesNotifications>;
    setProfilesNotifications: Sequelize.HasManySetAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    addProfilesNotification: Sequelize.HasManyAddAssociationMixin<ProfilesNotifications, ProfilesNotificationsId>;
    addProfilesNotifications: Sequelize.HasManyAddAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    createProfilesNotification: Sequelize.HasManyCreateAssociationMixin<ProfilesNotifications>;
    removeProfilesNotification: Sequelize.HasManyRemoveAssociationMixin<ProfilesNotifications, ProfilesNotificationsId>;
    removeProfilesNotifications: Sequelize.HasManyRemoveAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    hasProfilesNotification: Sequelize.HasManyHasAssociationMixin<ProfilesNotifications, ProfilesNotificationsId>;
    hasProfilesNotifications: Sequelize.HasManyHasAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    countProfilesNotifications: Sequelize.HasManyCountAssociationsMixin;
    sentNotifications: SentNotifications[];
    getSentNotifications: Sequelize.HasManyGetAssociationsMixin<SentNotifications>;
    setSentNotifications: Sequelize.HasManySetAssociationsMixin<SentNotifications, SentNotificationsId>;
    addSentNotification: Sequelize.HasManyAddAssociationMixin<SentNotifications, SentNotificationsId>;
    addSentNotifications: Sequelize.HasManyAddAssociationsMixin<SentNotifications, SentNotificationsId>;
    createSentNotification: Sequelize.HasManyCreateAssociationMixin<SentNotifications>;
    removeSentNotification: Sequelize.HasManyRemoveAssociationMixin<SentNotifications, SentNotificationsId>;
    removeSentNotifications: Sequelize.HasManyRemoveAssociationsMixin<SentNotifications, SentNotificationsId>;
    hasSentNotification: Sequelize.HasManyHasAssociationMixin<SentNotifications, SentNotificationsId>;
    hasSentNotifications: Sequelize.HasManyHasAssociationsMixin<SentNotifications, SentNotificationsId>;
    countSentNotifications: Sequelize.HasManyCountAssociationsMixin;
    usersNotifications: UsersNotifications[];
    getUsersNotifications: Sequelize.HasManyGetAssociationsMixin<UsersNotifications>;
    setUsersNotifications: Sequelize.HasManySetAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    addUsersNotification: Sequelize.HasManyAddAssociationMixin<UsersNotifications, UsersNotificationsId>;
    addUsersNotifications: Sequelize.HasManyAddAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    createUsersNotification: Sequelize.HasManyCreateAssociationMixin<UsersNotifications>;
    removeUsersNotification: Sequelize.HasManyRemoveAssociationMixin<UsersNotifications, UsersNotificationsId>;
    removeUsersNotifications: Sequelize.HasManyRemoveAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    hasUsersNotification: Sequelize.HasManyHasAssociationMixin<UsersNotifications, UsersNotificationsId>;
    hasUsersNotifications: Sequelize.HasManyHasAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    countUsersNotifications: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof Notifications;
  }
}


// tables/profile_module_permissions.ts
declare namespace ns_6 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Modules = ns_3.Modules;
  import ModulesId = ns_3.ModulesId;
  import ModulesActions = ns_4.ModulesActions;
  import ModulesActionsId = ns_4.ModulesActionsId;
  import Profiles = ns_7.Profiles;
  import ProfilesId = ns_7.ProfilesId;
  export interface ProfileModulePermissionsAttributes {
    profileId: string;
    moduleId: string;
    actionId: string;
  }
  export type ProfileModulePermissionsPk = "profileId" | "moduleId" | "actionId";
  export type ProfileModulePermissionsId = ProfileModulePermissions[ProfileModulePermissionsPk];
  export type ProfileModulePermissionsCreationAttributes = ProfileModulePermissionsAttributes;
  export class ProfileModulePermissions extends Model<ProfileModulePermissionsAttributes, ProfileModulePermissionsCreationAttributes> implements ProfileModulePermissionsAttributes {
    profileId: string;
    moduleId: string;
    actionId: string;
    module: Modules;
    getModule: Sequelize.BelongsToGetAssociationMixin<Modules>;
    setModule: Sequelize.BelongsToSetAssociationMixin<Modules, ModulesId>;
    createModule: Sequelize.BelongsToCreateAssociationMixin<Modules>;
    action: ModulesActions;
    getAction: Sequelize.BelongsToGetAssociationMixin<ModulesActions>;
    setAction: Sequelize.BelongsToSetAssociationMixin<ModulesActions, ModulesActionsId>;
    createAction: Sequelize.BelongsToCreateAssociationMixin<ModulesActions>;
    profile: Profiles;
    getProfile: Sequelize.BelongsToGetAssociationMixin<Profiles>;
    setProfile: Sequelize.BelongsToSetAssociationMixin<Profiles, ProfilesId>;
    createProfile: Sequelize.BelongsToCreateAssociationMixin<Profiles>;
    static initModel(sequelize: Sequelize.Sequelize): typeof ProfileModulePermissions;
  }
}


// tables/profiles.ts
declare namespace ns_7 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import ProfileModulePermissions = ns_6.ProfileModulePermissions;
  import ProfileModulePermissionsId = ns_6.ProfileModulePermissionsId;
  import ProfilesNotifications = ns_8.ProfilesNotifications;
  import ProfilesNotificationsId = ns_8.ProfilesNotificationsId;
  import Users = ns_11.Users;
  import UsersId = ns_11.UsersId;
  import UsersProfiles = ns_13.UsersProfiles;
  import UsersProfilesId = ns_13.UsersProfilesId;
  import WidgetsProfiles = ns_16.WidgetsProfiles;
  import WidgetsProfilesId = ns_16.WidgetsProfilesId;
  export interface ProfilesAttributes {
    id: string;
    name?: string;
    description?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    active: number;
  }
  export type ProfilesPk = "id";
  export type ProfilesId = Profiles[ProfilesPk];
  export type ProfilesOptionalAttributes = "name" | "description" | "timeCreated" | "timeUpdated" | "active";
  export type ProfilesCreationAttributes = Optional<ProfilesAttributes, ProfilesOptionalAttributes>;
  export class Profiles extends Model<ProfilesAttributes, ProfilesCreationAttributes> implements ProfilesAttributes {
    id: string;
    name?: string;
    description?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    active: number;
    profileModulePermissions: ProfileModulePermissions[];
    getProfileModulePermissions: Sequelize.HasManyGetAssociationsMixin<ProfileModulePermissions>;
    setProfileModulePermissions: Sequelize.HasManySetAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    addProfileModulePermission: Sequelize.HasManyAddAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    addProfileModulePermissions: Sequelize.HasManyAddAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    createProfileModulePermission: Sequelize.HasManyCreateAssociationMixin<ProfileModulePermissions>;
    removeProfileModulePermission: Sequelize.HasManyRemoveAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    removeProfileModulePermissions: Sequelize.HasManyRemoveAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    hasProfileModulePermission: Sequelize.HasManyHasAssociationMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    hasProfileModulePermissions: Sequelize.HasManyHasAssociationsMixin<ProfileModulePermissions, ProfileModulePermissionsId>;
    countProfileModulePermissions: Sequelize.HasManyCountAssociationsMixin;
    profilesNotifications: ProfilesNotifications[];
    getProfilesNotifications: Sequelize.HasManyGetAssociationsMixin<ProfilesNotifications>;
    setProfilesNotifications: Sequelize.HasManySetAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    addProfilesNotification: Sequelize.HasManyAddAssociationMixin<ProfilesNotifications, ProfilesNotificationsId>;
    addProfilesNotifications: Sequelize.HasManyAddAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    createProfilesNotification: Sequelize.HasManyCreateAssociationMixin<ProfilesNotifications>;
    removeProfilesNotification: Sequelize.HasManyRemoveAssociationMixin<ProfilesNotifications, ProfilesNotificationsId>;
    removeProfilesNotifications: Sequelize.HasManyRemoveAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    hasProfilesNotification: Sequelize.HasManyHasAssociationMixin<ProfilesNotifications, ProfilesNotificationsId>;
    hasProfilesNotifications: Sequelize.HasManyHasAssociationsMixin<ProfilesNotifications, ProfilesNotificationsId>;
    countProfilesNotifications: Sequelize.HasManyCountAssociationsMixin;
    userIdUsers: Users[];
    getUserIdUsers: Sequelize.BelongsToManyGetAssociationsMixin<Users>;
    setUserIdUsers: Sequelize.BelongsToManySetAssociationsMixin<Users, UsersId>;
    addUserIdUser: Sequelize.BelongsToManyAddAssociationMixin<Users, UsersId>;
    addUserIdUsers: Sequelize.BelongsToManyAddAssociationsMixin<Users, UsersId>;
    createUserIdUser: Sequelize.BelongsToManyCreateAssociationMixin<Users>;
    removeUserIdUser: Sequelize.BelongsToManyRemoveAssociationMixin<Users, UsersId>;
    removeUserIdUsers: Sequelize.BelongsToManyRemoveAssociationsMixin<Users, UsersId>;
    hasUserIdUser: Sequelize.BelongsToManyHasAssociationMixin<Users, UsersId>;
    hasUserIdUsers: Sequelize.BelongsToManyHasAssociationsMixin<Users, UsersId>;
    countUserIdUsers: Sequelize.BelongsToManyCountAssociationsMixin;
    usersProfiles: UsersProfiles[];
    getUsersProfiles: Sequelize.HasManyGetAssociationsMixin<UsersProfiles>;
    setUsersProfiles: Sequelize.HasManySetAssociationsMixin<UsersProfiles, UsersProfilesId>;
    addUsersProfile: Sequelize.HasManyAddAssociationMixin<UsersProfiles, UsersProfilesId>;
    addUsersProfiles: Sequelize.HasManyAddAssociationsMixin<UsersProfiles, UsersProfilesId>;
    createUsersProfile: Sequelize.HasManyCreateAssociationMixin<UsersProfiles>;
    removeUsersProfile: Sequelize.HasManyRemoveAssociationMixin<UsersProfiles, UsersProfilesId>;
    removeUsersProfiles: Sequelize.HasManyRemoveAssociationsMixin<UsersProfiles, UsersProfilesId>;
    hasUsersProfile: Sequelize.HasManyHasAssociationMixin<UsersProfiles, UsersProfilesId>;
    hasUsersProfiles: Sequelize.HasManyHasAssociationsMixin<UsersProfiles, UsersProfilesId>;
    countUsersProfiles: Sequelize.HasManyCountAssociationsMixin;
    widgetsProfiles: WidgetsProfiles[];
    getWidgetsProfiles: Sequelize.HasManyGetAssociationsMixin<WidgetsProfiles>;
    setWidgetsProfiles: Sequelize.HasManySetAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    addWidgetsProfile: Sequelize.HasManyAddAssociationMixin<WidgetsProfiles, WidgetsProfilesId>;
    addWidgetsProfiles: Sequelize.HasManyAddAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    createWidgetsProfile: Sequelize.HasManyCreateAssociationMixin<WidgetsProfiles>;
    removeWidgetsProfile: Sequelize.HasManyRemoveAssociationMixin<WidgetsProfiles, WidgetsProfilesId>;
    removeWidgetsProfiles: Sequelize.HasManyRemoveAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    hasWidgetsProfile: Sequelize.HasManyHasAssociationMixin<WidgetsProfiles, WidgetsProfilesId>;
    hasWidgetsProfiles: Sequelize.HasManyHasAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    countWidgetsProfiles: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof Profiles;
  }
}


// tables/profiles_notifications.ts
declare namespace ns_8 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Notifications = ns_5.Notifications;
  import NotificationsId = ns_5.NotificationsId;
  import Profiles = ns_7.Profiles;
  import ProfilesId = ns_7.ProfilesId;
  export interface ProfilesNotificationsAttributes {
    profileId: string;
    notificationId: string;
    id: string;
  }
  export type ProfilesNotificationsPk = "id";
  export type ProfilesNotificationsId = ProfilesNotifications[ProfilesNotificationsPk];
  export type ProfilesNotificationsCreationAttributes = ProfilesNotificationsAttributes;
  export class ProfilesNotifications extends Model<ProfilesNotificationsAttributes, ProfilesNotificationsCreationAttributes> implements ProfilesNotificationsAttributes {
    profileId: string;
    notificationId: string;
    id: string;
    notification: Notifications;
    getNotification: Sequelize.BelongsToGetAssociationMixin<Notifications>;
    setNotification: Sequelize.BelongsToSetAssociationMixin<Notifications, NotificationsId>;
    createNotification: Sequelize.BelongsToCreateAssociationMixin<Notifications>;
    profile: Profiles;
    getProfile: Sequelize.BelongsToGetAssociationMixin<Profiles>;
    setProfile: Sequelize.BelongsToSetAssociationMixin<Profiles, ProfilesId>;
    createProfile: Sequelize.BelongsToCreateAssociationMixin<Profiles>;
    static initModel(sequelize: Sequelize.Sequelize): typeof ProfilesNotifications;
  }
}


// tables/sent_notifications.ts
declare namespace ns_9 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import Notifications = ns_5.Notifications;
  import NotificationsId = ns_5.NotificationsId;
  import Users = ns_11.Users;
  import UsersId = ns_11.UsersId;
  export interface SentNotificationsAttributes {
    id: string;
    notificationId: string;
    userId: string;
    status: 'sent' | 'read';
    timeSent?: Date;
    timeUpdated?: Date;
  }
  export type SentNotificationsPk = "id";
  export type SentNotificationsId = SentNotifications[SentNotificationsPk];
  export type SentNotificationsOptionalAttributes = "timeSent" | "timeUpdated";
  export type SentNotificationsCreationAttributes = Optional<SentNotificationsAttributes, SentNotificationsOptionalAttributes>;
  export class SentNotifications extends Model<SentNotificationsAttributes, SentNotificationsCreationAttributes> implements SentNotificationsAttributes {
    id: string;
    notificationId: string;
    userId: string;
    status: 'sent' | 'read';
    timeSent?: Date;
    timeUpdated?: Date;
    notification: Notifications;
    getNotification: Sequelize.BelongsToGetAssociationMixin<Notifications>;
    setNotification: Sequelize.BelongsToSetAssociationMixin<Notifications, NotificationsId>;
    createNotification: Sequelize.BelongsToCreateAssociationMixin<Notifications>;
    user: Users;
    getUser: Sequelize.BelongsToGetAssociationMixin<Users>;
    setUser: Sequelize.BelongsToSetAssociationMixin<Users, UsersId>;
    createUser: Sequelize.BelongsToCreateAssociationMixin<Users>;
    static initModel(sequelize: Sequelize.Sequelize): typeof SentNotifications;
  }
}


// tables/totals.ts
declare namespace ns_10 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  export interface TotalsAttributes {
    users?: number;
    notifications?: number;
    profiles?: number;
    id: string;
  }
  export type TotalsPk = "id";
  export type TotalsId = Totals[TotalsPk];
  export type TotalsOptionalAttributes = "users" | "notifications" | "profiles";
  export type TotalsCreationAttributes = Optional<TotalsAttributes, TotalsOptionalAttributes>;
  export class Totals extends Model<TotalsAttributes, TotalsCreationAttributes> implements TotalsAttributes {
    users?: number;
    notifications?: number;
    profiles?: number;
    id: string;
    static initModel(sequelize: Sequelize.Sequelize): typeof Totals;
  }
}


// tables/users.ts
declare namespace ns_11 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import AccessTokens = ns_1.AccessTokens;
  import AccessTokensId = ns_1.AccessTokensId;
  import Profiles = ns_7.Profiles;
  import ProfilesId = ns_7.ProfilesId;
  import SentNotifications = ns_9.SentNotifications;
  import SentNotificationsId = ns_9.SentNotificationsId;
  import UsersNotifications = ns_12.UsersNotifications;
  import UsersNotificationsId = ns_12.UsersNotificationsId;
  import UsersProfiles = ns_13.UsersProfiles;
  import UsersProfilesId = ns_13.UsersProfilesId;
  import UsersWidgets = ns_14.UsersWidgets;
  import UsersWidgetsId = ns_14.UsersWidgetsId;
  export interface UsersAttributes {
    id: string;
    active?: number;
    email?: string;
    lastNames?: string;
    names?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    password?: string;
    profileImg?: string;
    forgetPasswordToken?: string;
  }
  export type UsersPk = "id";
  export type UsersId = Users[UsersPk];
  export type UsersOptionalAttributes = "active" | "email" | "lastNames" | "names" | "timeCreated" | "timeUpdated" | "password" | "profileImg" | "forgetPasswordToken";
  export type UsersCreationAttributes = Optional<UsersAttributes, UsersOptionalAttributes>;
  export class Users extends Model<UsersAttributes, UsersCreationAttributes> implements UsersAttributes {
    id: string;
    active?: number;
    email?: string;
    lastNames?: string;
    names?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    password?: string;
    profileImg?: string;
    forgetPasswordToken?: string;
    accessTokens: AccessTokens[];
    getAccessTokens: Sequelize.HasManyGetAssociationsMixin<AccessTokens>;
    setAccessTokens: Sequelize.HasManySetAssociationsMixin<AccessTokens, AccessTokensId>;
    addAccessToken: Sequelize.HasManyAddAssociationMixin<AccessTokens, AccessTokensId>;
    addAccessTokens: Sequelize.HasManyAddAssociationsMixin<AccessTokens, AccessTokensId>;
    createAccessToken: Sequelize.HasManyCreateAssociationMixin<AccessTokens>;
    removeAccessToken: Sequelize.HasManyRemoveAssociationMixin<AccessTokens, AccessTokensId>;
    removeAccessTokens: Sequelize.HasManyRemoveAssociationsMixin<AccessTokens, AccessTokensId>;
    hasAccessToken: Sequelize.HasManyHasAssociationMixin<AccessTokens, AccessTokensId>;
    hasAccessTokens: Sequelize.HasManyHasAssociationsMixin<AccessTokens, AccessTokensId>;
    countAccessTokens: Sequelize.HasManyCountAssociationsMixin;
    profileIdProfiles: Profiles[];
    getProfileIdProfiles: Sequelize.BelongsToManyGetAssociationsMixin<Profiles>;
    setProfileIdProfiles: Sequelize.BelongsToManySetAssociationsMixin<Profiles, ProfilesId>;
    addProfileIdProfile: Sequelize.BelongsToManyAddAssociationMixin<Profiles, ProfilesId>;
    addProfileIdProfiles: Sequelize.BelongsToManyAddAssociationsMixin<Profiles, ProfilesId>;
    createProfileIdProfile: Sequelize.BelongsToManyCreateAssociationMixin<Profiles>;
    removeProfileIdProfile: Sequelize.BelongsToManyRemoveAssociationMixin<Profiles, ProfilesId>;
    removeProfileIdProfiles: Sequelize.BelongsToManyRemoveAssociationsMixin<Profiles, ProfilesId>;
    hasProfileIdProfile: Sequelize.BelongsToManyHasAssociationMixin<Profiles, ProfilesId>;
    hasProfileIdProfiles: Sequelize.BelongsToManyHasAssociationsMixin<Profiles, ProfilesId>;
    countProfileIdProfiles: Sequelize.BelongsToManyCountAssociationsMixin;
    sentNotifications: SentNotifications[];
    getSentNotifications: Sequelize.HasManyGetAssociationsMixin<SentNotifications>;
    setSentNotifications: Sequelize.HasManySetAssociationsMixin<SentNotifications, SentNotificationsId>;
    addSentNotification: Sequelize.HasManyAddAssociationMixin<SentNotifications, SentNotificationsId>;
    addSentNotifications: Sequelize.HasManyAddAssociationsMixin<SentNotifications, SentNotificationsId>;
    createSentNotification: Sequelize.HasManyCreateAssociationMixin<SentNotifications>;
    removeSentNotification: Sequelize.HasManyRemoveAssociationMixin<SentNotifications, SentNotificationsId>;
    removeSentNotifications: Sequelize.HasManyRemoveAssociationsMixin<SentNotifications, SentNotificationsId>;
    hasSentNotification: Sequelize.HasManyHasAssociationMixin<SentNotifications, SentNotificationsId>;
    hasSentNotifications: Sequelize.HasManyHasAssociationsMixin<SentNotifications, SentNotificationsId>;
    countSentNotifications: Sequelize.HasManyCountAssociationsMixin;
    usersNotifications: UsersNotifications[];
    getUsersNotifications: Sequelize.HasManyGetAssociationsMixin<UsersNotifications>;
    setUsersNotifications: Sequelize.HasManySetAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    addUsersNotification: Sequelize.HasManyAddAssociationMixin<UsersNotifications, UsersNotificationsId>;
    addUsersNotifications: Sequelize.HasManyAddAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    createUsersNotification: Sequelize.HasManyCreateAssociationMixin<UsersNotifications>;
    removeUsersNotification: Sequelize.HasManyRemoveAssociationMixin<UsersNotifications, UsersNotificationsId>;
    removeUsersNotifications: Sequelize.HasManyRemoveAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    hasUsersNotification: Sequelize.HasManyHasAssociationMixin<UsersNotifications, UsersNotificationsId>;
    hasUsersNotifications: Sequelize.HasManyHasAssociationsMixin<UsersNotifications, UsersNotificationsId>;
    countUsersNotifications: Sequelize.HasManyCountAssociationsMixin;
    usersProfiles: UsersProfiles[];
    getUsersProfiles: Sequelize.HasManyGetAssociationsMixin<UsersProfiles>;
    setUsersProfiles: Sequelize.HasManySetAssociationsMixin<UsersProfiles, UsersProfilesId>;
    addUsersProfile: Sequelize.HasManyAddAssociationMixin<UsersProfiles, UsersProfilesId>;
    addUsersProfiles: Sequelize.HasManyAddAssociationsMixin<UsersProfiles, UsersProfilesId>;
    createUsersProfile: Sequelize.HasManyCreateAssociationMixin<UsersProfiles>;
    removeUsersProfile: Sequelize.HasManyRemoveAssociationMixin<UsersProfiles, UsersProfilesId>;
    removeUsersProfiles: Sequelize.HasManyRemoveAssociationsMixin<UsersProfiles, UsersProfilesId>;
    hasUsersProfile: Sequelize.HasManyHasAssociationMixin<UsersProfiles, UsersProfilesId>;
    hasUsersProfiles: Sequelize.HasManyHasAssociationsMixin<UsersProfiles, UsersProfilesId>;
    countUsersProfiles: Sequelize.HasManyCountAssociationsMixin;
    usersWidgets: UsersWidgets[];
    getUsersWidgets: Sequelize.HasManyGetAssociationsMixin<UsersWidgets>;
    setUsersWidgets: Sequelize.HasManySetAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    addUsersWidget: Sequelize.HasManyAddAssociationMixin<UsersWidgets, UsersWidgetsId>;
    addUsersWidgets: Sequelize.HasManyAddAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    createUsersWidget: Sequelize.HasManyCreateAssociationMixin<UsersWidgets>;
    removeUsersWidget: Sequelize.HasManyRemoveAssociationMixin<UsersWidgets, UsersWidgetsId>;
    removeUsersWidgets: Sequelize.HasManyRemoveAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    hasUsersWidget: Sequelize.HasManyHasAssociationMixin<UsersWidgets, UsersWidgetsId>;
    hasUsersWidgets: Sequelize.HasManyHasAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    countUsersWidgets: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof Users;
  }
}


// tables/users_notifications.ts
declare namespace ns_12 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import Notifications = ns_5.Notifications;
  import NotificationsId = ns_5.NotificationsId;
  import Users = ns_11.Users;
  import UsersId = ns_11.UsersId;
  export interface UsersNotificationsAttributes {
    id: string;
    notificationId?: string;
    userId?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
  }
  export type UsersNotificationsPk = "id";
  export type UsersNotificationsId = UsersNotifications[UsersNotificationsPk];
  export type UsersNotificationsOptionalAttributes = "notificationId" | "userId" | "timeCreated" | "timeUpdated";
  export type UsersNotificationsCreationAttributes = Optional<UsersNotificationsAttributes, UsersNotificationsOptionalAttributes>;
  export class UsersNotifications extends Model<UsersNotificationsAttributes, UsersNotificationsCreationAttributes> implements UsersNotificationsAttributes {
    id: string;
    notificationId?: string;
    userId?: string;
    timeCreated?: Date;
    timeUpdated?: Date;
    notification: Notifications;
    getNotification: Sequelize.BelongsToGetAssociationMixin<Notifications>;
    setNotification: Sequelize.BelongsToSetAssociationMixin<Notifications, NotificationsId>;
    createNotification: Sequelize.BelongsToCreateAssociationMixin<Notifications>;
    user: Users;
    getUser: Sequelize.BelongsToGetAssociationMixin<Users>;
    setUser: Sequelize.BelongsToSetAssociationMixin<Users, UsersId>;
    createUser: Sequelize.BelongsToCreateAssociationMixin<Users>;
    static initModel(sequelize: Sequelize.Sequelize): typeof UsersNotifications;
  }
}


// tables/users_profiles.ts
declare namespace ns_13 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Profiles = ns_7.Profiles;
  import ProfilesId = ns_7.ProfilesId;
  import Users = ns_11.Users;
  import UsersId = ns_11.UsersId;
  export interface UsersProfilesAttributes {
    userId: string;
    profileId: string;
  }
  export type UsersProfilesPk = "userId" | "profileId";
  export type UsersProfilesId = UsersProfiles[UsersProfilesPk];
  export type UsersProfilesCreationAttributes = UsersProfilesAttributes;
  export class UsersProfiles extends Model<UsersProfilesAttributes, UsersProfilesCreationAttributes> implements UsersProfilesAttributes {
    userId: string;
    profileId: string;
    profile: Profiles;
    getProfile: Sequelize.BelongsToGetAssociationMixin<Profiles>;
    setProfile: Sequelize.BelongsToSetAssociationMixin<Profiles, ProfilesId>;
    createProfile: Sequelize.BelongsToCreateAssociationMixin<Profiles>;
    user: Users;
    getUser: Sequelize.BelongsToGetAssociationMixin<Users>;
    setUser: Sequelize.BelongsToSetAssociationMixin<Users, UsersId>;
    createUser: Sequelize.BelongsToCreateAssociationMixin<Users>;
    static initModel(sequelize: Sequelize.Sequelize): typeof UsersProfiles;
  }
}


// tables/users_widgets.ts
declare namespace ns_14 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Users = ns_11.Users;
  import UsersId = ns_11.UsersId;
  import Widgets = ns_15.Widgets;
  import WidgetsId = ns_15.WidgetsId;
  export interface UsersWidgetsAttributes {
    id: string;
    userId: string;
    widgetId: string;
    columnPosition: number;
    rowPosition: number;
  }
  export type UsersWidgetsPk = "id";
  export type UsersWidgetsId = UsersWidgets[UsersWidgetsPk];
  export type UsersWidgetsCreationAttributes = UsersWidgetsAttributes;
  export class UsersWidgets extends Model<UsersWidgetsAttributes, UsersWidgetsCreationAttributes> implements UsersWidgetsAttributes {
    id: string;
    userId: string;
    widgetId: string;
    columnPosition: number;
    rowPosition: number;
    user: Users;
    getUser: Sequelize.BelongsToGetAssociationMixin<Users>;
    setUser: Sequelize.BelongsToSetAssociationMixin<Users, UsersId>;
    createUser: Sequelize.BelongsToCreateAssociationMixin<Users>;
    widget: Widgets;
    getWidget: Sequelize.BelongsToGetAssociationMixin<Widgets>;
    setWidget: Sequelize.BelongsToSetAssociationMixin<Widgets, WidgetsId>;
    createWidget: Sequelize.BelongsToCreateAssociationMixin<Widgets>;
    static initModel(sequelize: Sequelize.Sequelize): typeof UsersWidgets;
  }
}


// tables/widgets.ts
declare namespace ns_15 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Optional = __beyond_dep_ns_1.Optional;
  import UsersWidgets = ns_14.UsersWidgets;
  import UsersWidgetsId = ns_14.UsersWidgetsId;
  import WidgetsProfiles = ns_16.WidgetsProfiles;
  import WidgetsProfilesId = ns_16.WidgetsProfilesId;
  export interface WidgetsAttributes {
    id: string;
    active?: number;
    identifier?: string;
    metadata?: string;
    order?: number;
    timeUpdated?: Date;
    timeCreated?: Date;
    width: number;
    height: number;
    name?: string;
    description?: string;
  }
  export type WidgetsPk = "id";
  export type WidgetsId = Widgets[WidgetsPk];
  export type WidgetsOptionalAttributes = "active" | "identifier" | "metadata" | "order" | "timeUpdated" | "timeCreated" | "width" | "height" | "name" | "description";
  export type WidgetsCreationAttributes = Optional<WidgetsAttributes, WidgetsOptionalAttributes>;
  export class Widgets extends Model<WidgetsAttributes, WidgetsCreationAttributes> implements WidgetsAttributes {
    id: string;
    active?: number;
    identifier?: string;
    metadata?: string;
    order?: number;
    timeUpdated?: Date;
    timeCreated?: Date;
    width: number;
    height: number;
    name?: string;
    description?: string;
    usersWidgets: UsersWidgets[];
    getUsersWidgets: Sequelize.HasManyGetAssociationsMixin<UsersWidgets>;
    setUsersWidgets: Sequelize.HasManySetAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    addUsersWidget: Sequelize.HasManyAddAssociationMixin<UsersWidgets, UsersWidgetsId>;
    addUsersWidgets: Sequelize.HasManyAddAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    createUsersWidget: Sequelize.HasManyCreateAssociationMixin<UsersWidgets>;
    removeUsersWidget: Sequelize.HasManyRemoveAssociationMixin<UsersWidgets, UsersWidgetsId>;
    removeUsersWidgets: Sequelize.HasManyRemoveAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    hasUsersWidget: Sequelize.HasManyHasAssociationMixin<UsersWidgets, UsersWidgetsId>;
    hasUsersWidgets: Sequelize.HasManyHasAssociationsMixin<UsersWidgets, UsersWidgetsId>;
    countUsersWidgets: Sequelize.HasManyCountAssociationsMixin;
    widgetsProfiles: WidgetsProfiles[];
    getWidgetsProfiles: Sequelize.HasManyGetAssociationsMixin<WidgetsProfiles>;
    setWidgetsProfiles: Sequelize.HasManySetAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    addWidgetsProfile: Sequelize.HasManyAddAssociationMixin<WidgetsProfiles, WidgetsProfilesId>;
    addWidgetsProfiles: Sequelize.HasManyAddAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    createWidgetsProfile: Sequelize.HasManyCreateAssociationMixin<WidgetsProfiles>;
    removeWidgetsProfile: Sequelize.HasManyRemoveAssociationMixin<WidgetsProfiles, WidgetsProfilesId>;
    removeWidgetsProfiles: Sequelize.HasManyRemoveAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    hasWidgetsProfile: Sequelize.HasManyHasAssociationMixin<WidgetsProfiles, WidgetsProfilesId>;
    hasWidgetsProfiles: Sequelize.HasManyHasAssociationsMixin<WidgetsProfiles, WidgetsProfilesId>;
    countWidgetsProfiles: Sequelize.HasManyCountAssociationsMixin;
    static initModel(sequelize: Sequelize.Sequelize): typeof Widgets;
  }
}


// tables/widgets_profiles.ts
declare namespace ns_16 {
  import Sequelize = __beyond_dep_ns_1;
  import Model = __beyond_dep_ns_1.Model;
  import Profiles = ns_7.Profiles;
  import ProfilesId = ns_7.ProfilesId;
  import Widgets = ns_15.Widgets;
  import WidgetsId = ns_15.WidgetsId;
  export interface WidgetsProfilesAttributes {
    id: string;
    widgetId: string;
    profileId: string;
  }
  export type WidgetsProfilesPk = "id";
  export type WidgetsProfilesId = WidgetsProfiles[WidgetsProfilesPk];
  export type WidgetsProfilesCreationAttributes = WidgetsProfilesAttributes;
  export class WidgetsProfiles extends Model<WidgetsProfilesAttributes, WidgetsProfilesCreationAttributes> implements WidgetsProfilesAttributes {
    id: string;
    widgetId: string;
    profileId: string;
    profile: Profiles;
    getProfile: Sequelize.BelongsToGetAssociationMixin<Profiles>;
    setProfile: Sequelize.BelongsToSetAssociationMixin<Profiles, ProfilesId>;
    createProfile: Sequelize.BelongsToCreateAssociationMixin<Profiles>;
    widget: Widgets;
    getWidget: Sequelize.BelongsToGetAssociationMixin<Widgets>;
    setWidget: Sequelize.BelongsToSetAssociationMixin<Widgets, WidgetsId>;
    createWidget: Sequelize.BelongsToCreateAssociationMixin<Widgets>;
    static initModel(sequelize: Sequelize.Sequelize): typeof WidgetsProfiles;
  }
}


export import DB = ns_0.DB;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };