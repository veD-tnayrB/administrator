/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@essential-js/admin-server/db';
import * as __beyond_dep_ns_1 from '@essential-js/admin-server/types';
// cases/forget-password.ts
declare namespace ns_0 {
  import DB = __beyond_dep_ns_0.DB;
  export interface ISendEmailForgetPassword {
    email: string;
  }
  export interface IRecoverPassword {
    token: string;
    newPassword: string;
  }
  export class ForgetPassword {
    static model: typeof DB.models.Users;
    static sendEmail: (params: ISendEmailForgetPassword) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    static recover: (params: IRecoverPassword) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
}


// cases/get.ts
declare namespace ns_1 {
  export interface IGet {
    token: string;
  }
  export class Get {
    #private;
    static execute: (params: {
      token: string;
    }) => Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// cases/login.ts
declare namespace ns_2 {
  export interface ILoginParams {
    email: string;
    password?: string;
    notificationsToken?: string;
    timezone?: string;
  }
  export class Login {
    #private;
    static execute(params: ILoginParams): Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// cases/logout.ts
declare namespace ns_3 {
  export interface ILogoutParams {
    token: string;
  }
  export class Logout {
    #private;
    static execute(params: {
      token: string;
    }): Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
}


// cases/update.ts
declare namespace ns_4 {
  import IAuthUser = __beyond_dep_ns_1.IAuthUser;
  export class Update {
    static execute: (params: Partial<IAuthUser>) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    static checkAccessToken: (params: {
      token: string;
      userId: string;
    }) => Promise<boolean>;
  }
}


// index.ts
declare namespace ns_5 {
  import IAuthUser = __beyond_dep_ns_1.IAuthUser;
  import ILoginParams = ns_2.ILoginParams;
  import IGet = ns_1.IGet;
  import ILogoutParams = ns_3.ILogoutParams;
  import IRecoverPassword = ns_0.IRecoverPassword;
  import ISendEmailForgetPassword = ns_0.ISendEmailForgetPassword;
  class AuthManager {
    login: (params: ILoginParams) => Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    getUser: (params: IGet) => Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    logout: (params: ILogoutParams) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    update: (params: Partial<IAuthUser>) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    forgetPassword: (params: ISendEmailForgetPassword) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
    recoverPassword: (params: IRecoverPassword) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
  export const Auth: AuthManager;
  export {};
}


export import ISendEmailForgetPassword = ns_0.ISendEmailForgetPassword;
export import IGet = ns_1.IGet;
export import ILogoutParams = ns_3.ILogoutParams;
export import Auth = ns_5.Auth;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };