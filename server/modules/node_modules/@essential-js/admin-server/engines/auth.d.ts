/************
Processor: ts
************/

// cases/get.ts
declare namespace ns_0 {
  export interface IGet {
    token: string;
  }
  export class Get {
    #private;
    static execute: (params: {
      token: string;
    }) => Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// cases/login.ts
declare namespace ns_1 {
  export interface ILoginParams {
    email: string;
    password?: string;
    notificationsToken?: string;
    timezone?: string;
  }
  export class Login {
    #private;
    static execute(params: ILoginParams): Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// cases/logout.ts
declare namespace ns_2 {
  export class Logout {
    #private;
    static execute(params: {
      token: string;
    }): Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
}


// index.ts
declare namespace ns_3 {
  import ILoginParams = ns_1.ILoginParams;
  import IGet = ns_0.IGet;
  class AuthManager {
    login: (params: ILoginParams) => Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    getUser: (params: IGet) => Promise<{
      status: boolean;
      data: {
        user: any;
        token: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    logout: (params: {
      token: string;
    }) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: any;
    }>;
  }
  export const Auth: AuthManager;
  export {};
}


export import Auth = ns_3.Auth;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };