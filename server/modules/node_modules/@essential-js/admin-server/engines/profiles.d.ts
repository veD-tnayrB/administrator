/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@essential-js/admin-server/db';
import * as __beyond_dep_ns_1 from '@essential-js/admin-server/helpers';
// get.ts
declare namespace ns_0 {
  import DB = __beyond_dep_ns_0.DB;
  export interface IGetParams {
    id: string;
    include?: unknown[];
  }
  export class Get {
    static model: typeof DB.models.Profiles;
    static execute: (params: IGetParams) => Promise<{
      status: boolean;
      data: {
        id: any;
        name: any;
        description: any;
        timeCreated: any;
        timeUpdated: any;
        modules: unknown[];
        widgets: any;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
  }
}


// index.ts
declare namespace ns_1 {
  import Manager = __beyond_dep_ns_1.Manager;
  import IBulkImport = __beyond_dep_ns_1.IBulkImport;
  import IGetTemplate = __beyond_dep_ns_1.IGetTemplate;
  import IGenerateReport = __beyond_dep_ns_1.IGenerateReport;
  import IGetParams = ns_0.IGetParams;
  import IPublish = ns_2.IPublish;
  export class ProfilesManager extends Manager<IPublish> {
    #private;
    constructor();
    bulkImport: (params: IBulkImport) => Promise<{
      status: boolean;
      data: any[];
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    generateReport: (params: IGenerateReport) => Promise<{
      status: boolean;
      data?: undefined;
      error?: undefined;
    } | {
      status: boolean;
      data: {
        pathFile: string;
        filename: string;
        pathname: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    getTemplate: (params: IGetTemplate) => Promise<{
      status: boolean;
      data: {
        pathFile: string;
        filename: string;
        pathname: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    get: (params: IGetParams) => Promise<{
      status: boolean;
      data: {
        id: any;
        name: any;
        description: any;
        timeCreated: any;
        timeUpdated: any;
        modules: unknown[];
        widgets: any;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: any;
      data?: undefined;
    }>;
    create: (params: IPublish) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    update: (params: IPublish) => Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
  }
  export const Profiles: ProfilesManager;
}


// publish.ts
declare namespace ns_2 {
  import DB = __beyond_dep_ns_0.DB;
  export interface IPublish {
    id: string;
    modules: Record<string, Record<string, boolean>>;
    name: string;
    description: string;
    timeCreated: Date;
    widgets: string[];
    timeUpdated: Date;
  }
  export class Publish {
    static model: typeof DB.models.Profiles;
    static modulesModel: typeof DB.models.ProfileModulePermissions;
    static widgetsModel: typeof DB.models.WidgetsProfiles;
    static usersWidgetsModel: typeof DB.models.UsersWidgets;
    static handleModules(profileId: string, modules: Record<string, Record<string, boolean>>, transaction: any): Promise<void>;
    static handleWidgets(profileId: string, widgets: string[], transaction: any): Promise<void>;
    static create(params: IPublish): Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
    static update(params: IPublish): Promise<{
      status: boolean;
      data: {
        id: string;
      };
      error?: undefined;
    } | {
      status: boolean;
      error: {
        error: any;
        target: string;
      };
      data?: undefined;
    }>;
  }
}


export import Profiles = ns_1.Profiles;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };