/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/model';
// entities/session.ts
declare namespace ns_0 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import User = ns_3.User;
  /**
   * Interface for login parameters.
   */
  interface ILoginParams {
    email: string;
    notificationsToken: string;
    password: string;
    timezone: string;
  }
  /**
   * Enum for supported authentication providers.
   * @readonly
   * @enum {string}
   */
  export enum Providers {
    Google = "Google",
  }
  /**
   * Class representing a user session.
   * @extends ReactiveModel
   */
  class Session extends ReactiveModel<Session> {
    #private;
    get user(): User;
    /**
     * Getter to check if the user is logged in.
     */
    get isLogged(): boolean;
    get isLoaded(): boolean;
    get token(): any;
    /**
     * Session constructor.
     */
    constructor();
    /**
     * Method to log in a user.
     */
    login: (params: ILoginParams, provider?: 'Google') => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    }>;
    load: () => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    } | undefined>;
    /**
     * Method to log out the current user.
     */
    logout: () => Promise<void>;
  }
  /**
   * Instance of the Session class.
   */
  export const session: Session;
  export {};
}


// entities/types.ts
declare namespace ns_1 {
  export interface ILogin {
    email: string;
    password?: string;
    notificationsToken: string;
  }
}


// entities/user.item.provider.ts
declare namespace ns_2 {
  import IUser = ns_3.IUser;
  export class UserItemProvider {
    #private;
    login: (params: {
      email: string;
      password?: string;
      notificationsToken: string;
    }) => Promise<any>;
    data: (params: {
      token: string;
    }) => Promise<any>;
    logout: (params: {
      token: string;
    }) => Promise<any>;
    forgetPassword: (params: {
      email: string;
    }) => Promise<any>;
    publish: (params: Partial<IUser>) => Promise<any>;
    recoverPassword: ({
      newPassword,
      token
    }: {
      newPassword: string;
      token: string;
    }) => Promise<any>;
  }
}


// entities/user.item.ts
declare namespace ns_3 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import ILogin = ns_1.ILogin;
  export interface IUser {
    id: string;
    active: boolean;
    email: string;
    lastNames: string;
    names: string;
    timeCreated: Date;
    profiles: {
      id: string;
      name: string;
    }[];
    profileImg: string;
    permissions: {
      id: string;
      name: string;
    }[];
    timeUpdated: Date;
    token: string;
  }
  export class User extends ReactiveModel<IUser> {
    private provider;
    get fullName(): any;
    constructor();
    login: (params: ILogin) => Promise<any>;
    load: (params: {
      token: string;
    }) => Promise<any>;
    logout: () => Promise<any>;
    forgetPassword: (params: {
      email: string;
    }) => Promise<any>;
    recoverPassword: (params: {
      token: string;
      newPassword: string;
    }) => Promise<any>;
    publish: () => Promise<any>;
    set(data: Partial<IUser>): void;
  }
}


export import Providers = ns_0.Providers;
export import session = ns_0.session;
export import IUser = ns_3.IUser;
export import User = ns_3.User;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };