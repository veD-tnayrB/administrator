/************
Processor: ts
************/

import __beyond_dep_def_0 from 'react';
// content.tsx
declare namespace ns_0 {
  import React = __beyond_dep_def_0;
  interface ICollapsibleProps {
    children: React.ReactNode;
    className?: string;
  }
  export function CollapsibleContent({
    className,
    children
  }: ICollapsibleProps): React.JSX.Element;
  export {};
}


// context.tsx
declare namespace ns_1 {
  import React = __beyond_dep_def_0;
  export interface IContext {
    open: boolean;
    setOpen: (open: boolean) => void;
    onChange?: (open: boolean) => void;
  }
  export const CollapsibleContext: React.Context<IContext>;
  export const useCollapsibleContext: () => IContext;
}


// header.tsx
declare namespace ns_2 {
  import React = __beyond_dep_def_0;
  interface ICollapsibleProps {
    children: React.ReactNode;
    className?: string;
    toggleTitle?: boolean;
  }
  export function CollapsibleHeader({
    children,
    className,
    toggleTitle
  }: ICollapsibleProps): JSX.Element;
  export {};
}


// index.tsx
declare namespace ns_3 {
  import React = __beyond_dep_def_0;
  interface IContainerProps {
    children: React.ReactNode;
    className?: string;
    open?: boolean;
    onToggle?: (open: boolean) => void;
  }
  export function CollapsibleContainer({
    children,
    onToggle,
    open,
    className
  }: IContainerProps): JSX.Element;
  export {};
}


export import CollapsibleContent = ns_0.CollapsibleContent;
export import CollapsibleHeader = ns_2.CollapsibleHeader;
export import CollapsibleContainer = ns_3.CollapsibleContainer;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };