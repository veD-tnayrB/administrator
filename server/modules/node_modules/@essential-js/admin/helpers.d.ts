/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@bgroup/http-suite/api';
// api/api.helper.ts
declare namespace ns_0 {
  import BaseApi = __beyond_dep_ns_0.Api;
  export class Api extends BaseApi {
    #private;
    constructor(url?: string);
    private handleSpecificError;
    private handleResponse;
    get(url: string): Promise<any>;
    post(url: string, data?: object): Promise<any>;
    put(url: string, data?: object): Promise<any>;
    delete(url: string, data?: object): Promise<any>;
    stream(url: string): Promise<any>;
  }
}


// providers/collection.provider.ts
declare namespace ns_1 {
  import Api = ns_0.Api;
  interface IListParams {
    where?: Record<string, unknown>;
    start: number | undefined;
    limit: number | undefined;
  }
  export abstract class CollectionProvider {
    #private;
    [key: string]: any;
    get api(): Api;
    get endpoints(): {
      list: string;
    };
    constructor(params: {
      endpoints: {
        list: string;
      };
    });
    list: (params: IListParams) => Promise<any>;
  }
  export {};
}


// providers/item.provider.ts
declare namespace ns_2 {
  import Api = ns_0.Api;
  interface IItemEndpoints {
    publish: string;
    get: string;
    delete: string;
  }
  export abstract class ItemProvider<T extends {
    isNew: boolean;
    id: string;
  }> {
    #private;
    [key: string]: any;
    get api(): Api;
    constructor(params: {
      endpoints: IItemEndpoints;
    });
    publish: (params: Partial<T>) => Promise<any>;
    data: (params: {
      id: string;
    }) => Promise<any>;
    delete: (id: string) => Promise<any>;
  }
  export {};
}


export import Api = ns_0.Api;
export import CollectionProvider = ns_1.CollectionProvider;
export import ItemProvider = ns_2.ItemProvider;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };