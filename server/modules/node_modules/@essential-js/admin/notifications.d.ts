/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/model';
import * as __beyond_dep_ns_1 from '@essential-js/admin/models';
// index.ts
declare namespace ns_0 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  import NotificationHistory = __beyond_dep_ns_1.NotificationHistory;
  class NotificationsHandler extends ReactiveModel<NotificationsHandler> {
    #private;
    get token(): string;
    get items(): NotificationHistory[];
    get current(): NotificationHistory | null;
    constructor();
    init: () => Promise<string | {
      status: boolean;
      error: unknown;
    }>;
    load: (params: {
      userId: string;
    }) => Promise<any>;
    markAsRead: (params: {
      ids: string[];
      userId: string;
    }) => Promise<{
      status: boolean;
      error?: undefined;
    } | {
      status: boolean;
      error: unknown;
    } | undefined>;
  }
  export const notificationsHandler: NotificationsHandler;
  export {};
}


// library/desktop.ts
declare namespace ns_1 {
  import Notifier = ns_2.Notifier;
  /**
   * Interface for Desktop Credentials.
   * @interface
   */
  export interface IDesktopCredentials {
    apiKey: string;
    authDomain: string;
    databaseURL: string;
    projectId: string;
    storageBucket: string;
    messagingSenderId: string;
    appId: string;
    measurementId: string;
    VAPID_KEY: string;
  }
  /**
   * Class representing Desktop Notifications.
   * @class
   */
  export class Desktop {
    #private;
    /**
     * Getter for token.
     */
    get token(): string;
    /**
     * Initializes Desktop Notifications.
     * @async
     * @param {FirebaseNotifications} parent - The parent FirebaseNotifications instance.
     * @param {Object} params - The initialization parameters.
     * @param {IDesktopCredentials} params.credentials - The credentials for Firebase.
     * @param {Object} params.opts - Additional options.
     * @param {string} params.opts.userId - The user ID.
     */
    init: (parent: Notifier, params: {
      credentials: IDesktopCredentials;
      opts?: {
        userId: string;
      };
    }) => Promise<void>;
    /**
     * Registers the device for notifications.
     * @async
     * @private
     */
    register: () => Promise<any>;
    renewToken: () => Promise<{
      status: boolean;
    } | undefined>;
  }
}


// library/notifier.index.ts
declare namespace ns_2 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  /**
   * Class representing Firebase Notifications.
   * @class
   * @extends {ReactiveModel<Notifier>}
   */
  export class Notifier extends ReactiveModel<Notifier> {
    #private;
    /** Callback for message received event. */
    onMessageReceived: (params: {
      notification: any;
      metadata: any;
    }) => void;
    /** Callback for message error event. */
    onMessageError: (error: string) => void;
    /** Callback for handle the device registration. */
    onRegisterDevice: (params: {
      tokenDevice: string;
      device: string;
    }) => void | Promise<any>;
    /** Getter for device token.
     */
    get deviceToken(): string;
    /** Constructor for FirebaseNotifications. */
    constructor();
    onMessagePreHandler: (payload: Record<string, any>) => void;
    /**
     * Method to initialize notifications.
     * @async
     * @param {Object} params - The initialization parameters.
     * @param {IDesktopCredentials} params.credentials - The desktop credentials.
     * @param {Object} params.opts - Additional options.
     * @param {string} params.opts.userId - The user ID.
     */
    init: () => Promise<{
      status: boolean;
      token: string;
    } | undefined>;
    /**
     * Renueva el token del dispositivo si es necesario.
     */
    renewDeviceToken: () => Promise<{
      status: boolean;
    } | undefined>;
  }
}


export import notificationsHandler = ns_0.notificationsHandler;
export import Notifier = ns_2.Notifier;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };