/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'react';
import __beyond_dep_def_0 from 'react';
// button-group/button-group.tsx
declare namespace ns_0 {
  /// <reference types="react" />
  import IProps = ns_2.IProps;
  export function ButtonGroup({
    orientation,
    children,
    ...props
  }: IProps): JSX.Element;
}


// button-group/context.tsx
declare namespace ns_1 {
  import React = __beyond_dep_def_0;
  interface IButtonGroupContext {
    active?: any;
    selected: number;
    setSelected: any;
  }
  export const ButtonGroupContext: React.Context<IButtonGroupContext>;
  export const useButtonGroupContext: () => IButtonGroupContext;
  export {};
}


// button-group/type.ts
declare namespace ns_2 {
  /// <reference types="react" />
  export interface IProps {
    variant?: string;
    size?: 'small' | 'medium' | 'tall';
    orientation?: 'row' | 'column';
    children: React.ReactNode;
    selected: number;
    disabled?: boolean;
    index?: number;
  }
}


// button/button.tsx
declare namespace ns_3 {
  import React = __beyond_dep_def_0;
  import IProps = ns_4.IProps;
  export const Button: React.ForwardRefExoticComponent<IProps & React.RefAttributes<HTMLButtonElement>>;
}


// button/interface.ts
declare namespace ns_4 {
  /// <reference types="react" />
  export interface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    data?: Record<string, any>;
    label?: React.ReactNode;
    children?: React.ReactNode;
    icon?: string;
    loading?: boolean;
    fetching?: boolean;
    variant?: string;
    bordered?: boolean;
    sizing?: 'sm' | 'md' | 'lg' | 'xs';
    disabled?: boolean;
    block?: boolean;
    index?: number;
    title?: string;
  }
}


// html-render.tsx
declare namespace ns_5 {
  import React = __beyond_dep_def_0;
  type HtmlRenderProps = {
    children: string;
    tag?: keyof JSX.IntrinsicElements;
  };
  export function HtmlWrapper({
    children,
    tag
  }: HtmlRenderProps): React.JSX.Element;
  export {};
}


// link.tsx
declare namespace ns_6 {
  import React = __beyond_dep_def_0;
  export function Link({
    href,
    ...props
  }: React.AnchorHTMLAttributes<HTMLAnchorElement>): JSX.Element;
}


// spinner.tsx
declare namespace ns_7 {
  import React = __beyond_dep_def_0;
  import RefAttributes = __beyond_dep_ns_0.RefAttributes;
  type properties = {
    color?: string;
    className?: string;
    type?: string;
    size?: 'xs' | 'md' | 'lg' | 'xl';
    active: boolean;
  };
  export const Spinner: React.FC<properties & RefAttributes<unknown>>;
  export {};
}


export import ButtonGroup = ns_0.ButtonGroup;
export import Button = ns_3.Button;
export import HtmlWrapper = ns_5.HtmlWrapper;
export import Link = ns_6.Link;
export import Spinner = ns_7.Spinner;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };