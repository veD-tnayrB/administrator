/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/model';
import __beyond_dep_def_1 from 'react';
// container.tsx
declare namespace ns_0 {
  /// <reference types="react" />
  export function ContextMenuContainer({
    children
  }: {
    children: any;
  }): JSX.Element;
}


// context-menu.ts
declare namespace ns_1 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  export class ContextMenu extends ReactiveModel<ContextMenu> {
    private _event;
    constructor();
    get event(): MouseEvent | null;
    get currentTarget(): EventTarget | null;
    get target(): EventTarget | null;
    private init;
  }
  export const ContextMenuManager: ContextMenu;
}


// context.tsx
declare namespace ns_2 {
  import React = __beyond_dep_def_1;
  interface IContextMenu {
    opened?: boolean;
    position?: {
      x: number;
      y: number;
    };
    closeContextMenu: () => void;
  }
  export const ContextMenuContext: React.Context<IContextMenu>;
  export const useContextMenuContext: () => IContextMenu;
  export {};
}


// index.tsx
declare namespace ns_3 {
  import React = __beyond_dep_def_1;
  interface ContextMenuProps {
    className?: string;
    unmount: (value: boolean) => void;
    children: React.ReactNode;
  }
  export function ContextMenu({
    className,
    unmount,
    children
  }: ContextMenuProps): JSX.Element;
  export {};
}


// item.tsx
declare namespace ns_4 {
  /// <reference types="react" />
  interface ContextItemProps {
    onClick: (event: any) => void;
    icon?: string;
    label: string;
  }
  export function ContextItem({
    onClick,
    icon,
    label
  }: ContextItemProps): JSX.Element;
  export {};
}


export import ContextMenuContainer = ns_0.ContextMenuContainer;
export import ContextMenuManager = ns_1.ContextMenuManager;
export import ContextMenu = ns_3.ContextMenu;
export import ContextItem = ns_4.ContextItem;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };