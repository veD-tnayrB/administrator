import * as dependency_0 from '@beyond-js/kernel/bundle';
import * as dependency_1 from 'react';
import * as dependency_2 from '@beyond-js/kernel/styles';

const {Bundle: __Bundle} = dependency_0;
const __pkg = new __Bundle({"module":{"vspecifier":"pragmate-ui@0.0.6/spinner"},"type":"code","name":"spinner"}, import.meta.url).package();;

__pkg.dependencies.update([['react', dependency_1],['@beyond-js/kernel/styles', dependency_2]]);

brequire('@beyond-js/kernel/styles').styles.register('pragmate-ui@0.0.6/spinner')


const ims = new Map();

/*************************
INTERNAL MODULE: ./spinner
*************************/

ims.set('./spinner', {hash: 1129442560, creator: function (require, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spinner = void 0;
var _react = require("react");
/*bundle*/const Spinner = exports.Spinner = (0, _react.forwardRef)((props, ref) => {
  let {
    color,
    className,
    size,
    type,
    active
  } = props;
  const types = ['on-primary', 'on-secondary', 'on-surface', 'on-error', 'primary', 'secondary', 'tertiary'];
  const clsType = types.includes(type) ? type : 'primary';
  const style = {};
  if (color) style.stroke = color;
  className = `${clsType}${className ? ` ${className}` : ''}`;
  let cls = className ? `${className} pragmate-element-spinner` : 'pragmate-element-spinner';
  if (active) cls += ' is-active';
  const sizes = {
    xs: 30,
    md: 40,
    lg: 50,
    xl: 60
  };
  const circleSize = sizes[size] || 30;
  return _react.default.createElement("div", {
    className: cls,
    ref: ref
  }, _react.default.createElement("svg", {
    viewBox: "0 0 100 100"
  }, _react.default.createElement("circle", {
    cx: "50",
    cy: "50",
    r: circleSize,
    style: style
  })));
});
}});

__pkg.exports.descriptor = [{"im":"./spinner","from":"Spinner","name":"Spinner"}];

export let Spinner;

// Module exports
__pkg.exports.process = function({require, prop, value}) {
    (require || prop === 'Spinner') && (Spinner = require ? require('./spinner').Spinner : value);

};
export const __beyond_pkg = __pkg;

export const hmr = new (function () {
    this.on = (event, listener) => void 0;
    this.off = (event, listener) => void 0;
});


__pkg.initialise(ims);
//# sourceMappingURL=spinner.browser.mjs.map