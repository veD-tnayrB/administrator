/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/reactive/model';
// colors\converters.ts
declare namespace ns_0 {
  export function hexToRgb(hex: string): {
    r: number;
    g: number;
    b: number;
  };
  export function rgbToHex(r: number, g: number, b: number): string;
  export function hslToHex(h: any, s: any, l: any): string;
}


// colors\darken.ts
declare namespace ns_1 {
  export function darkenHexColor(hex: string, percentage: number): string;
}


// colors\lighen.ts
declare namespace ns_2 {
  export function lightenHexColor(hex: string, percentage: number): string;
}


// index.ts
declare namespace ns_3 {
  import ReactiveModel = __beyond_dep_ns_0.ReactiveModel;
  export class TemplateManager extends ReactiveModel<TemplateManager> {
    #private;
    get root(): any;
    get dark(): CSSStyleRule;
    get light(): CSSStyleRule;
    constructor();
    getCustomProperties(theme: any): {
      [key: string]: string;
      theme: string;
    };
    initialise(): void;
  }
  export const TplManager: TemplateManager;
}


// properties.ts
declare namespace ns_4 {
  /**
   * Get all custom properties on a page
   * @return array<array[string, string]>
   * ex; [["--color-accent", "#b9f500"], ["--color-text", "#252525"], ...]
   */
  export const getCSSCustomPropIndex: () => Array<[string, string]>;
  export const toCamelCase: (str: string) => string;
  export const getCSSCustomPropsObject: () => {
    [key: string]: string;
  };
  export const getCSSCustomPropIndexFromStylesheet: (stylesheetHref: string, theme: string) => Array<[string, string]>;
  export const getCSSCustomPropsObjectFromStylesheet: (stylesheetHref: string, theme: string) => {
    [key: string]: string;
    theme: string;
  };
}


export import hslToHex = ns_0.hslToHex;
export import TplManager = ns_3.TplManager;
export import getCSSCustomPropIndex = ns_4.getCSSCustomPropIndex;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };