/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'react';
import * as __beyond_dep_ns_1 from '@beyond-js/reactive/model';
// index.tsx
declare namespace ns_0 {
  import HTMLAttributes = __beyond_dep_ns_0.HTMLAttributes;
  interface Props extends HTMLAttributes<HTMLDivElement> {
    className: string;
    position: Partial<IPosition>;
  }
  interface IPosition {
    top: string;
    left: string;
    right: string;
    bottom: string;
  }
  export function Toasts({
    position,
    className,
    ...props
  }: Partial<Props>): JSX.Element;
  export {};
}


// model.ts
declare namespace ns_1 {
  import ReactiveModel = __beyond_dep_ns_1.ReactiveModel;
  export type ToastTypes = 'success' | 'error' | 'info' | 'loading' | 'warning';
  export interface IToast {
    id: string;
    message: string;
    type: ToastTypes;
    duration?: number;
  }
  class Toast extends ReactiveModel<any> {
    #private;
    get current(): Array<IToast | undefined>;
    set current(newValue: Array<IToast | undefined>);
    constructor();
    remove(toastId: string): void;
    success(message: string, duration?: number): string;
    error(message: string, duration?: number): string;
    warning(message: string, duration?: number): string;
    info(message: string, duration?: number): string;
    loading(message: string, duration?: number): string;
  }
  export const toast: Toast;
  export {};
}


// toast.tsx
declare namespace ns_2 {
  /// <reference types="react" />
  import ToastTypes = ns_1.ToastTypes;
  interface Props {
    key: string;
    type: ToastTypes;
    message: string;
    duration?: number;
    id: string;
  }
  export function Toast({
    type,
    message,
    duration,
    id
  }: Props): JSX.Element;
  export {};
}


export import Toasts = ns_0.Toasts;
export import ToastTypes = ns_1.ToastTypes;
export import IToast = ns_1.IToast;
export import toast = ns_1.toast;
export import Toast = ns_2.Toast;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };